{"id":"AUD-TYP-00001","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/ManageSubscriptionScreen.test.tsx","line":4,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00002","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/ManageSubscriptionScreen.test.tsx","line":70,"code":"(useAuthStore as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00003","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/ManageSubscriptionScreen.test.tsx","line":74,"code":"(premiumAPI.getSubscription as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00004","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/ManageSubscriptionScreen.test.tsx","line":92,"code":"(premiumAPI.cancelSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00005","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/ManageSubscriptionScreen.test.tsx","line":116,"code":"// Mock subscription as cancelled at period end","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00006","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/ManageSubscriptionScreen.test.tsx","line":117,"code":"(premiumAPI.getSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00007","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/ManageSubscriptionScreen.test.tsx","line":133,"code":"// Mock subscription as cancelled at period end","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00008","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/ManageSubscriptionScreen.test.tsx","line":134,"code":"(premiumAPI.getSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00009","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/ManageSubscriptionScreen.test.tsx","line":139,"code":"(premiumAPI.reactivateSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00010","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/ManageSubscriptionScreen.test.tsx","line":163,"code":"(premiumAPI.openBillingPortal as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00011","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/ManageSubscriptionScreen.test.tsx","line":191,"code":"(premiumAPI.getSubscription as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00012","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/PremiumScreen.test.tsx","line":7,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00013","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/PremiumScreen.test.tsx","line":45,"code":"(useAuthStore as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00014","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/PremiumScreen.test.tsx","line":49,"code":"(premiumAPI.getPlanDetails as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00015","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/PremiumScreen.test.tsx","line":148,"code":"(premiumAPI.createCheckoutSession as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00016","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/PremiumScreen.test.tsx","line":177,"code":"it(\"displays user as premium member when subscribed\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00017","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/PremiumScreen.test.tsx","line":178,"code":"// Mock user as premium","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00018","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/PremiumScreen.test.tsx","line":179,"code":"(useAuthStore as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00019","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/PremiumScreen.test.tsx","line":189,"code":"(premiumAPI.getCurrentSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00020","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/advanced-regression.test.tsx","line":18,"code":"import * as Location from 'expo-location';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00021","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/advanced-regression.test.tsx","line":45,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00022","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/advanced-regression.test.tsx","line":46,"code":"const mockLocation = Location as jest.Mocked<typeof Location>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00023","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/advanced-regression.test.tsx","line":47,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00024","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/advanced-regression.test.tsx","line":48,"code":"const mockOfflineService = offlineService as jest.Mocked<typeof offlineService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00025","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/advanced-regression.test.tsx","line":49,"code":"const mockAuthService = authService as jest.Mocked<typeof authService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00026","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/advanced-regression.test.tsx","line":50,"code":"const mockUploadHygieneService = uploadHygieneService as jest.Mocked<typeof uploadHygieneService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00027","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/advanced-regression.test.tsx","line":51,"code":"const mockCommunityAPI = communityAPI as jest.Mocked<typeof communityAPI>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00028","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/advanced-regression.test.tsx","line":52,"code":"const mockNotificationService = notificationService as jest.Mocked<typeof notificationService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00029","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/components/SwipeCard.test.tsx","line":97,"code":"it(\"renders correctly as top card\", () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00030","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":20,"code":"import * as Location from 'expo-location';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00031","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":59,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00032","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":60,"code":"const mockLocation = Location as jest.Mocked<typeof Location>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00033","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":61,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00034","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":62,"code":"const mockAuthService = authService as jest.Mocked<typeof authService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00035","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":63,"code":"const mockOfflineService = offlineService as jest.Mocked<typeof offlineService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00036","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":64,"code":"const mockUploadHygieneService = uploadHygieneService as jest.Mocked<typeof uploadHygieneService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00037","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":65,"code":"const mockCommunityAPI = communityAPI as jest.Mocked<typeof communityAPI>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00038","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":66,"code":"const mockNotificationService = notificationService as jest.Mocked<typeof notificationService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00039","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":349,"code":"expect(getByText('Your card was declined')).toBeTruthy();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00040","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":403,"code":"fireEvent.press(getByText('Set as Active'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00041","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":441,"code":"fireEvent.press(screen.getAllByText('Set as Primary')[1]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00042","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":524,"code":"// Mark as read and continue conversation","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00043","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/critical-journeys.test.tsx","line":541,"code":"// Mark as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00044","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":82,"code":"(apiService.post as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00045","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":115,"code":"(apiService.post as jest.Mock).mockRejectedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00046","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":150,"code":"(apiService.post as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00047","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":198,"code":"(apiService.get as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00048","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":258,"code":"(apiService.post as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00049","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":303,"code":"(apiService.put as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00050","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":354,"code":"(apiService.post as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00051","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":399,"code":"(apiService.post as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00052","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":457,"code":"(apiService.get as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00053","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":515,"code":"(apiService.post as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00054","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":561,"code":"(apiService.get as jest.Mock).mockRejectedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00055","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":596,"code":"(apiService.get as jest.Mock).mockRejectedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00056","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration/api.integration.test.tsx","line":633,"code":"(apiService.get as jest.Mock).mockRejectedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00057","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":46,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00058","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":47,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00059","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":48,"code":"const mockOfflineService = offlineService as jest.Mocked<typeof offlineService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00060","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":49,"code":"const mockAuthService = authService as jest.Mocked<typeof authService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00061","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":50,"code":"const mockNotificationService = notificationService as jest.Mocked<typeof notificationService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00062","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":51,"code":"const mockCommunityAPI = communityAPI as jest.Mocked<typeof communityAPI>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00063","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":52,"code":"const mockAiService = aiService as jest.Mocked<typeof aiService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00064","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":53,"code":"const mockUploadHygieneService = uploadHygieneService as jest.Mocked<typeof uploadHygieneService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00065","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":54,"code":"const mockAuthNavigator = AuthNavigator as jest.Mocked<typeof AuthNavigator>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00066","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":55,"code":"const mockMainNavigator = MainNavigator as jest.Mocked<typeof MainNavigator>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00067","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":412,"code":"'Your comment was posted successfully'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00068","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":698,"code":"// Verify error was reported with analytics context","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00069","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/integration.test.tsx","line":765,"code":"'Your message was delivered successfully'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00070","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/performance/PhoenixCard.performance.test.tsx","line":85,"code":"let performanceMonitor: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00071","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/performance.test.tsx","line":41,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00072","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/performance.test.tsx","line":42,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00073","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/performance.test.tsx","line":43,"code":"const mockOfflineService = offlineService as jest.Mocked<typeof offlineService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00074","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/performance.test.tsx","line":44,"code":"const mockUploadHygieneService = uploadHygieneService as jest.Mocked<typeof uploadHygieneService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00075","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/performance.test.tsx","line":61,"code":"let performanceMeasures: any[] = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00076","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/performance.test.tsx","line":973,"code":"function useResponsiveAnimations(screenSize: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00077","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/phoenix/PhoenixCard.test.tsx","line":340,"code":"render(<PhoenixCard pet={undefined as any} onSwipeLeft={() => {}} onSwipeRight={() => {}} onSwipeUp={() => {}} />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00078","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/phoenix/PhoenixCard.test.tsx","line":340,"code":"render(<PhoenixCard pet={undefined as any} onSwipeLeft={() => {}} onSwipeRight={() => {}} onSwipeUp={() => {}} />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00079","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/regression.test.tsx","line":44,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00080","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/regression.test.tsx","line":45,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00081","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/regression.test.tsx","line":46,"code":"const mockOfflineService = offlineService as jest.Mocked<typeof offlineService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00082","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/regression.test.tsx","line":47,"code":"const mockAuthService = authService as jest.Mocked<typeof authService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00083","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/regression.test.tsx","line":48,"code":"const mockNotificationService = notificationService as jest.Mocked<typeof notificationService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00084","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/regression.test.tsx","line":487,"code":"callOrder.push(endpoint as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00085","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/regression.test.tsx","line":692,"code":"message: 'Your card was declined',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00086","severity":"P2","category":"Type","file":"apps/mobile/src/__tests__/regression.test.tsx","line":698,"code":"expect(getByText('Payment failed: Your card was declined')).toBeTruthy();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00087","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":44,"code":"apiAction?: () => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00088","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":86,"code":"apiAction?: () => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00089","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":88,"code":"[key: string]: () => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00090","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":423,"code":"variant: \"default\" as CardVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00091","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":424,"code":"interactions: [\"hover\", \"press\"] as CardInteraction[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00092","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":430,"code":"variant: \"glass\" as CardVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00093","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":431,"code":"interactions: [\"hover\", \"press\", \"glow\"] as CardInteraction[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00094","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":438,"code":"variant: \"gradient\" as CardVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00095","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":439,"code":"interactions: [\"hover\", \"press\", \"glow\"] as CardInteraction[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00096","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":446,"code":"variant: \"premium\" as CardVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00097","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":447,"code":"interactions: [\"hover\", \"press\", \"glow\", \"bounce\"] as CardInteraction[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00098","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":454,"code":"variant: \"minimal\" as CardVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00099","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":455,"code":"interactions: [\"hover\", \"press\"] as CardInteraction[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00100","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":461,"code":"variant: \"neon\" as CardVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00101","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":462,"code":"interactions: [\"hover\", \"press\", \"glow\", \"bounce\"] as CardInteraction[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00102","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":469,"code":"variant: \"holographic\" as CardVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00103","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":470,"code":"interactions: [\"hover\", \"press\", \"glow\", \"tilt\"] as CardInteraction[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00104","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":476,"code":"variant: \"floating\" as CardVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00105","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedCard.tsx","line":477,"code":"interactions: [\"hover\", \"press\", \"bounce\"] as CardInteraction[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00106","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedHeader.tsx","line":10,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00107","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedHeader.tsx","line":62,"code":"apiAction?: () => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00108","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedHeader.tsx","line":89,"code":"[key: string]: () => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00109","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedHeader.tsx","line":478,"code":"variant: \"default\" as HeaderVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00110","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedHeader.tsx","line":485,"code":"variant: \"glass\" as HeaderVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00111","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedHeader.tsx","line":494,"code":"variant: \"gradient\" as HeaderVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00112","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedHeader.tsx","line":503,"code":"variant: \"premium\" as HeaderVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00113","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedHeader.tsx","line":511,"code":"variant: \"minimal\" as HeaderVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00114","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedHeader.tsx","line":519,"code":"variant: \"floating\" as HeaderVariant,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00115","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedInteractionSystem.tsx","line":9,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00116","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedInteractionSystem.tsx","line":67,"code":"selection: 0, // Using light impact as fallback since SelectionFeedbackStyle not available","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00117","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedInteractionSystem.tsx","line":108,"code":"apiAction?: () => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00118","severity":"P1","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedInteractionSystem.tsx","line":150,"code":"AccessibilityInfo.isReduceMotionEnabled().then(setIsAccessibilityEnabled);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00119","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedInteractionTest.tsx","line":9,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00120","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/AdvancedInteractionTest.tsx","line":176,"code":"typeof matchesAPI[method as keyof typeof matchesAPI] !== \"function\"","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00121","severity":"P2","category":"Type","file":"apps/mobile/src/components/Advanced/Card/CardAnimations.tsx","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00122","severity":"P2","category":"Type","file":"apps/mobile/src/components/AnimatedButton.tsx","line":1,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00123","severity":"P1","category":"Type","file":"apps/mobile/src/components/AnimatedButton.tsx","line":81,"code":".then(setReduceMotion)","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00124","severity":"P1","category":"Type","file":"apps/mobile/src/components/AnimatedButton.tsx","line":82,"code":".catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00125","severity":"P2","category":"Type","file":"apps/mobile/src/components/AnimatedButton.tsx","line":93,"code":"typeof (sub as { remove?: () => void }).remove === \"function\"","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00126","severity":"P2","category":"Type","file":"apps/mobile/src/components/AnimatedButton.tsx","line":95,"code":"(sub as { remove: () => void }).remove();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00127","severity":"P1","category":"Type","file":"apps/mobile/src/components/AnimatedButton.tsx","line":111,"code":").catch((error: unknown) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00128","severity":"P2","category":"Type","file":"apps/mobile/src/components/AnimatedSplash.tsx","line":12,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00129","severity":"P2","category":"Type","file":"apps/mobile/src/components/Animations/Lottie/ErrorAnimation.tsx","line":12,"code":"style?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00130","severity":"P2","category":"Type","file":"apps/mobile/src/components/Animations/Lottie/LoadingAnimation.tsx","line":11,"code":"style?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00131","severity":"P2","category":"Type","file":"apps/mobile/src/components/Animations/Lottie/SuccessAnimation.tsx","line":12,"code":"style?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00132","severity":"P2","category":"Type","file":"apps/mobile/src/components/Animations/LottieAnimations.tsx","line":16,"code":"export { SuccessAnimation as SuccessLottie } from \"./Lottie/SuccessAnimation\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00133","severity":"P2","category":"Type","file":"apps/mobile/src/components/Animations/LottieAnimations.tsx","line":17,"code":"export { LoadingAnimation as LoadingLottie } from \"./Lottie/LoadingAnimation\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00134","severity":"P2","category":"Type","file":"apps/mobile/src/components/Animations/LottieAnimations.tsx","line":18,"code":"export { ErrorAnimation as ErrorLottie } from \"./Lottie/ErrorAnimation\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00135","severity":"P2","category":"Type","file":"apps/mobile/src/components/Animations/LottieAnimations.tsx","line":61,"code":"// Note: EmptyLottie and CelebrationLottie were removed as they were not used","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00136","severity":"P2","category":"Type","file":"apps/mobile/src/components/Animations/LottieAnimations.tsx","line":62,"code":"// Add them back as needed in separate files following the pattern of SuccessAnimation, etc.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00137","severity":"P2","category":"Type","file":"apps/mobile/src/components/EnhancedTabBar.tsx","line":15,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00138","severity":"P2","category":"Type","file":"apps/mobile/src/components/EnhancedTabBar.tsx","line":141,"code":"descriptors: any; // React Navigation bottom tab descriptors","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00139","severity":"P2","category":"Type","file":"apps/mobile/src/components/EnhancedTabBar.tsx","line":142,"code":"navigation: any; // React Navigation navigation helper","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00140","severity":"P2","category":"Type","file":"apps/mobile/src/components/EnhancedTabBar.tsx","line":224,"code":"} as any; // Type assertion for percentage strings","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00141","severity":"P2","category":"Type","file":"apps/mobile/src/components/EnhancedTabBar.tsx","line":224,"code":"} as any; // Type assertion for percentage strings","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00142","severity":"P2","category":"Type","file":"apps/mobile/src/components/EnhancedTabBar.tsx","line":242,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00143","severity":"P2","category":"Type","file":"apps/mobile/src/components/EnhancedTabBar.tsx","line":242,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00144","severity":"P2","category":"Type","file":"apps/mobile/src/components/Footer.tsx","line":4,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00145","severity":"P2","category":"Type","file":"apps/mobile/src/components/Footer.tsx","line":6,"code":"import * as React from \"react\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00146","severity":"P2","category":"Type","file":"apps/mobile/src/components/Footer.tsx","line":98,"code":"animatedStyle as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00147","severity":"P2","category":"Type","file":"apps/mobile/src/components/Footer.tsx","line":98,"code":"animatedStyle as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00148","severity":"P2","category":"Type","file":"apps/mobile/src/components/Footer.tsx","line":225,"code":"animatedStyle as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00149","severity":"P2","category":"Type","file":"apps/mobile/src/components/Footer.tsx","line":225,"code":"animatedStyle as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00150","severity":"P2","category":"Type","file":"apps/mobile/src/components/Footer.tsx","line":252,"code":"<Animated.View style={animatedStyle as any}>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00151","severity":"P2","category":"Type","file":"apps/mobile/src/components/Footer.tsx","line":252,"code":"<Animated.View style={animatedStyle as any}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00152","severity":"P2","category":"Type","file":"apps/mobile/src/components/Footer.tsx","line":255,"code":"[\"rgba(139, 92, 246, 0.1)\", \"rgba(236, 72, 153, 0.1)\"] as [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00153","severity":"P2","category":"Type","file":"apps/mobile/src/components/Gestures/DoubleTapLike.tsx","line":13,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00154","severity":"P2","category":"Type","file":"apps/mobile/src/components/Gestures/DoubleTapLike.tsx","line":22,"code":"style?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00155","severity":"P2","category":"Type","file":"apps/mobile/src/components/Gestures/DoubleTapLikePlus.tsx","line":13,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00156","severity":"P2","category":"Type","file":"apps/mobile/src/components/Gestures/DoubleTapLikePlus.tsx","line":22,"code":"style?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00157","severity":"P2","category":"Type","file":"apps/mobile/src/components/Gestures/LikeArbitrator.tsx","line":10,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00158","severity":"P1","category":"Type","file":"apps/mobile/src/components/Gestures/LikeArbitrator.tsx","line":55,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00159","severity":"P1","category":"Type","file":"apps/mobile/src/components/Gestures/LikeArbitrator.tsx","line":64,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00160","severity":"P2","category":"Type","file":"apps/mobile/src/components/Gestures/PinchZoom.tsx","line":11,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00161","severity":"P2","category":"Type","file":"apps/mobile/src/components/Gestures/PinchZoom.tsx","line":26,"code":"style?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00162","severity":"P2","category":"Type","file":"apps/mobile/src/components/Gestures/PinchZoomPro.tsx","line":11,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00163","severity":"P2","category":"Type","file":"apps/mobile/src/components/Gestures/index.ts","line":4,"code":"export { default as LikeArbitrator } from './LikeArbitrator';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00164","severity":"P2","category":"Type","file":"apps/mobile/src/components/ImmersiveCard.tsx","line":7,"code":"import { StyleSheet, TouchableOpacity as RNTouchableOpacity } from \"react-native\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00165","severity":"P2","category":"Type","file":"apps/mobile/src/components/ImmersiveCard.tsx","line":328,"code":"].filter(Boolean) as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00166","severity":"P2","category":"Type","file":"apps/mobile/src/components/ImmersiveCard.tsx","line":328,"code":"].filter(Boolean) as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00167","severity":"P2","category":"Type","file":"apps/mobile/src/components/InteractiveButton.tsx","line":340,"code":") as TouchableOpacityProps)}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00168","severity":"P2","category":"Type","file":"apps/mobile/src/components/LazyScreen.tsx","line":163,"code":"<LazyComponent {...(props as any)} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00169","severity":"P2","category":"Type","file":"apps/mobile/src/components/LazyScreen.tsx","line":163,"code":"<LazyComponent {...(props as any)} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00170","severity":"P2","category":"Type","file":"apps/mobile/src/components/LazyScreen.tsx","line":184,"code":"importFunction: () => Promise<{ default: ComponentType<any> }>,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00171","severity":"P1","category":"Type","file":"apps/mobile/src/components/LazyScreen.tsx","line":187,"code":"importFunction().catch((error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00172","severity":"P2","category":"Type","file":"apps/mobile/src/components/LazyScreen.tsx","line":198,"code":"importFunctions: Array<() => Promise<{ default: ComponentType<any> }>>,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00173","severity":"P2","category":"Type","file":"apps/mobile/src/components/ModernPhotoUpload.tsx","line":14,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00174","severity":"P2","category":"Type","file":"apps/mobile/src/components/ModernPhotoUpload.tsx","line":15,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00175","severity":"P2","category":"Type","file":"apps/mobile/src/components/ModernPhotoUploadWithEditor.tsx","line":1,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00176","severity":"P2","category":"Type","file":"apps/mobile/src/components/ModernPhotoUploadWithEditor.tsx","line":22,"code":"style?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00177","severity":"P2","category":"Type","file":"apps/mobile/src/components/ModernSwipeCard.tsx","line":14,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00178","severity":"P1","category":"Type","file":"apps/mobile/src/components/ModernSwipeCard.tsx","line":114,"code":"AccessibilityInfo.isReduceMotionEnabled().then(setIsAccessibilityEnabled);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00179","severity":"P1","category":"Type","file":"apps/mobile/src/components/ModernSwipeCard.tsx","line":176,"code":"handlePass(pet).then(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00180","severity":"P1","category":"Type","file":"apps/mobile/src/components/ModernSwipeCard.tsx","line":184,"code":"handleLike(pet).then(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00181","severity":"P1","category":"Type","file":"apps/mobile/src/components/ModernSwipeCard.tsx","line":192,"code":"handleSuperLike(pet).then(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00182","severity":"P2","category":"Type","file":"apps/mobile/src/components/ModernSwipeCard.tsx","line":260,"code":": [combinedAnimatedStyle]) as AnimatedStyleProp<ViewStyle>[] // Fix iterator issue","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00183","severity":"P2","category":"Type","file":"apps/mobile/src/components/ModernSwipeCard.tsx","line":307,"code":"{/* Photo Navigation Areas */}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00184","severity":"P2","category":"Type","file":"apps/mobile/src/components/ModernSwipeCard.tsx","line":444,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00185","severity":"P1","category":"Type","file":"apps/mobile/src/components/MotionPrimitives.tsx","line":9,"code":"AccessibilityInfo.isReduceMotionEnabled().then(v => { setReduced(!!v); });","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00186","severity":"P2","category":"Type","file":"apps/mobile/src/components/NewComponents.tsx","line":9,"code":"export { default as Theme } from \"../theme/unified-theme\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00187","severity":"P2","category":"Type","file":"apps/mobile/src/components/NewComponents.tsx","line":38,"code":"export { default as BaseButton } from \"./buttons/BaseButton\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00188","severity":"P2","category":"Type","file":"apps/mobile/src/components/NewComponents.tsx","line":40,"code":"default as EliteButton,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00189","severity":"P2","category":"Type","file":"apps/mobile/src/components/NewComponents.tsx","line":54,"code":"default as FXContainer,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00190","severity":"P2","category":"Type","file":"apps/mobile/src/components/NewComponents.tsx","line":81,"code":"export { default as ModernSwipeCard } from \"./ModernSwipeCard\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00191","severity":"P2","category":"Type","file":"apps/mobile/src/components/NewComponents.tsx","line":82,"code":"export { default as ModernPhotoUpload } from \"./ModernPhotoUpload\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00192","severity":"P2","category":"Type","file":"apps/mobile/src/components/NewComponents.tsx","line":85,"code":"export { default as PerformanceTestSuite } from \"./PerformanceTestSuite\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00193","severity":"P2","category":"Type","file":"apps/mobile/src/components/OptimizedImage.tsx","line":58,"code":"priority = \"normal\" as Priority,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00194","severity":"P2","category":"Type","file":"apps/mobile/src/components/OptimizedImage.tsx","line":59,"code":"resizeMode = \"cover\" as ResizeMode,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00195","severity":"P2","category":"Type","file":"apps/mobile/src/components/OptimizedImage.tsx","line":100,"code":"} as Source;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00196","severity":"P2","category":"Type","file":"apps/mobile/src/components/OptimizedImage.tsx","line":107,"code":"style={[styles.image, style] as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00197","severity":"P2","category":"Type","file":"apps/mobile/src/components/OptimizedImage.tsx","line":107,"code":"style={[styles.image, style] as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00198","severity":"P2","category":"Type","file":"apps/mobile/src/components/OptimizedImage.tsx","line":111,"code":"onError={handleError as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00199","severity":"P2","category":"Type","file":"apps/mobile/src/components/OptimizedImage.tsx","line":111,"code":"onError={handleError as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00200","severity":"P2","category":"Type","file":"apps/mobile/src/components/OptimizedImage.tsx","line":249,"code":"cache=\"web\" // Use web cache for avatars as they might change","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00201","severity":"P2","category":"Type","file":"apps/mobile/src/components/PawPullToRefresh.tsx","line":13,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00202","severity":"P2","category":"Type","file":"apps/mobile/src/components/PerformanceTestSuite.tsx","line":288,"code":"{(metrics as any).animationFrameTime || 0}ms","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00203","severity":"P2","category":"Type","file":"apps/mobile/src/components/PerformanceTestSuite.tsx","line":288,"code":"{(metrics as any).animationFrameTime || 0}ms","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00204","severity":"P2","category":"Type","file":"apps/mobile/src/components/PerformanceTestSuite.tsx","line":391,"code":"function getGradeColor(grade: string, theme: any): string {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00205","severity":"P2","category":"Type","file":"apps/mobile/src/components/PerformanceTestSuite.tsx","line":408,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00206","severity":"P2","category":"Type","file":"apps/mobile/src/components/PhotoUploadComponent.tsx","line":1,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00207","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/PremiumButton.tsx","line":10,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00208","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/PremiumCard.tsx","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00209","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/PremiumGate.tsx","line":10,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00210","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/PremiumGate.tsx","line":53,"code":"(navigation as any).navigate?.(\"Premium\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00211","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/PremiumGate.tsx","line":53,"code":"(navigation as any).navigate?.(\"Premium\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00212","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/PremiumGate.tsx","line":80,"code":"{ backgroundColor: (colors as any).surface ?? colors.background },","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00213","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/PremiumGate.tsx","line":80,"code":"{ backgroundColor: (colors as any).surface ?? colors.background },","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00214","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumButton.test.tsx","line":6,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00215","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumButton.test.tsx","line":28,"code":"(useTheme as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00216","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumButton.test.tsx","line":87,"code":"(useTheme as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00217","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumCard.test.tsx","line":6,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00218","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumCard.test.tsx","line":41,"code":"(useTheme as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00219","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumCard.test.tsx","line":93,"code":"// Check if onSubscribe was called with correct plan","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00220","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumCard.test.tsx","line":96,"code":"// Check if haptic feedback was triggered","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00221","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumCard.test.tsx","line":104,"code":"(useTheme as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00222","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":22,"code":"(useTheme as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00223","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":34,"code":"// Mock user as premium","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00224","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":35,"code":"(useAuthStore as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00225","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":65,"code":"// Mock user as non-premium","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00226","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":66,"code":"(useAuthStore as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00227","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":101,"code":"// Mock user as non-premium","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00228","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":102,"code":"(useAuthStore as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00229","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":131,"code":"// Mock user as non-premium","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00230","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":132,"code":"(useAuthStore as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00231","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":160,"code":"(useTheme as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00232","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":171,"code":"// Mock user as non-premium","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00233","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/__tests__/PremiumGate.test.tsx","line":172,"code":"(useAuthStore as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00234","severity":"P2","category":"Type","file":"apps/mobile/src/components/Premium/withPremiumGuard.tsx","line":13,"code":"const nav = useNavigation<any>();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00235","severity":"P2","category":"Type","file":"apps/mobile/src/components/ShimmerPlaceholder.tsx","line":83,"code":"style as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00236","severity":"P2","category":"Type","file":"apps/mobile/src/components/ShimmerPlaceholder.tsx","line":83,"code":"style as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00237","severity":"P2","category":"Type","file":"apps/mobile/src/components/ShimmerPlaceholder.tsx","line":84,"code":"] as any","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00238","severity":"P2","category":"Type","file":"apps/mobile/src/components/ShimmerPlaceholder.tsx","line":84,"code":"] as any","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00239","severity":"P2","category":"Type","file":"apps/mobile/src/components/ShimmerPlaceholder.tsx","line":92,"code":"transform: [{ translateX: translateX as any }],","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00240","severity":"P2","category":"Type","file":"apps/mobile/src/components/ShimmerPlaceholder.tsx","line":92,"code":"transform: [{ translateX: translateX as any }],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00241","severity":"P2","category":"Type","file":"apps/mobile/src/components/ShimmerPlaceholder.tsx","line":94,"code":"] as any","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00242","severity":"P2","category":"Type","file":"apps/mobile/src/components/ShimmerPlaceholder.tsx","line":94,"code":"] as any","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00243","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":10,"code":"import * as Haptics from 'expo-haptics';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00244","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":19,"code":"const mockUseTheme = useTheme as jest.MockedFunction<typeof useTheme>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00245","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":20,"code":"const mockUseSafeAreaInsets = useSafeAreaInsets as jest.MockedFunction<typeof useSafeAreaInsets>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00246","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":21,"code":"const mockHaptics = Haptics as jest.Mocked<typeof Haptics>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00247","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":72,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00248","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":72,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00249","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":81,"code":"(Haptics.impactAsync as jest.Mock).mockResolvedValue(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00250","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":356,"code":"descriptors={invalidDescriptors as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00251","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":356,"code":"descriptors={invalidDescriptors as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00252","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":363,"code":"const brokenNavigation = {} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00253","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":363,"code":"const brokenNavigation = {} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00254","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":424,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00255","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":424,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00256","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":442,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00257","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/EnhancedTabBar.test.tsx","line":442,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00258","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/ModernPhotoUpload.test.tsx","line":5,"code":"import * as ImagePicker from 'expo-image-picker';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00259","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/ModernPhotoUpload.test.tsx","line":6,"code":"import * as Haptics from 'expo-haptics';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00260","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/ModernPhotoUpload.test.tsx","line":11,"code":"View: ({ children }: any) => children,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00261","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/ModernPhotoUpload.test.tsx","line":13,"code":"useSharedValue: (value: any) => ({ value }),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00262","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/ModernPhotoUpload.test.tsx","line":14,"code":"withSpring: (value: any) => value,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00263","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/ModernPhotoUpload.test.tsx","line":19,"code":"return ({ children }: any) => children;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00264","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/ModernPhotoUpload.test.tsx","line":23,"code":"return ({ title, onPress, children }: any) => (","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00265","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/ModernPhotoUpload.test.tsx","line":33,"code":"AdvancedPhotoEditor: ({ onSave, onCancel }: any) => (","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00266","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/ModernPhotoUpload.test.tsx","line":44,"code":"(ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock) =","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00267","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/ModernPhotoUpload.test.tsx","line":46,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock) = mockLaunchImageLibraryAsync;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00268","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/PhotoUploadComponent.test.tsx","line":5,"code":"* as defined in Test Plan v1.0","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00269","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/PhotoUploadComponent.test.tsx","line":11,"code":"import * as ImagePicker from 'expo-image-picker';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00270","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/PhotoUploadComponent.test.tsx","line":21,"code":"const mockImagePicker = ImagePicker as jest.Mocked<typeof ImagePicker>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00271","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/PhotoUploadComponent.test.tsx","line":22,"code":"const mockUsePhotoManagement = usePhotoManagement as jest.MockedFunction<typeof usePhotoManagement>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00272","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/PhotoUploadComponent.test.tsx","line":304,"code":"fireEvent.press(setPrimaryButtons[0]); // Set photo1 as primary","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00273","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/VerificationTierCard.test.tsx","line":5,"code":"* as defined in Test Plan v1.0","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00274","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/VerificationTierCard.test.tsx","line":358,"code":"status=\"unknown\" as any","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00275","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/VerificationTierCard.test.tsx","line":358,"code":"status=\"unknown\" as any","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00276","severity":"P2","category":"Type","file":"apps/mobile/src/components/__tests__/VerificationTierCard.test.tsx","line":416,"code":"const TestWrapper = (props: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00277","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/BioResults.stories.tsx","line":192,"code":"* All tone variations (showing first as example)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00278","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/BioResults.stories.tsx","line":203,"code":"'Showing first tone variation. All 5 tones are available as separate stories (Playful, Professional, Casual, Romantic, Mysterious)',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00279","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/BioResults.tsx","line":16,"code":"import * as Clipboard from \"expo-clipboard\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00280","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/PetInfoForm.stories.tsx","line":71,"code":"const InteractiveWrapper = (args: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00281","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/PetInfoForm.stories.tsx","line":177,"code":"'Max is an incredibly playful and energetic Golden Retriever who loves playing fetch, going on hikes, swimming in lakes, chasing squirrels in the park, cuddling on the couch, learning new tricks, meeting new friends at the dog park, exploring new trails, watching birds from the window, and absolutely adores belly rubs! He has the sweetest personality and is always ready for the next adventure.'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00282","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/PetInfoForm.tsx","line":55,"code":"placeholderTextColor={Theme.colors.text.secondary as ColorValue}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00283","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/PetInfoForm.tsx","line":74,"code":"placeholderTextColor={Theme.colors.text.secondary as ColorValue}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00284","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/PetInfoForm.tsx","line":93,"code":"placeholderTextColor={Theme.colors.text.secondary as ColorValue}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00285","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/PetInfoForm.tsx","line":112,"code":"placeholderTextColor={Theme.colors.text.secondary as ColorValue}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00286","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/__tests__/BioResults.test.tsx","line":52,"code":"bio: 'Meet Max, an energetic 2-year-old Golden Retriever who loves playing fetch and going on adventures. He has a friendly personality and gets along with everyone.',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00287","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/__tests__/BioResults.test.tsx","line":93,"code":"it('displays keywords as chips', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00288","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/__tests__/BioResults.test.tsx","line":400,"code":"it('has accessible labels for action buttons', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00289","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/__tests__/PetInfoForm.test.tsx","line":141,"code":"it('updates character count as personality text changes', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00290","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/__tests__/PetInfoForm.test.tsx","line":339,"code":"it('has accessible labels for all inputs', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00291","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/__tests__/ToneSelector.test.tsx","line":90,"code":"// Should be called if card was found","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00292","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/__tests__/ToneSelector.test.tsx","line":190,"code":"it('has accessible labels for tone selection', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00293","severity":"P2","category":"Type","file":"apps/mobile/src/components/ai/__tests__/ai-components.test.tsx","line":208,"code":"it(\"shows keywords as chips\", () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00294","severity":"P2","category":"Type","file":"apps/mobile/src/components/buttons/EffectWrappers.tsx","line":64,"code":"<Animated.View ref={ref} style={[glowStyle as AnimatedStyleProp<ViewStyle>, style]}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00295","severity":"P2","category":"Type","file":"apps/mobile/src/components/buttons/EffectWrappers.tsx","line":93,"code":"style={[magneticStyle as AnimatedStyleProp<ViewStyle>, style]}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00296","severity":"P2","category":"Type","file":"apps/mobile/src/components/buttons/EffectWrappers.tsx","line":137,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00297","severity":"P2","category":"Type","file":"apps/mobile/src/components/buttons/EffectWrappers.tsx","line":138,"code":"rippleStyle as AnimatedStyleProp<ViewStyle>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00298","severity":"P2","category":"Type","file":"apps/mobile/src/components/buttons/EffectWrappers.tsx","line":182,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00299","severity":"P2","category":"Type","file":"apps/mobile/src/components/buttons/EffectWrappers.tsx","line":183,"code":"shimmerStyle as AnimatedStyleProp<ViewStyle>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00300","severity":"P2","category":"Type","file":"apps/mobile/src/components/buttons/EffectWrappers.tsx","line":211,"code":"style={[pressStyle as AnimatedStyleProp<ViewStyle>, style]}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00301","severity":"P2","category":"Type","file":"apps/mobile/src/components/buttons/EffectWrappers.tsx","line":233,"code":"const gradientConfig = gradient ? (Theme.gradients as any)[gradient] : null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00302","severity":"P2","category":"Type","file":"apps/mobile/src/components/buttons/EffectWrappers.tsx","line":233,"code":"const gradientConfig = gradient ? (Theme.gradients as any)[gradient] : null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00303","severity":"P2","category":"Type","file":"apps/mobile/src/components/calling/CallManager.tsx","line":54,"code":"\"There was an issue with the call. Please try again.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00304","severity":"P2","category":"Type","file":"apps/mobile/src/components/calling/__tests__/CallManager.test.tsx","line":28,"code":"const mockWebRTCService = WebRTCService as jest.Mocked<typeof WebRTCService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00305","severity":"P2","category":"Type","file":"apps/mobile/src/components/calling/__tests__/CallManager.test.tsx","line":29,"code":"const mockUseSocket = useSocket as jest.MockedFunction<typeof useSocket>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00306","severity":"P2","category":"Type","file":"apps/mobile/src/components/calling/__tests__/CallManager.test.tsx","line":34,"code":"mockUseSocket.mockReturnValue(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00307","severity":"P2","category":"Type","file":"apps/mobile/src/components/calling/__tests__/CallManager.test.tsx","line":34,"code":"mockUseSocket.mockReturnValue(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00308","severity":"P2","category":"Type","file":"apps/mobile/src/components/calling/__tests__/CallManager.test.tsx","line":157,"code":"\"There was an issue with the call. Please try again.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00309","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/ChatHeader.tsx","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00310","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MessageBubble.tsx","line":12,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00311","severity":"P1","category":"Type","file":"apps/mobile/src/components/chat/MessageBubble.tsx","line":85,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00312","severity":"P1","category":"Type","file":"apps/mobile/src/components/chat/MessageBubble.tsx","line":102,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00313","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MessageBubble.tsx","line":137,"code":"// Check if current user has read the message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00314","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MessageBubble.tsx","line":206,"code":"speciesEmojis[species as keyof typeof speciesEmojis] ||","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00315","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MessageBubbleEnhanced.tsx","line":12,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00316","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MessageBubbleEnhanced.tsx","line":57,"code":"// Check if current user has read the message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00317","severity":"P1","category":"Type","file":"apps/mobile/src/components/chat/MessageBubbleEnhanced.tsx","line":138,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00318","severity":"P1","category":"Type","file":"apps/mobile/src/components/chat/MessageBubbleEnhanced.tsx","line":155,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00319","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MessageBubbleEnhanced.tsx","line":241,"code":"speciesEmojis[species as keyof typeof speciesEmojis] ||","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00320","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MessageInput.tsx","line":4,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00321","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MessageInput.tsx","line":5,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00322","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MessageList.tsx","line":94,"code":"Alert.alert(\"Read by\", `Message was read by ${message.read ? \"recipient\" : \"no one yet\"}`);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00323","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MessageStatusTicks.tsx","line":58,"code":"let name: any = \"time-outline\";","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00324","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MessageWithEnhancements.tsx","line":17,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00325","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/MobileVoiceRecorder.tsx","line":29,"code":"} as RecordingInstance,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00326","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/ReactionBarMagnetic.tsx","line":123,"code":": Math.max(0, 1 - Math.abs(((t as number) - x) / influenceRadius));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00327","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/ReactionBarMagnetic.tsx","line":127,"code":"const tilt = reduced ? 0 : (p * 12 * ((t as number) - x)) / influenceRadius;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00328","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/ReactionBarMagnetic.tsx","line":164,"code":"const makeStyles = (theme: any, bg?: string, border?: string) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00329","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/ReadByPopover.tsx","line":16,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00330","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/ReadByPopover.tsx","line":17,"code":"import type { ReadReceipt as CoreReadReceipt, User } from \"@pawfectmatch/core\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00331","severity":"P1","category":"Type","file":"apps/mobile/src/components/chat/ReadByPopover.tsx","line":61,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00332","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/ReplyPreviewBar.tsx","line":126,"code":"const makeStyles = (theme: any) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00333","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/RetryBadge.tsx","line":31,"code":"if (r && typeof (r as any).then === \"function\") {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00334","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/RetryBadge.tsx","line":31,"code":"if (r && typeof (r as any).then === \"function\") {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00335","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/VoicePlayer.tsx","line":35,"code":"s.setOnPlaybackStatusUpdate((st: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00336","severity":"P1","category":"Type","file":"apps/mobile/src/components/chat/VoicePlayer.tsx","line":43,"code":"})().catch((e) => onError?.(e));","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00337","severity":"P1","category":"Type","file":"apps/mobile/src/components/chat/VoicePlayer.tsx","line":46,"code":"sound.current?.unloadAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00338","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/VoicePlayer.tsx","line":122,"code":"fontVariant: [\"tabular-nums\"] as any","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00339","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/VoicePlayer.tsx","line":122,"code":"fontVariant: [\"tabular-nums\"] as any","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00340","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/VoiceRecorderUltra.tsx","line":12,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00341","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/index.ts","line":4,"code":"export { MessageBubble as BasicMessageBubble } from \"./MessageBubble\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00342","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/index.ts","line":11,"code":"export { default as ReactionBarMagnetic } from \"./ReactionBarMagnetic\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00343","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/index.ts","line":12,"code":"export { default as MessageStatusTicks } from \"./MessageStatusTicks\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00344","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/index.ts","line":13,"code":"export { default as RetryBadge } from \"./RetryBadge\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00345","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/index.ts","line":14,"code":"export { default as MessageTimestampBadge } from \"./MessageTimestampBadge\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00346","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/index.ts","line":15,"code":"export { default as ReadByPopover } from \"./ReadByPopover\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00347","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/index.ts","line":16,"code":"export { default as ReplySwipeHint } from \"./ReplySwipeHint\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00348","severity":"P2","category":"Type","file":"apps/mobile/src/components/chat/index.ts","line":17,"code":"export { default as ReplyPreviewBar } from \"./ReplyPreviewBar\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00349","severity":"P2","category":"Type","file":"apps/mobile/src/components/common/SmartImage.tsx","line":25,"code":"const as = useAnimatedStyle(() => ({ opacity: o.value }));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00350","severity":"P2","category":"Type","file":"apps/mobile/src/components/common/SmartImage.tsx","line":28,"code":"const { resizeMode, ...imageProps } = rest as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00351","severity":"P2","category":"Type","file":"apps/mobile/src/components/common/SmartImage.tsx","line":28,"code":"const { resizeMode, ...imageProps } = rest as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00352","severity":"P2","category":"Type","file":"apps/mobile/src/components/common/__tests__/SmartImage.test.tsx","line":13,"code":"View: React.forwardRef((props: any, ref: any) => <View {...props} ref={ref} />),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00353","severity":"P2","category":"Type","file":"apps/mobile/src/components/common/__tests__/SmartImage.test.tsx","line":14,"code":"Image: React.forwardRef((props: any, ref: any) => <Image {...props} ref={ref} />),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00354","severity":"P2","category":"Type","file":"apps/mobile/src/components/common/__tests__/SmartImage.test.tsx","line":16,"code":"withTiming: jest.fn((value: number, config: any) => value),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00355","severity":"P2","category":"Type","file":"apps/mobile/src/components/common/__tests__/SmartImage.test.tsx","line":85,"code":"<SmartImage source={{ uri: mockUri }} resizeMode={mode as any} />,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00356","severity":"P2","category":"Type","file":"apps/mobile/src/components/common/__tests__/SmartImage.test.tsx","line":85,"code":"<SmartImage source={{ uri: mockUri }} resizeMode={mode as any} />,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00357","severity":"P2","category":"Type","file":"apps/mobile/src/components/containers/FXContainer.tsx","line":172,"code":"shimmerStyle as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00358","severity":"P2","category":"Type","file":"apps/mobile/src/components/containers/FXContainer.tsx","line":172,"code":"shimmerStyle as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00359","severity":"P2","category":"Type","file":"apps/mobile/src/components/containers/FXContainer.tsx","line":208,"code":": undefined) as AnimatedStyleProp<ViewStyle> | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00360","severity":"P2","category":"Type","file":"apps/mobile/src/components/containers/FXContainer.tsx","line":211,"code":": undefined) as AnimatedStyleProp<ViewStyle> | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00361","severity":"P2","category":"Type","file":"apps/mobile/src/components/containers/FXContainer.tsx","line":216,"code":"baseStyles as AnimatedViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00362","severity":"P2","category":"Type","file":"apps/mobile/src/components/containers/FXContainer.tsx","line":217,"code":"appliedGlowStyle as AnimatedViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00363","severity":"P2","category":"Type","file":"apps/mobile/src/components/containers/FXContainer.tsx","line":218,"code":"appliedEntranceStyle as AnimatedViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00364","severity":"P2","category":"Type","file":"apps/mobile/src/components/containers/FXContainer.tsx","line":219,"code":"(style ?? null) as AnimatedViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00365","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/PetBasicInfoSection.tsx","line":233,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00366","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/PetFormSubmit.tsx","line":17,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00367","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/PetIntentHealthSection.tsx","line":26,"code":"{ key: \"specialNeeds\", label: \"Has Special Needs\" },","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00368","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/PetIntentHealthSection.tsx","line":29,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00369","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/PetIntentHealthSection.tsx","line":170,"code":"item.key as keyof typeof formData.healthInfo","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00370","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/PetIntentHealthSection.tsx","line":179,"code":"item.key as keyof typeof formData.healthInfo","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00371","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/PetIntentHealthSection.tsx","line":184,"code":"item.key as keyof typeof formData.healthInfo","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00372","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/PetPersonalitySection.tsx","line":40,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00373","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/PetPhotosSection.tsx","line":27,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00374","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/PetPhotosSection.tsx","line":305,"code":"as primary{\"\\n\"}• Supported formats: JPG, PNG, GIF","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00375","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/__tests__/PetPhotosSection.test.tsx","line":25,"code":"default: ({ name, size, color, testID }: any) => (","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00376","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/__tests__/PetPhotosSection.test.tsx","line":238,"code":"it(\"should show error message when photos field has error\", () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00377","severity":"P2","category":"Type","file":"apps/mobile/src/components/create-pet/__tests__/PetPhotosSection.test.tsx","line":338,"code":"expect(screen.getByText(/First photo will be set as primary/)).toBeTruthy();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00378","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/animations/index.ts","line":1,"code":"export { FadeInUp, default as FadeInUpDefault } from \"./FadeInUp\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00379","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/animations/index.ts","line":2,"code":"export { ScaleIn, default as ScaleInDefault } from \"./ScaleIn\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00380","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/animations/index.ts","line":5,"code":"default as StaggeredContainerDefault,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00381","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/animations/index.ts","line":9,"code":"default as GestureWrapperDefault,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00382","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":23,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00383","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":135,"code":"return { ...baseStyle, ...GlobalStyles.buttonSecondary as ViewStyle };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00384","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":137,"code":"return { ...baseStyle, ...GlobalStyles.buttonGhost as ViewStyle };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00385","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":152,"code":"...GlobalStyles.buttonPrimary as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00386","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":153,"code":"...(glow ? PREMIUM_SHADOWS.primaryGlow as ViewStyle : {} as ViewStyle),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00387","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":161,"code":"return GlobalStyles.buttonTextSecondary as ViewStyle;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00388","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":164,"code":"return { ...GlobalStyles.buttonTextSecondary as ViewStyle, color: Colors.white };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00389","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":168,"code":"...GlobalStyles.buttonTextPrimary as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00390","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":173,"code":"return GlobalStyles.buttonTextPrimary as ViewStyle;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00391","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":184,"code":"} as ViewStyle;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00392","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":190,"code":"} as ViewStyle;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00393","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":196,"code":"} as ViewStyle;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00394","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":198,"code":"return { ...GlobalStyles.buttonContent as ViewStyle, minHeight: 48 };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00395","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":224,"code":"] as ViewStyle[]}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00396","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":246,"code":"GlobalStyles.buttonText as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00397","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":249,"code":"] as ViewStyle[]}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00398","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":280,"code":"GlobalStyles.buttonText as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00399","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":282,"code":"] as ViewStyle[]}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00400","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":292,"code":"<Animated.View style={animatedStyle as AnimatedStyleProp<ViewStyle>}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00401","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":298,"code":"] as ViewStyle[]}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00402","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":319,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00403","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":320,"code":"rippleStyle as AnimatedStyleProp<ViewStyle>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00404","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":336,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00405","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/EliteButton.tsx","line":337,"code":"shimmerStyle as AnimatedStyleProp<ViewStyle>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00406","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/buttons/index.ts","line":1,"code":"export { EliteButton, default as EliteButtonDefault } from \"./EliteButton\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00407","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/cards/EliteCard.tsx","line":19,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00408","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/cards/index.ts","line":1,"code":"export { EliteCard, default as EliteCardDefault } from \"./EliteCard\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00409","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/EliteContainer.tsx","line":28,"code":"(colors[gradient as keyof typeof colors] as string[]) ??","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00410","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/EliteScrollContainer.tsx","line":3,"code":"import type { ScrollView as ScrollViewType } from \"react-native\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00411","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/__tests__/EliteScrollContainer.test.tsx","line":21,"code":"EliteContainer: ({ children }: any) => children,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00412","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/__tests__/EliteScrollContainer.test.tsx","line":40,"code":"const scrollRef = useRef<any>(null);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00413","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/__tests__/EliteScrollContainer.test.tsx","line":61,"code":"const scrollRef = useRef<any>({ scrollTo: scrollToMock } as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00414","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/__tests__/EliteScrollContainer.test.tsx","line":61,"code":"const scrollRef = useRef<any>({ scrollTo: scrollToMock } as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00415","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/__tests__/EliteScrollContainer.test.tsx","line":147,"code":"const scrollRef = useRef<any>(null);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00416","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/__tests__/EliteScrollContainer.test.tsx","line":169,"code":"let refValue: any = null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00417","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/__tests__/EliteScrollContainer.test.tsx","line":172,"code":"const scrollRef = useRef<any>(null);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00418","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/__tests__/EliteScrollContainer.test.tsx","line":195,"code":"const scrollRef = useRef<any>(null);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00419","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/index.ts","line":3,"code":"default as EliteContainerDefault,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00420","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/containers/index.ts","line":7,"code":"default as EliteScrollContainerDefault,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00421","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/headers/EliteHeader.tsx","line":11,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00422","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/headers/ElitePageHeader.tsx","line":25,"code":"<Animated.View style={GlobalStyles.header as never}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00423","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/headers/ElitePageHeader.tsx","line":31,"code":"<Text style={GlobalStyles.title as never}>{title}</Text>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00424","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/headers/ElitePageHeader.tsx","line":33,"code":"<Text style={GlobalStyles.subtitle as never}>{subtitle}</Text>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00425","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/headers/index.ts","line":1,"code":"export { EliteHeader, default as EliteHeaderDefault } from \"./EliteHeader\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00426","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/headers/index.ts","line":4,"code":"default as ElitePageHeaderDefault,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00427","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/index.ts","line":35,"code":"export { EliteContainer as default } from \"./containers\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00428","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/utils/EliteLoading.tsx","line":20,"code":"// Default to primary color as a string","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00429","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/utils/index.ts","line":1,"code":"export { EliteLoading, default as EliteLoadingDefault } from \"./EliteLoading\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00430","severity":"P2","category":"Type","file":"apps/mobile/src/components/elite/utils/index.ts","line":4,"code":"default as EliteEmptyStateDefault,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00431","severity":"P2","category":"Type","file":"apps/mobile/src/components/feedback/SendSparkle.tsx","line":19,"code":"style?: any;             // wrapper style (position:relative recommended)","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00432","severity":"P2","category":"Type","file":"apps/mobile/src/components/feedback/SendSparkle.tsx","line":65,"code":"const dy = -Math.abs(Math.sin(angle) * radius); // bias upward","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00433","severity":"P2","category":"Type","file":"apps/mobile/src/components/feedback/Toast.tsx","line":20,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00434","severity":"P2","category":"Type","file":"apps/mobile/src/components/feedback/UndoPill.tsx","line":12,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00435","severity":"P1","category":"Type","file":"apps/mobile/src/components/feedback/UndoPill.tsx","line":97,"code":"Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00436","severity":"P1","category":"Type","file":"apps/mobile/src/components/feedback/UndoPill.tsx","line":103,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00437","severity":"P2","category":"Type","file":"apps/mobile/src/components/filters/AdvancedPetFilters.tsx","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00438","severity":"P2","category":"Type","file":"apps/mobile/src/components/filters/AdvancedPetFilters.tsx","line":51,"code":"const handleChange = (field: keyof PetFilters, val: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00439","severity":"P2","category":"Type","file":"apps/mobile/src/components/filters/__tests__/AdvancedPetFilters.test.tsx","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00440","severity":"P2","category":"Type","file":"apps/mobile/src/components/filters/__tests__/AdvancedPetFilters.test.tsx","line":22,"code":"createAnimatedComponent: (component: any) => component,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00441","severity":"P2","category":"Type","file":"apps/mobile/src/components/filters/__tests__/AdvancedPetFilters.test.tsx","line":31,"code":"runOnJS: jest.fn((fn: any) => fn),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00442","severity":"P2","category":"Type","file":"apps/mobile/src/components/filters/__tests__/AdvancedPetFilters.test.tsx","line":346,"code":"it(\"has proper accessibility labels\", () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00443","severity":"P2","category":"Type","file":"apps/mobile/src/components/help/HelpOptionCard.tsx","line":12,"code":"animatedStyle: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00444","severity":"P2","category":"Type","file":"apps/mobile/src/components/home/QuickActionCard.tsx","line":41,"code":"<Ionicons name={icon as any} size={24} color={colors.white} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00445","severity":"P2","category":"Type","file":"apps/mobile/src/components/home/QuickActionCard.tsx","line":41,"code":"<Ionicons name={icon as any} size={24} color={colors.white} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00446","severity":"P2","category":"Type","file":"apps/mobile/src/components/i18n/LanguageSwitcher.tsx","line":117,"code":"const makeStyles = (theme: any) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00447","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":11,"code":"export { default as Theme } from \"../theme/unified-theme\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00448","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":15,"code":"export { default as UnifiedAnimations } from \"../hooks/useUnifiedAnimations\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00449","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":40,"code":"export { default as BaseButton } from \"./buttons/BaseButton\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00450","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":42,"code":"default as EliteButton,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00451","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":45,"code":"export { default as EffectWrappers } from \"./buttons/EffectWrappers\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00452","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":57,"code":"default as FXContainer,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00453","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":62,"code":"export { default as ModernText } from \"./typography/ModernTypography\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00454","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":85,"code":"export { default as ModernSwipeCard } from \"./ModernSwipeCard\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00455","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":86,"code":"export { default as ModernPhotoUpload } from \"./ModernPhotoUpload\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00456","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":97,"code":"export { default as MicroPressable } from \"./micro/MicroPressable\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00457","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":98,"code":"export { default as HapticSwitch } from \"./micro/HapticSwitch\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00458","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":99,"code":"export { default as Shimmer } from \"./micro/Shimmer\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00459","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":100,"code":"export { default as ParallaxCard } from \"./micro/ParallaxCard\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00460","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":103,"code":"export { default as PerformanceTestSuite } from \"./PerformanceTestSuite\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00461","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":106,"code":"export { default as UndoPill } from \"./feedback/UndoPill\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00462","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":107,"code":"export { default as SendSparkle, type SendSparkleHandle } from \"./feedback/SendSparkle\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00463","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":110,"code":"export { default as LikeArbitrator, type LikeArbitratorProps } from \"./Gestures/LikeArbitrator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00464","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":114,"code":"export { default as MorphingContextMenu, type ContextAction } from \"./menus/MorphingContextMenu\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00465","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":115,"code":"export { default as ReplySwipeHint } from \"./chat/ReplySwipeHint\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00466","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":134,"code":"export { default as InteractiveButton } from \"./InteractiveButton\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00467","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":135,"code":"export { default as SwipeCard } from \"./ModernSwipeCard\"; // Alias to ModernSwipeCard","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00468","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.ts","line":136,"code":"export { default as MotionPrimitives } from \"./MotionPrimitives\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00469","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.tsx","line":27,"code":"export { default as InteractiveButton } from \"./InteractiveButton\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00470","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.tsx","line":28,"code":"export { default as SwipeCard } from \"./ModernSwipeCard\"; // Alias to ModernSwipeCard","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00471","severity":"P2","category":"Type","file":"apps/mobile/src/components/index.tsx","line":29,"code":"export { default as MotionPrimitives } from \"./MotionPrimitives\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00472","severity":"P2","category":"Type","file":"apps/mobile/src/components/library/cards/MemoryCard.tsx","line":165,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00473","severity":"P2","category":"Type","file":"apps/mobile/src/components/library/navigation/ConnectionPath.tsx","line":10,"code":"memories: Array<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00474","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/CreateActivityModal.tsx","line":33,"code":"typeof activityTypes[0] === 'string' ? (activityTypes[0]) : (activityTypes[0] as ActivityType).id","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00475","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/CreateActivityModal.tsx","line":42,"code":"await startPetActivity({ petId: pet, activity: act as ActivityKind, message: msg });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00476","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/MapFiltersModal.tsx","line":32,"code":"return percentage; // Return as number for DimensionValue","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00477","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/MapViewComponent.tsx","line":7,"code":"region: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00478","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/MapViewComponent.tsx","line":8,"code":"userLocation: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00479","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/MapViewComponent.tsx","line":9,"code":"filteredPins: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00480","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/MapViewComponent.tsx","line":10,"code":"filters: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00481","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/MapViewComponent.tsx","line":11,"code":"heatmapPoints: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00482","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/MapViewComponent.tsx","line":12,"code":"onMarkerPress: (pin: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00483","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/MapViewComponent.tsx","line":14,"code":"getStableMatchFlag: (pin: any) => boolean;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00484","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/PinDetailsModal.tsx","line":33,"code":"const nav = useNavigation<any>();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00485","severity":"P1","category":"Type","file":"apps/mobile/src/components/map/PinDetailsModal.tsx","line":45,"code":"}).catch(() => null);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00486","severity":"P1","category":"Type","file":"apps/mobile/src/components/map/PinDetailsModal.tsx","line":62,"code":"Linking.openURL(url).catch(() => null);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00487","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/index.ts","line":5,"code":"export { default as HeatmapOverlay } from \"./HeatmapOverlay\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00488","severity":"P2","category":"Type","file":"apps/mobile/src/components/map/index.ts","line":6,"code":"export { default as CreateActivityModal } from \"./CreateActivityModal\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00489","severity":"P2","category":"Type","file":"apps/mobile/src/components/matches/MatchCard.tsx","line":14,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00490","severity":"P2","category":"Type","file":"apps/mobile/src/components/matches/MatchesTabs.tsx","line":73,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00491","severity":"P2","category":"Type","file":"apps/mobile/src/components/menus/MorphingContextMenu.tsx","line":12,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00492","severity":"P1","category":"Type","file":"apps/mobile/src/components/menus/MorphingContextMenu.tsx","line":71,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00493","severity":"P2","category":"Type","file":"apps/mobile/src/components/menus/index.ts","line":1,"code":"export { default as MorphingContextMenu, type ContextAction } from \"./MorphingContextMenu\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00494","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/BouncePressable.tsx","line":4,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00495","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/HapticSwitch.tsx","line":4,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00496","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/MicroPressable.tsx","line":5,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00497","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/Shimmer.tsx","line":24,"code":"left: `${-50 + 150 * t.value}%` as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00498","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/Shimmer.tsx","line":24,"code":"left: `${-50 + 150 * t.value}%` as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00499","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/__tests__/BouncePressable.test.tsx","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00500","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/__tests__/BouncePressable.test.tsx","line":24,"code":"View: React.forwardRef((props: any, ref: any) => <View {...props} ref={ref} />),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00501","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/__tests__/BouncePressable.test.tsx","line":26,"code":"withSpring: jest.fn((value: number, config: any) => value),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00502","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/__tests__/BouncePressable.test.tsx","line":40,"code":"(Haptics.impactAsync as jest.Mock).mockResolvedValue(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00503","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/__tests__/BouncePressable.test.tsx","line":168,"code":"(Haptics.impactAsync as jest.Mock).mockRejectedValue(new Error(\"Haptics unavailable\"));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00504","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/__tests__/RippleIcon.test.tsx","line":13,"code":"View: React.forwardRef((props: any, ref: any) => <View {...props} ref={ref} />),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00505","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/__tests__/RippleIcon.test.tsx","line":15,"code":"withTiming: jest.fn((value: number, config: any) => value),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00506","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/index.ts","line":1,"code":"export { default as BouncePressable } from \"./BouncePressable\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00507","severity":"P2","category":"Type","file":"apps/mobile/src/components/micro/index.ts","line":2,"code":"export { default as RippleIcon } from \"./RippleIcon\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00508","severity":"P2","category":"Type","file":"apps/mobile/src/components/phoenix/PhoenixCard.tsx","line":28,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00509","severity":"P2","category":"Type","file":"apps/mobile/src/components/phoenix/PhoenixCard.tsx","line":105,"code":"onPress(undefined as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00510","severity":"P2","category":"Type","file":"apps/mobile/src/components/phoenix/PhoenixCard.tsx","line":105,"code":"onPress(undefined as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00511","severity":"P2","category":"Type","file":"apps/mobile/src/components/phoenix/PhoenixCard.tsx","line":152,"code":"accessibilityRole: (interactive ? \"button\" : \"none\") as \"button\" | \"none\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00512","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx","line":17,"code":"import * as Haptics from 'expo-haptics';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00513","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/AdvancedPhotoEditor.tsx","line":686,"code":"{ratio} - {QualityTargets[ratio as keyof typeof QualityTargets]?.minW}x{QualityTargets[ratio as keyof typeof QualityTargets]?.minH}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00514","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/BeforeAfterSlider.tsx","line":5,"code":"import * as Haptics from 'expo-haptics';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00515","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/BeforeAfterSlider.tsx","line":35,"code":"const nx = Math.max(0, Math.min(trackW, x.value + (e as any).changeX));","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00516","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/BeforeAfterSlider.tsx","line":35,"code":"const nx = Math.max(0, Math.min(trackW, x.value + (e as any).changeX));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00517","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/Cropper.tsx","line":3,"code":"import { View, StyleSheet, Image as RNImage, Dimensions, Text, TouchableOpacity } from \"react-native\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00518","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/Cropper.tsx","line":7,"code":"import * as ImageManipulator from \"expo-image-manipulator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00519","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/Cropper.tsx","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00520","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/Cropper.tsx","line":237,"code":"{([\"FREE\",\"1:1\",\"4:5\",\"9:16\",\"16:9\",\"3:2\"] as Ratio[]).map((r) => (","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00521","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx","line":5,"code":"import * as Haptics from 'expo-haptics';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00522","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx","line":94,"code":"width: `${pos.value * 100}%` as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00523","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx","line":94,"code":"width: `${pos.value * 100}%` as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00524","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx","line":101,"code":"left: `${pos.value * 100}%` as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00525","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/PhotoAdjustmentSlider.tsx","line":101,"code":"left: `${pos.value * 100}%` as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00526","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/SubjectSuggestionsBar.tsx","line":4,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00527","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/AdvancedPhotoEditor.test.tsx","line":10,"code":"SafeAreaView: ({ children }: any) => children,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00528","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/AdvancedPhotoEditor.test.tsx","line":13,"code":"BlurView: ({ children }: any) => children,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00529","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/AdvancedPhotoEditor.test.tsx","line":16,"code":"Ionicons: ({ name }: any) => <test-element name={name} />,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00530","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/AdvancedPhotoEditor.test.tsx","line":19,"code":"const mockUsePhotoEditor = usePhotoEditor as jest.MockedFunction<typeof usePhotoEditor>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00531","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/AdvancedPhotoEditor.test.tsx","line":483,"code":"adjustments: null as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00532","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/AdvancedPhotoEditor.test.tsx","line":483,"code":"adjustments: null as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00533","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/PhotoAdjustmentSlider.test.tsx","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00534","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/PhotoAdjustmentSlider.test.tsx","line":25,"code":"(Haptics.impactAsync as jest.Mock).mockResolvedValue(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00535","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/SubjectSuggestionsBar.test.tsx","line":9,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00536","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/SubjectSuggestionsBar.test.tsx","line":24,"code":"View: React.forwardRef((props: any, ref: any) => <View {...props} ref={ref} />),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00537","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/SubjectSuggestionsBar.test.tsx","line":29,"code":"BouncePressable: ({ children, onPress, ...props }: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00538","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/SubjectSuggestionsBar.test.tsx","line":68,"code":"(AutoCropEngine.suggestCrops as jest.Mock).mockResolvedValue(mockSuggestions);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00539","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/SubjectSuggestionsBar.test.tsx","line":69,"code":"(AutoCropEngine.makeThumbnails as jest.Mock).mockResolvedValue(mockSuggestions);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00540","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/SubjectSuggestionsBar.test.tsx","line":166,"code":"(AutoCropEngine.suggestCrops as jest.Mock).mockResolvedValue([","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00541","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/SubjectSuggestionsBar.test.tsx","line":204,"code":"(AutoCropEngine.suggestCrops as jest.Mock).mockResolvedValue([]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00542","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/SubjectSuggestionsBar.test.tsx","line":214,"code":"(AutoCropEngine.suggestCrops as jest.Mock).mockRejectedValue(new Error(\"Processing failed\"));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00543","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00544","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":9,"code":"import * as ImageManipulator from \"expo-image-manipulator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00545","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":34,"code":"SafeAreaView: ({ children }: any) => <View>{children}</View>,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00546","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":42,"code":"View: React.forwardRef((props: any, ref: any) => <View {...props} ref={ref} />),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00547","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":55,"code":"default: ({ children, onPress, ...props }: any) => (","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00548","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":69,"code":"(Haptics.impactAsync as jest.Mock).mockResolvedValue(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00549","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":70,"code":"(ImageManipulator.manipulateAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00550","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":312,"code":"let resolveManipulation: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00551","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":313,"code":"(ImageManipulator.manipulateAsync as jest.Mock).mockImplementation(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00552","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":379,"code":"let resolveManipulation: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00553","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":380,"code":"(ImageManipulator.manipulateAsync as jest.Mock).mockImplementation(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00554","severity":"P2","category":"Type","file":"apps/mobile/src/components/photo/__tests__/photo-editor.integration.test.tsx","line":410,"code":"(ImageManipulator.manipulateAsync as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00555","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":70,"code":"variant={variant as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00556","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":70,"code":"variant={variant as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00557","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":76,"code":"? gradientNames[index % gradientNames.length] as \"primary\" | \"secondary\" | \"premium\"","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00558","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":89,"code":"variant={variant as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00559","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":89,"code":"variant={variant as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00560","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":104,"code":"variant={variant as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00561","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":104,"code":"variant={variant as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00562","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":112,"code":"variant={variant as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00563","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":112,"code":"variant={variant as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00564","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":120,"code":"variant={variant as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00565","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":120,"code":"variant={variant as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00566","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":128,"code":"variant={variant as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00567","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/ButtonDemo.tsx","line":128,"code":"variant={variant as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00568","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/CardDemo.tsx","line":66,"code":"variant={variant as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00569","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/CardDemo.tsx","line":66,"code":"variant={variant as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00570","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/CardDemo.tsx","line":74,"code":"? gradientNames[index % gradientNames.length] as \"primary\" | \"secondary\" | \"premium\"","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00571","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/index.ts","line":1,"code":"export { default as ButtonDemo } from \"./ButtonDemo\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00572","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/index.ts","line":2,"code":"export { default as CardDemo } from \"./CardDemo\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00573","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/index.ts","line":3,"code":"export { default as AnimationDemo } from \"./AnimationDemo\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00574","severity":"P2","category":"Type","file":"apps/mobile/src/components/premium-demo/index.ts","line":4,"code":"export { default as GlassDemo } from \"./GlassDemo\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00575","severity":"P2","category":"Type","file":"apps/mobile/src/components/primitives/MicroPressable.tsx","line":4,"code":"// (Optional) import * as Haptics from 'expo-haptics';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00576","severity":"P2","category":"Type","file":"apps/mobile/src/components/settings/SettingItemComponent.tsx","line":53,"code":"name={item.icon as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00577","severity":"P2","category":"Type","file":"apps/mobile/src/components/settings/SettingItemComponent.tsx","line":53,"code":"name={item.icon as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00578","severity":"P2","category":"Type","file":"apps/mobile/src/components/shortcuts/SiriShortcuts.tsx","line":35,"code":"icon: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00579","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/CardStack.tsx","line":48,"code":"onSwipeLeft={onSwipeLeft as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00580","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/CardStack.tsx","line":48,"code":"onSwipeLeft={onSwipeLeft as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00581","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/CardStack.tsx","line":49,"code":"onSwipeRight={onSwipeRight as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00582","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/CardStack.tsx","line":49,"code":"onSwipeRight={onSwipeRight as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00583","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/CardStack.tsx","line":50,"code":"onSwipeUp={onSwipeUp as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00584","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/CardStack.tsx","line":50,"code":"onSwipeUp={onSwipeUp as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00585","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/ConfettiBurst.tsx","line":10,"code":"import * as Haptics from 'expo-haptics';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00586","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/ConfettiBurst.tsx","line":111,"code":"const leftSV: Animated.SharedValue<number> = { value: startX } as Animated.SharedValue<number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00587","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/ConfettiBurst.tsx","line":112,"code":"const topSV: Animated.SharedValue<number> = { value: startY } as Animated.SharedValue<number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00588","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/ConfettiBurst.tsx","line":113,"code":"const rotationSV: Animated.SharedValue<number> = { value: 0 } as Animated.SharedValue<number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00589","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/ConfettiBurst.tsx","line":114,"code":"const scaleSV: Animated.SharedValue<number> = { value: 1 } as Animated.SharedValue<number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00590","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/ConfettiBurst.tsx","line":115,"code":"const opacitySV: Animated.SharedValue<number> = { value: 1 } as Animated.SharedValue<number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00591","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/ConfettiBurst.tsx","line":181,"code":"const leftSV: Animated.SharedValue<number> = { value: startX } as Animated.SharedValue<number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00592","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/ConfettiBurst.tsx","line":182,"code":"const topSV: Animated.SharedValue<number> = { value: startY } as Animated.SharedValue<number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00593","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/ConfettiBurst.tsx","line":183,"code":"const rotationSV: Animated.SharedValue<number> = { value: 0 } as Animated.SharedValue<number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00594","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/ConfettiBurst.tsx","line":184,"code":"const scaleSV: Animated.SharedValue<number> = { value: 0 } as Animated.SharedValue<number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00595","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/ConfettiBurst.tsx","line":185,"code":"const opacitySV: Animated.SharedValue<number> = { value: 1 } as Animated.SharedValue<number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00596","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/SwipeCard.tsx","line":42,"code":"panHandlers?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00597","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/SwipeFilters.tsx","line":7,"code":"import type { SwipeFilters as SwipeFiltersType } from \"../../hooks/useSwipeData\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00598","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/ConfettiBurst.test.tsx","line":10,"code":"import * as Haptics from 'expo-haptics';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00599","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/MatchModal.test.tsx","line":18,"code":"owner: 'user1' as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00600","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/MatchModal.test.tsx","line":18,"code":"owner: 'user1' as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00601","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/MatchModal.test.tsx","line":277,"code":"view.props.style?.some((style: any) => style?.width === 80)","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00602","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/MatchModal.test.tsx","line":385,"code":"onKeepSwiping={undefined as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00603","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/MatchModal.test.tsx","line":385,"code":"onKeepSwiping={undefined as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00604","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/MatchModal.test.tsx","line":386,"code":"onSendMessage={undefined as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00605","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/MatchModal.test.tsx","line":386,"code":"onSendMessage={undefined as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00606","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/PeekSheet.test.tsx","line":22,"code":"owner: 'user1' as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00607","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/PeekSheet.test.tsx","line":22,"code":"owner: 'user1' as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00608","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/PeekSheet.test.tsx","line":189,"code":"(style: any) => style && style.pointerEvents === 'none'","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00609","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/PeekSheet.test.tsx","line":215,"code":"(style: any) => style?.position === 'absolute'","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00610","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/PeekSheet.test.tsx","line":225,"code":"render(<PeekSheet nextPet={undefined as any} show={true} />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00611","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/PeekSheet.test.tsx","line":225,"code":"render(<PeekSheet nextPet={undefined as any} show={true} />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00612","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/PeekSheet.test.tsx","line":233,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00613","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/PeekSheet.test.tsx","line":233,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00614","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/PeekSheet.test.tsx","line":334,"code":"view.props.style?.some((style: any) => style?.pointerEvents === 'none')","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00615","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/PeekSheet.test.tsx","line":371,"code":"const View = ({ testID, children }: any) => children;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00616","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":11,"code":"import * as matchesAPI from '../../../services/api';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00617","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":59,"code":"(AsyncStorage.getItem as jest.Mock).mockResolvedValue(null);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00618","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":60,"code":"(matchesAPI.matchesAPI.getPets as jest.Mock).mockResolvedValue([mockPet1, mockPet2]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00619","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":61,"code":"(matchesAPI.matchesAPI.createMatch as jest.Mock).mockResolvedValue({ _id: 'match1' });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00620","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":70,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00621","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":92,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00622","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":92,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00623","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":99,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00624","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":121,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00625","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":121,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00626","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":131,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00627","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":153,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00628","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":153,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00629","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":162,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00630","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":184,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00631","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":184,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00632","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":196,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00633","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":218,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00634","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":218,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00635","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":234,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00636","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":256,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00637","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":256,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00638","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":270,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00639","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":292,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00640","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":292,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00641","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":302,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00642","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":324,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00643","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":324,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00644","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":331,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00645","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":353,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00646","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":353,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00647","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":360,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00648","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":382,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00649","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":382,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00650","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":391,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00651","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":413,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00652","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":413,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00653","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":426,"code":"(useModernSwipeScreen as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00654","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":448,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00655","severity":"P2","category":"Type","file":"apps/mobile/src/components/swipe/__tests__/swipe.integration.test.tsx","line":448,"code":"<ModernSwipeScreen navigation={mockNavigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00656","severity":"P2","category":"Type","file":"apps/mobile/src/components/typography/ModernTypography.tsx","line":191,"code":"(gradientConfig && typeof gradientConfig === 'object' && 'colors' in gradientConfig ? (gradientConfig as any).colors : null) || [","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00657","severity":"P2","category":"Type","file":"apps/mobile/src/components/typography/ModernTypography.tsx","line":191,"code":"(gradientConfig && typeof gradientConfig === 'object' && 'colors' in gradientConfig ? (gradientConfig as any).colors : null) || [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00658","severity":"P2","category":"Type","file":"apps/mobile/src/components/typography/ModernTypography.tsx","line":300,"code":") => <ModernText variant=\"h1\" gradient={(\"primary\" as any)} {...props} />;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00659","severity":"P2","category":"Type","file":"apps/mobile/src/components/typography/ModernTypography.tsx","line":300,"code":") => <ModernText variant=\"h1\" gradient={(\"primary\" as any)} {...props} />;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00660","severity":"P2","category":"Type","file":"apps/mobile/src/components/typography/ModernTypography.tsx","line":304,"code":") => <ModernText gradient={(\"primary\" as any)} {...props} />;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00661","severity":"P2","category":"Type","file":"apps/mobile/src/components/typography/ModernTypography.tsx","line":304,"code":") => <ModernText gradient={(\"primary\" as any)} {...props} />;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00662","severity":"P2","category":"Type","file":"apps/mobile/src/components/typography/ModernTypography.tsx","line":308,"code":") => <ModernText gradient={(\"holographic\" as any)} {...props} />;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00663","severity":"P2","category":"Type","file":"apps/mobile/src/components/typography/ModernTypography.tsx","line":308,"code":") => <ModernText gradient={(\"holographic\" as any)} {...props} />;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00664","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/Card.tsx","line":28,"code":"const resolvedPadding = spacing[padding as keyof typeof spacing];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00665","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/Card.tsx","line":29,"code":"const resolvedRadius = radius[radiusProp as keyof typeof radius];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00666","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/Card.tsx","line":30,"code":"const shadowToken = shadows[shadow as keyof typeof shadows];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00667","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/Spacer.tsx","line":18,"code":"const length = spacing[size as keyof typeof spacing];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00668","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/Text.tsx","line":3,"code":"Text as RNText,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00669","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/Text.tsx","line":4,"code":"type TextProps as RNTextProps,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00670","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/Text.tsx","line":32,"code":"const fontToken = typeof typography[variant as keyof typeof typography] === 'object' && 'fontSize' in typography[variant as keyof typeof typography]","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00671","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/Text.tsx","line":33,"code":"? typography[variant as keyof typeof typography] as TextStyle","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00672","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/Text.tsx","line":34,"code":": { fontSize: typography.fontSize[variant as keyof typeof typography.fontSize] || 14 };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00673","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/v2/Button.tsx","line":28,"code":"block?: boolean; // alias for fullWidth","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00674","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/v2/Input.tsx","line":91,"code":"]) as ViewStyle;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00675","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/v2/Skeleton.tsx","line":10,"code":"style?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00676","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/v2/Switch.tsx","line":2,"code":"import { Switch as RNSwitch } from 'react-native';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00677","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/v2/Text.tsx","line":3,"code":"Text as RNText,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00678","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/v2/Text.tsx","line":4,"code":"type TextProps as RNTextProps,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00679","severity":"P2","category":"Type","file":"apps/mobile/src/components/ui/v2/Text.tsx","line":83,"code":"fontWeight: (fontWeight || variantStyles.fontWeight) as 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00680","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.native.tsx","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00681","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.native.tsx","line":192,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00682","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.native.tsx","line":192,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00683","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.web.tsx","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00684","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.web.tsx","line":37,"code":"webkitSpeechRecognition?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00685","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.web.tsx","line":38,"code":"SpeechRecognition?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00686","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.web.tsx","line":81,"code":"const recogRef = useRef<any>(null);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00687","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.web.tsx","line":245,"code":"recog.onresult = (e: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00688","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.web.tsx","line":328,"code":"await (sendVoiceNote as any)(matchId, blob, { transcript: transcript || undefined });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00689","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.web.tsx","line":328,"code":"await (sendVoiceNote as any)(matchId, blob, { transcript: transcript || undefined });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00690","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.web.tsx","line":334,"code":"await (sendVoiceNote as any)(matchId, form);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00691","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/VoiceRecorderUltra.web.tsx","line":334,"code":"await (sendVoiceNote as any)(matchId, form);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00692","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/index.ts","line":1,"code":"export { default as VoiceRecorderUltraWeb } from \"./VoiceRecorderUltra.web\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00693","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/index.ts","line":2,"code":"export { default as VoiceRecorderUltraNative } from \"./VoiceRecorderUltra.native\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00694","severity":"P2","category":"Type","file":"apps/mobile/src/components/voice/index.ts","line":5,"code":"export { VoiceWaveform, generateWaveformFromAudio, VoiceWaveform as VoiceWaveformUltra } from \"../chat/VoiceWaveform\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00695","severity":"P2","category":"Type","file":"apps/mobile/src/components/widgets/EventWidget.tsx","line":35,"code":"return emojis[category as keyof typeof emojis] || \"🎉\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00696","severity":"P2","category":"Type","file":"apps/mobile/src/components/widgets/EventWidget.tsx","line":46,"code":"return colors[category as keyof typeof colors] || \"Theme.colors.neutral[500]\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00697","severity":"P2","category":"Type","file":"apps/mobile/src/config/environment.ts","line":90,"code":"// Alias for backward compatibility","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00698","severity":"P1","category":"Type","file":"apps/mobile/src/config/environment.ts","line":101,"code":"void import(\"../services/logger\").then(({ logger }) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00699","severity":"P2","category":"Type","file":"apps/mobile/src/config/revenuecat.ts","line":2,"code":"// @ts-ignore - react-native-purchases is optional","problem":"TypeScript suppression comment","evidence":"TypeScript suppressions hide type errors and should be avoided","fix":"Fix the underlying type issue instead of suppressing it","autofix":{"type":"manual","snippet":"Remove suppression and fix the type error"},"blast_radius":"Local","confidence":0.8,"tags":["typescript","suppression"],"owner":"mobile"}
{"id":"AUD-TYP-00700","severity":"P2","category":"Type","file":"apps/mobile/src/config/sslCertificates.ts","line":69,"code":"mode: \"strict\" as \"strict\" | \"permissive\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00701","severity":"P2","category":"Type","file":"apps/mobile/src/config/sslCertificates.ts","line":123,"code":"expectedLengthMap[cert.algorithm as keyof typeof expectedLengthMap];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00702","severity":"P2","category":"Type","file":"apps/mobile/src/config/sslCertificates.ts","line":145,"code":"export function getSSLConfigForDomain(domain: string): any {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00703","severity":"P2","category":"Type","file":"apps/mobile/src/config/sslCertificates.ts","line":147,"code":"SSL_CERTIFICATES[domain as keyof typeof SSL_CERTIFICATES];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00704","severity":"P1","category":"Type","file":"apps/mobile/src/contexts/ThemeContext.tsx","line":10,"code":"void import(\"../services/logger\").then(({ logger }) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00705","severity":"P3","category":"Type","file":"apps/mobile/src/examples/GestureUsageExamples.tsx","line":21,"code":"console.log('Single tap - could show details');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-00706","severity":"P3","category":"Type","file":"apps/mobile/src/examples/GestureUsageExamples.tsx","line":102,"code":"onCancel={() => { console.log('Reaction cancelled'); }}","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-00707","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/auth-profile.integration.test.ts","line":138,"code":"const updateProfile = jest.fn(async (updates: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00708","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/auth-profile.integration.test.ts","line":254,"code":"// Use cached data as fallback","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00709","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/auth-profile.integration.test.ts","line":268,"code":"photos: [] as string[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00710","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/swipe-match.integration.test.ts","line":62,"code":"rejectedCards: [] as string[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00711","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/swipe-match.integration.test.ts","line":92,"code":"currentMatch: null as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00712","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/swipe-match.integration.test.ts","line":92,"code":"currentMatch: null as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00713","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/swipe-match.integration.test.ts","line":132,"code":"processedCards: [] as number[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00714","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/swipe-match.integration.test.ts","line":160,"code":"actions: [] as Array<{ cardId: string; action: \"like\" | \"reject\" }>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00715","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/swipe-match.integration.test.ts","line":243,"code":"cards: [] as any[],","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00716","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/swipe-match.integration.test.ts","line":243,"code":"cards: [] as any[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00717","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/swipe-match.integration.test.ts","line":272,"code":"// User has super likes available","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00718","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/integration/swipe-match.integration.test.ts","line":303,"code":"const matches = [] as string[];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00719","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00720","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":43,"code":"(useNavigation as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00721","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":47,"code":"(useIsFocused as jest.Mock).mockReturnValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00722","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":64,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00723","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":64,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00724","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":75,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00725","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":75,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00726","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":99,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00727","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":99,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00728","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":110,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00729","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":110,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00730","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":129,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00731","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":129,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00732","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":157,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00733","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":157,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00734","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":181,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00735","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":181,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00736","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":208,"code":"(useIsFocused as jest.Mock).mockReturnValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00737","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":212,"code":"listRef: mockListRef1 as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00738","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":212,"code":"listRef: mockListRef1 as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00739","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":219,"code":"(useIsFocused as jest.Mock).mockReturnValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00740","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":223,"code":"listRef: mockListRef2 as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00741","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":223,"code":"listRef: mockListRef2 as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00742","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":246,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00743","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":246,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00744","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":258,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00745","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":258,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00746","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":261,"code":"// Should treat as near top (0 < 50)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00747","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":274,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00748","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":274,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00749","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":311,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00750","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":311,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00751","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":332,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00752","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":332,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00753","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":366,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00754","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":366,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00755","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":381,"code":"listRef: { current: { scrollToOffset: jest.fn() } } as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00756","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/tab-reselect.integration.test.ts","line":381,"code":"listRef: { current: { scrollToOffset: jest.fn() } } as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00757","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":24,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00758","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":24,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00759","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":40,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00760","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":40,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00761","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":47,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00762","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":47,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00763","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":54,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00764","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":54,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00765","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":66,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00766","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":66,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00767","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":79,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00768","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":79,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00769","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":90,"code":"onScroll({ nativeEvent: { contentOffset: { y: 10 } } } as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00770","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":90,"code":"onScroll({ nativeEvent: { contentOffset: { y: 10 } } } as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00771","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":91,"code":"onScroll({ nativeEvent: { contentOffset: { y: 20 } } } as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00772","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":91,"code":"onScroll({ nativeEvent: { contentOffset: { y: 20 } } } as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00773","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":92,"code":"onScroll({ nativeEvent: { contentOffset: { y: 30 } } } as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00774","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":92,"code":"onScroll({ nativeEvent: { contentOffset: { y: 30 } } } as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00775","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":117,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00776","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":117,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00777","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":131,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00778","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":131,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00779","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":144,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00780","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":144,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00781","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":147,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00782","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useScrollOffsetTracker.test.ts","line":147,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00783","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":7,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00784","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":44,"code":"(useNavigation as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00785","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":48,"code":"(useIsFocused as jest.Mock).mockReturnValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00786","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":55,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00787","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":55,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00788","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":70,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00789","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":70,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00790","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":96,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00791","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":96,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00792","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":118,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00793","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":118,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00794","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":146,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00795","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":146,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00796","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":173,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00797","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":173,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00798","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":210,"code":"(useIsFocused as jest.Mock).mockReturnValue(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00799","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":214,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00800","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":214,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00801","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":236,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00802","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":236,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00803","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":258,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00804","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":258,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00805","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":285,"code":"listRef: scrollViewRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00806","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":285,"code":"listRef: scrollViewRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00807","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":313,"code":"listRef: sectionListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00808","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":313,"code":"listRef: sectionListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00809","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":335,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00810","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":335,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00811","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":347,"code":"// Should not crash, default to treating as far from top","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00812","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":361,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00813","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":361,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00814","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":380,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00815","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":380,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00816","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":405,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00817","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":405,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00818","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":423,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00819","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":423,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00820","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":443,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00821","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":443,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00822","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":465,"code":"listRef: mockListRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00823","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/navigation/useTabReselectRefresh.test.ts","line":465,"code":"listRef: mockListRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00824","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":37,"code":"const mockAnalyticsService = analyticsService as jest.Mocked<typeof analyticsService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00825","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":374,"code":"// Check that transformation was applied","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00826","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":415,"code":"result.current.trackInteraction('test', null as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00827","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":415,"code":"result.current.trackInteraction('test', null as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00828","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":620,"code":"debounceMs: 'invalid' as any, // Invalid type","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00829","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":620,"code":"debounceMs: 'invalid' as any, // Invalid type","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00830","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":621,"code":"} as any)","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00831","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":621,"code":"} as any)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00832","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":631,"code":"(process as any).platform = 'unknown';","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00833","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":631,"code":"(process as any).platform = 'unknown';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00834","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":642,"code":"(process as any).platform = originalPlatform;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00835","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useInteractionMetrics.test.ts","line":642,"code":"(process as any).platform = originalPlatform;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00836","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useNotifications.test.ts","line":212,"code":"it(\"should mark as initialized after setup completes\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00837","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoEditor.test.ts","line":6,"code":"import * as ImageManipulator from \"expo-image-manipulator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00838","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoEditor.test.ts","line":23,"code":"(ImageManipulator.manipulateAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00839","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoEditor.test.ts","line":197,"code":"(ImageManipulator.manipulateAsync as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00840","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":5,"code":"* error states, and edge cases as defined in Test Plan v1.0","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00841","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":11,"code":"import * as ImagePicker from 'expo-image-picker';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00842","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":24,"code":"const mockImagePicker = ImagePicker as jest.Mocked<typeof ImagePicker>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00843","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":25,"code":"const mockProcessImageForUpload = processImageForUpload as jest.MockedFunction<typeof processImageForUpload>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00844","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":26,"code":"const mockUploadWithRetry = uploadWithRetry as jest.MockedFunction<typeof uploadWithRetry>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00845","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":93,"code":"it('should auto-select first photo as primary', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00846","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":122,"code":"// Set second photo as primary","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00847","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":146,"code":"// Skip this test as the actual hook doesn't have complex error handling","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00848","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":151,"code":"// Skip this test as the actual hook doesn't have retry logic","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00849","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":263,"code":"// Skip this test as rerender causes renderHook issues","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00850","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":274,"code":"// Skip this test as renderHook has issues with this pattern","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00851","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManagement.test.ts","line":280,"code":"// Skip this test as renderHook has issues with this pattern","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00852","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":7,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00853","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":32,"code":"const mockMultipartUpload = multipartUpload as jest.MockedFunction<typeof multipartUpload>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00854","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":45,"code":"(multipartUpload as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00855","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":63,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00856","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":67,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00857","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":82,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00858","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":102,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00859","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":106,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00860","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":122,"code":"it(\"should mark first photo as primary\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00861","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":124,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00862","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":128,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00863","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":142,"code":"it(\"should not mark additional photos as primary\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00864","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":144,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00865","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":150,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00866","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":162,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00867","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":177,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00868","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":181,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00869","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":209,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00870","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":213,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00871","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":237,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00872","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":241,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00873","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":269,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00874","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":273,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00875","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":288,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00876","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":292,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00877","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":313,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00878","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":317,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00879","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":333,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00880","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":337,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00881","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":369,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00882","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":373,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00883","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":396,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00884","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":400,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00885","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":418,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00886","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":422,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00887","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":460,"code":"it(\"should mark photo as uploaded successfully\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00888","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":462,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00889","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":466,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00890","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":489,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00891","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":493,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00892","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":520,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00893","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":524,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00894","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/usePhotoManager.test.ts","line":567,"code":"// Check that photo has been uploaded successfully","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00895","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":25,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00896","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":35,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00897","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":45,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00898","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":56,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00899","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":66,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockImplementation(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00900","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":77,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00901","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":87,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00902","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":97,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00903","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":108,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00904","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":122,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00905","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":136,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00906","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":150,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00907","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":164,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00908","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":175,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00909","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useReducedMotion.test.ts","line":191,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00910","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":59,"code":"const mockImpactAsync = impactAsync as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00911","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":60,"code":"const mockUseSharedValue = useSharedValue as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00912","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":61,"code":"const mockUseAnimatedStyle = useAnimatedStyle as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00913","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":62,"code":"const mockWithSequence = withSequence as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00914","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":63,"code":"const mockWithTiming = withTiming as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00915","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":64,"code":"const mockRunOnJS = runOnJS as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00916","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":65,"code":"const mockInterpolate = interpolate as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00917","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":546,"code":"gestureHandler.onStart?.({} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00918","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":546,"code":"gestureHandler.onStart?.({} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00919","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":574,"code":"(global as any).__reducedMotion = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00920","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":574,"code":"(global as any).__reducedMotion = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00921","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":584,"code":"delete (global as any).__reducedMotion;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00922","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":584,"code":"delete (global as any).__reducedMotion;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00923","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":675,"code":"intensity: 'invalid' as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00924","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":675,"code":"intensity: 'invalid' as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00925","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":676,"code":"duration: null as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00926","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":676,"code":"duration: null as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00927","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":677,"code":"enableHaptics: 'maybe' as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00928","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useShake.test.ts","line":677,"code":"enableHaptics: 'maybe' as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00929","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":22,"code":"const mockIo = io as jest.MockedFunction<typeof io>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00930","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":23,"code":"const mockUseAuthStore = useAuthStore as jest.MockedFunction<","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00931","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":30,"code":"mockIo.mockReturnValue(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00932","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":30,"code":"mockIo.mockReturnValue(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00933","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":39,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00934","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":39,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00935","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":96,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00936","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":96,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00937","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":246,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00938","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":246,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00939","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":258,"code":"mockIo.mockReturnValue(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00940","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":258,"code":"mockIo.mockReturnValue(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00941","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":262,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00942","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":262,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00943","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":339,"code":"mockIo.mockReturnValue(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00944","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":339,"code":"mockIo.mockReturnValue(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00945","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":343,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00946","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useSocket.test.ts","line":343,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00947","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useThemeToggle.test.ts","line":7,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00948","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useThemeToggle.test.ts","line":47,"code":"(Haptics.impactAsync as jest.Mock).mockResolvedValue(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00949","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useThemeToggle.test.ts","line":84,"code":"(Haptics.impactAsync as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00950","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useThemeToggle.test.ts","line":204,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00951","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useThemeToggle.test.ts","line":206,"code":"const lightButton = buttons.find((btn: any) => btn.text === \"Light\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00952","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useThemeToggle.test.ts","line":222,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00953","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useThemeToggle.test.ts","line":224,"code":"const darkButton = buttons.find((btn: any) => btn.text === \"Dark\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00954","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useThemeToggle.test.ts","line":240,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00955","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useThemeToggle.test.ts","line":243,"code":"(btn: any) => btn.text === \"System Default\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00956","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useUploadQueue.test.ts","line":5,"code":"* as defined in Test Plan v1.0","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00957","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useUploadQueue.test.ts","line":16,"code":"const mockUploadHygieneService = uploadHygieneService as jest.Mocked<typeof uploadHygieneService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00958","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/__tests__/useUploadQueue.test.ts","line":313,"code":"mockUploadHygieneService.uploadWithRetry.mockImplementation(({ onProgress }: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00959","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/analytics/trackHookUsage.ts","line":84,"code":"export function withAnalytics<T extends (...args: any[]) => any>(","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00960","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/analytics/trackHookUsage.ts","line":106,"code":"wrappedResult[key] = (...methodArgs: any[]) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00961","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/analytics/trackHookUsage.ts","line":140,"code":"}) as T;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00962","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useGlowEffect.test.ts","line":231,"code":"color: undefined as any","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00963","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useGlowEffect.test.ts","line":231,"code":"color: undefined as any","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00964","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useParallaxEffect.test.ts","line":86,"code":"result.current.onScroll(mockEvent as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00965","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useParallaxEffect.test.ts","line":86,"code":"result.current.onScroll(mockEvent as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00966","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":62,"code":"const mockUseSharedValue = useSharedValue as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00967","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":63,"code":"const mockUseAnimatedStyle = useAnimatedStyle as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00968","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":64,"code":"const mockWithSpring = withSpring as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00969","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":65,"code":"const mockWithTiming = withTiming as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00970","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":66,"code":"const mockInterpolate = interpolate as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00971","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":67,"code":"const mockImpactAsync = impactAsync as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00972","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":354,"code":"pressableProps.onPressIn?.({} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00973","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":354,"code":"pressableProps.onPressIn?.({} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00974","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":361,"code":"pressableProps.onPressOut?.({} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00975","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":361,"code":"pressableProps.onPressOut?.({} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00976","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":649,"code":"hapticStyle: style as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00977","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/usePressAnimation.test.ts","line":649,"code":"hapticStyle: style as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00978","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useRippleEffect.test.ts","line":41,"code":"result.current.createRipple(mockEvent as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00979","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useRippleEffect.test.ts","line":41,"code":"result.current.createRipple(mockEvent as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00980","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useRippleEffect.test.ts","line":77,"code":"result.current.createRipple(mockEvent1 as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00981","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useRippleEffect.test.ts","line":77,"code":"result.current.createRipple(mockEvent1 as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00982","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useRippleEffect.test.ts","line":78,"code":"result.current.createRipple(mockEvent2 as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00983","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useRippleEffect.test.ts","line":78,"code":"result.current.createRipple(mockEvent2 as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00984","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useSpringAnimation.test.ts","line":229,"code":"config: 'invalid' as any","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00985","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useSpringAnimation.test.ts","line":229,"code":"config: 'invalid' as any","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00986","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":51,"code":"const mockUseSharedValue = useSharedValue as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00987","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":52,"code":"const mockUseAnimatedStyle = useAnimatedStyle as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00988","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":53,"code":"const mockWithDelay = withDelay as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00989","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":54,"code":"const mockWithTiming = withTiming as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00990","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":55,"code":"const mockWithSpring = withSpring as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00991","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":56,"code":"const mockInterpolate = interpolate as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00992","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":389,"code":"useStaggeredAnimation(2, { direction: direction as any })","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00993","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":389,"code":"useStaggeredAnimation(2, { direction: direction as any })","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00994","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":460,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00995","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":460,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00996","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":476,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-00997","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/__tests__/useStaggeredAnimation.test.ts","line":476,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-00998","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/animations/configs/accessibility.ts","line":11,"code":"AccessibilityInfo.isReduceMotionEnabled().then((isEnabled) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-00999","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/index.ts","line":24,"code":"export { useSwipeGestures as default } from \"./useSwipeGesture\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01000","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/animations/useHapticFeedback.ts","line":6,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01001","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/chat/__tests__/useChatInput.test.ts","line":22,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01002","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/chat/__tests__/useChatScroll.test.ts","line":20,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01003","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/chat/__tests__/useMessageActions.test.ts","line":22,"code":"const mockMatchesAPI = matchesAPI as jest.Mocked<typeof matchesAPI>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01004","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/chat/__tests__/useMessageActions.test.ts","line":23,"code":"const mockLogger = logger as jest.Mocked<typeof logger>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01005","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/chat/useChatScroll.ts","line":68,"code":"AsyncStorage.setItem(`mobile_chat_scroll_${matchId}`, String(offset)).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01006","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/ai/__tests__/useAIBio.test.ts","line":160,"code":"expect((generatedBio as any).bio).toContain(\"Buddy\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01007","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/ai/__tests__/useAIBio.test.ts","line":160,"code":"expect((generatedBio as any).bio).toContain(\"Buddy\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01008","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/ai/__tests__/useAIBio.test.ts","line":161,"code":"expect((generatedBio as any).bio).toContain(\"Golden Retriever\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01009","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/ai/__tests__/useAIBio.test.ts","line":161,"code":"expect((generatedBio as any).bio).toContain(\"Golden Retriever\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01010","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/ai/__tests__/useAICompatibility.test.ts","line":223,"code":"// Should use mock result as fallback","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01011","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/ai/__tests__/useAICompatibility.test.ts","line":225,"code":"expect((compatibilityResult as any).compatibility_score).toBe(85);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01012","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/ai/__tests__/useAICompatibility.test.ts","line":225,"code":"expect((compatibilityResult as any).compatibility_score).toBe(85);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01013","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/domains/ai/__tests__/useAIPhotoAnalyzer.test.ts","line":111,"code":"result.current.analyzePhoto(mockPhoto).then(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01014","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/ai/__tests__/useAIPhotoAnalyzer.test.ts","line":357,"code":"await result.current.analyzePhoto(null as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01015","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/ai/__tests__/useAIPhotoAnalyzer.test.ts","line":357,"code":"await result.current.analyzePhoto(null as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01016","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/ai/useAIPhotoAnalyzer.ts","line":6,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01017","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useAccountDeletion.test.ts","line":5,"code":"// Mock the GDPR service using named imports (same pattern as useDataExport.test.ts)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01018","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useAccountDeletion.test.ts","line":26,"code":"const mockDeleteAccount = deleteAccount as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01019","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useAccountDeletion.test.ts","line":27,"code":"const mockCancelDeletion = cancelDeletion as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01020","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useDataExport.test.ts","line":14,"code":"// Mock the GDPR service using default import (same pattern as hook)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01021","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useDataExport.test.ts","line":33,"code":"import * as FileSystem from 'expo-file-system';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01022","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useDataExport.test.ts","line":37,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01023","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useDataExport.test.ts","line":38,"code":"const mockFileSystem = FileSystem as jest.Mocked<typeof FileSystem>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01024","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useDataExport.test.ts","line":39,"code":"const mockGdprService = gdprService as jest.Mocked<typeof gdprService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01025","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useDataExport.test.ts","line":159,"code":"let resolveExport: (value: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01026","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useDataExport.test.ts","line":262,"code":"let resolveDownload: (value: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01027","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useDataExport.test.ts","line":497,"code":"let resolveExport: (value: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01028","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useGDPRStatus.test.ts","line":25,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01029","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/__tests__/useGDPRStatus.test.ts","line":26,"code":"const mockGetAccountStatus = getAccountStatus as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01030","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/useAccountDeletion.ts","line":81,"code":"\"Your account deletion has been cancelled.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01031","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/useDataExport.ts","line":4,"code":"import * as FileSystem from 'expo-file-system';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01032","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/useDataExport.ts","line":18,"code":"exportDataState: any | null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01033","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/useDataExport.ts","line":28,"code":"exportData: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01034","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/gdpr/useDataExport.ts","line":109,"code":"\"Your data export has been initiated. You'll receive an email when it's ready.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01035","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/usePetProfileSetup.test.ts","line":23,"code":"const mockCreatePet = api.createPet as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01036","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/usePetProfileSetup.test.ts","line":201,"code":"it('should set first photo as primary', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01037","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/usePetProfileSetup.test.ts","line":233,"code":"let submittedPet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01038","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/usePreferencesSetup.test.ts","line":22,"code":"const mockUpdateUserPreferences = api.updateUserPreferences as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01039","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/usePreferencesSetup.test.ts","line":273,"code":"let submittedPreferences: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01040","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/useUserIntent.test.ts","line":146,"code":"global.Promise = class extends Promise<any> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01041","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/useUserIntent.test.ts","line":147,"code":"constructor(executor: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01042","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/useUserIntent.test.ts","line":152,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01043","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/useUserIntent.test.ts","line":152,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01044","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/useWelcome.test.ts","line":84,"code":"// We can verify that StatusBar.setBarStyle was called","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01045","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/useWelcome.test.ts","line":95,"code":"// Verify StatusBar was set","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01046","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/onboarding/__tests__/useWelcome.test.ts","line":163,"code":"expect(result.current[key as keyof typeof result.current]).toBeDefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01047","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/premium/__tests__/useFeatureGating.test.ts","line":57,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01048","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/premium/__tests__/useFeatureGating.test.ts","line":58,"code":"const mockPremiumService = premiumService as jest.Mocked<typeof premiumService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01049","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/premium/__tests__/useFeatureGating.test.ts","line":59,"code":"const mockUsePremiumStatus = usePremiumStatus as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01050","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/premium/__tests__/useFeatureGating.test.ts","line":183,"code":"const limit = result.current.getFeatureLimit('swipesPerDay' as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01051","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/premium/__tests__/useFeatureGating.test.ts","line":183,"code":"const limit = result.current.getFeatureLimit('swipesPerDay' as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01052","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/premium/__tests__/usePremiumStatus.test.ts","line":48,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01053","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/premium/__tests__/usePremiumStatus.test.ts","line":139,"code":"it('should check if user has specific features', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01054","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/premium/__tests__/useSubscriptionState.test.ts","line":36,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01055","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/premium/__tests__/useSubscriptionState.test.ts","line":37,"code":"const mockPremiumService = premiumService as jest.Mocked<typeof premiumService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01056","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/__tests__/profile-hooks.integration.test.ts","line":101,"code":"// Verify the update was processed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01057","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/__tests__/usePhotoManagement.test.ts","line":30,"code":"import * as ImagePicker from 'expo-image-picker';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01058","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/__tests__/usePhotoManagement.test.ts","line":33,"code":"const mockImagePicker = ImagePicker as jest.Mocked<typeof ImagePicker>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01059","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/__tests__/usePhotoManagement.test.ts","line":34,"code":"const mockAlert = Alert as jest.Mocked<typeof Alert>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01060","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/__tests__/useProfileData.fixed.test.ts","line":48,"code":"import * as apiModule from '../../../services/api';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01061","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/__tests__/useProfileData.test.ts","line":26,"code":"const mockMatchesAPI = matchesAPI as jest.Mocked<typeof matchesAPI>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01062","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/__tests__/useProfileData.test.ts","line":27,"code":"const mockLogger = logger as jest.Mocked<typeof logger>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01063","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/__tests__/useProfileUpdate.test.ts","line":18,"code":"// Mock auth store from core (same as useProfileData)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01064","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/usePhotoManagement.ts","line":2,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01065","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/usePhotoManagement.ts","line":68,"code":"const newPhotos: PhotoData[] = result.assets.map((asset: any, index: number) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01066","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/useProfileData.ts","line":12,"code":"user: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01067","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/useProfileData.ts","line":57,"code":"user: user as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01068","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/profile/useProfileData.ts","line":57,"code":"user: user as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01069","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/safety/__tests__/useBlockedUsers.test.ts","line":12,"code":"const mockAlert = Alert.alert as jest.MockedFunction<typeof Alert.alert>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01070","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/safety/__tests__/useBlockedUsers.test.ts","line":123,"code":"// For testing, we'll just verify the alert was shown","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01071","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/safety/__tests__/useSafetyCenter.test.ts","line":12,"code":"const mockAlert = Alert.alert as jest.MockedFunction<typeof Alert.alert>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01072","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/safety/__tests__/useSafetyCenter.test.ts","line":87,"code":"(mockAlert as jest.Mock).mockImplementation((title, message, buttons) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01073","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/safety/__tests__/useSafetyCenter.test.ts","line":88,"code":"const enableButton = buttons?.find((b: any) => b.text === \"Enable\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01074","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/safety/__tests__/useSafetyCenter.test.ts","line":105,"code":"(mockAlert as jest.Mock).mockImplementation((title, message, buttons) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01075","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/safety/__tests__/useSafetyCenter.test.ts","line":107,"code":"(b: any) => b.text === \"Enable\" || b.text === \"Disable\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01076","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/safety/useBlockedUsers.ts","line":101,"code":"Alert.alert(\"Success\", `${userName} has been unblocked`);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01077","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/safety/useSafetyCenter.ts","line":6,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01078","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/domains/safety/useSafetyCenter.ts","line":46,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01079","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/domains/safety/useSafetyCenter.ts","line":130,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01080","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/settings/__tests__/useSettingsPersistence.test.ts","line":16,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01081","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/settings/__tests__/useSettingsSync.test.ts","line":22,"code":"const mockMatchesAPI = matchesAPI as jest.Mocked<typeof matchesAPI>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01082","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/settings/__tests__/useSettingsSync.test.ts","line":23,"code":"const mockLogger = logger as jest.Mocked<typeof logger>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01083","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/domains/settings/__tests__/useSettingsSync.test.ts","line":151,"code":"result.current.syncSettings(mockSettings).then((r) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01084","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/domains/settings/__tests__/useSettingsSync.test.ts","line":170,"code":"result.current.syncSettings(mockSettings).then((r) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01085","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/social/__tests__/useStories.test.ts","line":248,"code":"it(\"should mark story as viewed\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01086","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/social/useMemoryWeave.ts","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01087","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/social/useMemoryWeave.ts","line":35,"code":"scrollViewRef: React.RefObject<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01088","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/social/useMemoryWeave.ts","line":43,"code":"handleScroll: (event: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01089","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/social/useMemoryWeave.ts","line":58,"code":"const scrollViewRef = useRef<any>(null);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01090","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/social/useMemoryWeave.ts","line":84,"code":"(event: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01091","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/social/useStories.ts","line":6,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01092","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/social/useStories.ts","line":118,"code":"// Mark story as viewed mutation","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01093","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/social/useStories.ts","line":218,"code":"// Mark story as viewed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01094","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/domains/social/useStories.ts","line":249,"code":"logger.error(\"Failed to mark story as viewed\", { error, storyId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01095","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":8,"code":"import * as Haptics from 'expo-haptics';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01096","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":26,"code":"(useNavigation as jest.Mock).mockReturnValue(mockNavigation);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01097","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":27,"code":"(useIsFocused as jest.Mock).mockReturnValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01098","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":34,"code":"let tabPressHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01099","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":35,"code":"let scrollTracker: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01100","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":50,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01101","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":50,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01102","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":64,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01103","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":64,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01104","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":84,"code":"let tabPressHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01105","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":97,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01106","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":97,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01107","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":111,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01108","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":111,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01109","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":126,"code":"let doubleTapHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01110","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":135,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01111","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":135,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01112","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":166,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01113","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":166,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01114","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":182,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01115","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":182,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01116","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":193,"code":"let tabPressHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01117","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":206,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01118","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":206,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01119","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":217,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01120","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":217,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01121","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":221,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01122","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":221,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01123","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":230,"code":"(useIsFocused as jest.Mock).mockReturnValue(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01124","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":234,"code":"let tabPressHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01125","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":243,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01126","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":243,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01127","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":270,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01128","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":270,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01129","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":288,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01130","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":288,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01131","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":306,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01132","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":306,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01133","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":321,"code":"let tabPressHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01134","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":322,"code":"let doubleTapHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01135","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":332,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01136","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/navigation.integration.test.ts","line":332,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01137","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":34,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01138","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":34,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01139","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":50,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01140","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":50,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01141","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":60,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01142","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":60,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01143","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":100,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01144","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":100,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01145","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":116,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01146","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":116,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01147","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":132,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01148","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":132,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01149","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":150,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01150","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":150,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01151","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":172,"code":"result.current.onScroll(mockFlatListEvent as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01152","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":172,"code":"result.current.onScroll(mockFlatListEvent as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01153","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":191,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01154","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":191,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01155","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":201,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01156","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useScrollOffsetTracker.test.ts","line":201,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01157","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":20,"code":"(useNavigation as jest.Mock).mockReturnValue(mockNavigation);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01158","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":37,"code":"let eventHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01159","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":70,"code":"let eventHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01160","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":92,"code":"let eventHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01161","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":113,"code":"let eventHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01162","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":150,"code":"let firstCallback: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01163","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":151,"code":"let secondCallback: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01164","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":152,"code":"let eventHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01165","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":186,"code":"(useNavigation as jest.Mock).mockReturnValue(newNavigation);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01166","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":199,"code":"renderHook(() => useTabDoublePress(undefined as any));","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01167","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":199,"code":"renderHook(() => useTabDoublePress(undefined as any));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01168","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabDoublePress.test.ts","line":235,"code":"let eventHandler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01169","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":8,"code":"import * as Haptics from 'expo-haptics';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01170","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":26,"code":"(useNavigation as jest.Mock).mockReturnValue(mockNavigation);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01171","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":27,"code":"(useIsFocused as jest.Mock).mockReturnValue(mockIsFocused);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01172","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":37,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01173","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":37,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01174","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":55,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01175","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":55,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01176","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":75,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01177","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":75,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01178","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":98,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01179","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":98,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01180","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":121,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01181","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":121,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01182","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":147,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01183","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":147,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01184","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":173,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01185","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":173,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01186","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":196,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01187","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":196,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01188","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":223,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01189","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":223,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01190","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":256,"code":"(useIsFocused as jest.Mock).mockReturnValueOnce(mockIsUnfocused);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01191","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":262,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01192","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":262,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01193","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":276,"code":"(useIsFocused as jest.Mock).mockReturnValueOnce(mockIsUnfocused);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01194","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":282,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01195","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":282,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01196","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":303,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01197","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":303,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01198","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":324,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01199","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":324,"code":"listRef: { current: { scrollTo: jest.fn() } } as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01200","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":349,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01201","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":349,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01202","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":369,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01203","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":369,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01204","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":388,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01205","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":388,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01206","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":409,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01207","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":409,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01208","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":432,"code":"listRef: listRef as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01209","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":432,"code":"listRef: listRef as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01210","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":462,"code":"initialProps: { listRef: listRef as any, onRefresh: jest.fn() },","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01211","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":462,"code":"initialProps: { listRef: listRef as any, onRefresh: jest.fn() },","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01212","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":470,"code":"rerender({ listRef: listRef as any, onRefresh: currentRefresh });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01213","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/__tests__/useTabReselectRefresh.test.ts","line":470,"code":"rerender({ listRef: listRef as any, onRefresh: currentRefresh });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01214","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/useTabDoublePress.ts","line":8,"code":"const unsubscribe = navigation.addListener(\"tabDoublePress\" as any, () => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01215","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/useTabDoublePress.ts","line":8,"code":"const unsubscribe = navigation.addListener(\"tabDoublePress\" as any, () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01216","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/useTabReselectRefresh.ts","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01217","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/useTabReselectRefresh.ts","line":30,"code":"const node = listRef.current as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01218","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/navigation/useTabReselectRefresh.ts","line":30,"code":"const node = listRef.current as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01219","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/performance/useOptimizedListConfig.ts","line":9,"code":"keyExtractor: (it: any, i: number) => it?.id ?? String(i),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01220","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/e2e/hook-e2e.test.tsx","line":14,"code":"<RegisterScreen navigation={navigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01221","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/e2e/hook-e2e.test.tsx","line":14,"code":"<RegisterScreen navigation={navigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01222","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/e2e/hook-e2e.test.tsx","line":36,"code":"<ForgotPasswordScreen navigation={navigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01223","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/e2e/hook-e2e.test.tsx","line":36,"code":"<ForgotPasswordScreen navigation={navigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01224","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/e2e/hook-e2e.test.tsx","line":63,"code":"<RegisterScreen navigation={navigation as any} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01225","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/e2e/hook-e2e.test.tsx","line":63,"code":"<RegisterScreen navigation={navigation as any} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01226","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAIBioScreen.test.ts","line":7,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01227","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAIBioScreen.test.ts","line":13,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01228","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAIBioScreen.test.ts","line":13,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01229","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAIBioScreen.test.ts","line":160,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01230","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAIBioScreen.test.ts","line":164,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01231","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAIBioScreen.test.ts","line":181,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01232","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAIBioScreen.test.ts","line":201,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01233","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAIBioScreen.test.ts","line":205,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01234","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAIBioScreen.test.ts","line":260,"code":"it(\"should parse age as integer\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01235","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAIBioScreen.test.ts","line":323,"code":"\"Bio has been saved to your device\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01236","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAIBioScreen.test.ts","line":338,"code":"\"Bio has been saved to your device\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01237","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAdminDashboardScreen.test.ts","line":13,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01238","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useAdminDashboardScreen.test.ts","line":13,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01239","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useBlockedUsersScreen.test.ts","line":19,"code":"const mockMatchesAPI = matchesAPI as jest.Mocked<typeof matchesAPI>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01240","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useBlockedUsersScreen.test.ts","line":43,"code":"mockMatchesAPI.getBlockedUsers.mockResolvedValue(mockUsers as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01241","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useBlockedUsersScreen.test.ts","line":43,"code":"mockMatchesAPI.getBlockedUsers.mockResolvedValue(mockUsers as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01242","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useBlockedUsersScreen.test.ts","line":72,"code":"mockMatchesAPI.getBlockedUsers.mockResolvedValue(mockUsers as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01243","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useBlockedUsersScreen.test.ts","line":72,"code":"mockMatchesAPI.getBlockedUsers.mockResolvedValue(mockUsers as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01244","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useBlockedUsersScreen.test.ts","line":88,"code":"mockMatchesAPI.getBlockedUsers.mockResolvedValue([] as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01245","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useBlockedUsersScreen.test.ts","line":88,"code":"mockMatchesAPI.getBlockedUsers.mockResolvedValue([] as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01246","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useBlockedUsersScreen.test.ts","line":97,"code":"\"User has been unblocked\"","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01247","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useChatScreen.test.ts","line":68,"code":"const mockUseChatData = useChatData as jest.MockedFunction<typeof useChatData>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01248","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useChatScreen.test.ts","line":69,"code":"const mockUseReactionMetrics = useReactionMetrics as jest.MockedFunction<typeof useReactionMetrics>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01249","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useChatScreen.test.ts","line":70,"code":"const mockSetItem = AsyncStorage.setItem as jest.MockedFunction<typeof AsyncStorage.setItem>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01250","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useChatScreen.test.ts","line":71,"code":"const mockGetItem = AsyncStorage.getItem as jest.MockedFunction<typeof AsyncStorage.getItem>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01251","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useChatScreen.test.ts","line":72,"code":"const mockRemoveItem = AsyncStorage.removeItem as jest.MockedFunction<typeof AsyncStorage.removeItem>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01252","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useChatScreen.test.ts","line":78,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01253","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useChatScreen.test.ts","line":78,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01254","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useChatScreen.test.ts","line":109,"code":"mockUseReactionMetrics.mockReturnValue(mockReactionMetrics as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01255","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useChatScreen.test.ts","line":109,"code":"mockUseReactionMetrics.mockReturnValue(mockReactionMetrics as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01256","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useChatScreen.test.ts","line":505,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01257","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useChatScreen.test.ts","line":505,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01258","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useDeactivateAccountScreen.test.ts","line":23,"code":"const mockGdprService = gdprService as jest.Mocked<typeof gdprService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01259","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useDeactivateAccountScreen.test.ts","line":112,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01260","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useDeactivateAccountScreen.test.ts","line":112,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01261","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":28,"code":"const mockAuthService = authService as jest.Mocked<typeof authService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01262","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":42,"code":"useForgotPasswordScreen({ navigation: mockNavigation as any })","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01263","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":42,"code":"useForgotPasswordScreen({ navigation: mockNavigation as any })","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01264","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":53,"code":"useForgotPasswordScreen({ navigation: mockNavigation as any })","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01265","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":53,"code":"useForgotPasswordScreen({ navigation: mockNavigation as any })","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01266","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":67,"code":"useForgotPasswordScreen({ navigation: mockNavigation as any })","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01267","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":67,"code":"useForgotPasswordScreen({ navigation: mockNavigation as any })","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01268","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":79,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01269","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":79,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01270","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":82,"code":"useForgotPasswordScreen({ navigation: mockNavigation as any })","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01271","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":82,"code":"useForgotPasswordScreen({ navigation: mockNavigation as any })","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01272","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":101,"code":"useForgotPasswordScreen({ navigation: { goBack: jest.fn() } as any })","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01273","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":101,"code":"useForgotPasswordScreen({ navigation: { goBack: jest.fn() } as any })","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01274","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":119,"code":"useForgotPasswordScreen({ navigation: mockNavigation as any })","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01275","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useForgotPasswordScreen.test.ts","line":119,"code":"useForgotPasswordScreen({ navigation: mockNavigation as any })","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01276","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useHomeScreen.test.ts","line":55,"code":"const mockHomeAPI = homeAPI as jest.Mocked<typeof homeAPI>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01277","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useHomeScreen.test.ts","line":56,"code":"const mockAnalyticsService = analyticsService as jest.Mocked<typeof analyticsService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01278","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useHomeScreen.test.ts","line":57,"code":"const mockUseColorScheme = useColorScheme as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01279","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useHomeScreen.test.ts","line":58,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01280","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useHomeScreen.test.ts","line":231,"code":"let resolveRefresh: (value: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01281","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useHomeScreen.test.ts","line":280,"code":"it('should mark activity as read', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01282","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useHomeScreen.test.ts","line":309,"code":"// Mark as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01283","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useHomeScreen.test.ts","line":661,"code":"delete (dataWithoutUser as any).user;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01284","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useHomeScreen.test.ts","line":661,"code":"delete (dataWithoutUser as any).user;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01285","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":69,"code":"(Alert.alert as jest.Mock).mockImplementation((title, message, buttons) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01286","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":70,"code":"const unmatchButton = buttons?.find((b: any) => b.text === \"Unmatch\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01287","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":93,"code":"(Alert.alert as jest.Mock).mockImplementation((title, message, buttons) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01288","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":94,"code":"const unmatchButton = buttons?.find((b: any) => b.text === \"Unmatch\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01289","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":137,"code":"(Alert.alert as jest.Mock).mockImplementation((title, message, buttons) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01290","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":138,"code":"const blockButton = buttons?.find((b: any) => b.text === \"Block\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01291","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":161,"code":"(Alert.alert as jest.Mock).mockImplementation((title, message, buttons) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01292","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":162,"code":"const blockButton = buttons?.find((b: any) => b.text === \"Block\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01293","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":203,"code":"it(\"should report as spam when selected\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01294","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":207,"code":"(Alert.alert as jest.Mock).mockImplementation((title, message, buttons) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01295","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":208,"code":"const spamButton = buttons?.find((b: any) => b.text === \"Spam\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01296","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":233,"code":"it(\"should report as inappropriate when selected\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01297","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":237,"code":"(Alert.alert as jest.Mock).mockImplementation((title, message, buttons) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01298","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":239,"code":"(b: any) => b.text === \"Inappropriate Content\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01299","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":261,"code":"it(\"should report as other when selected\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01300","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":265,"code":"(Alert.alert as jest.Mock).mockImplementation((title, message, buttons) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01301","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":266,"code":"const otherButton = buttons?.find((b: any) => b.text === \"Other\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01302","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":290,"code":"(Alert.alert as jest.Mock).mockImplementation((title, message, buttons) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01303","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":291,"code":"const spamButton = buttons?.find((b: any) => b.text === \"Spam\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01304","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":316,"code":"(Alert.alert as jest.Mock).mockImplementation((title, message, buttons) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01305","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":317,"code":"const unmatchButton = buttons?.find((b: any) => b.text === \"Unmatch\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01306","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":354,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01307","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":356,"code":"const unmatchButton = buttons?.find((b: any) => b.text === \"Unmatch\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01308","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":368,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01309","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":370,"code":"const blockButton = buttons?.find((b: any) => b.text === \"Block\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01310","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":383,"code":"let alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01311","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":385,"code":"expect(buttons?.find((b: any) => b.text === \"Cancel\")).toBeDefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01312","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":392,"code":"alertCall = (Alert.alert as jest.Mock).mock.calls[1];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01313","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":394,"code":"expect(buttons?.find((b: any) => b.text === \"Cancel\")).toBeDefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01314","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":401,"code":"alertCall = (Alert.alert as jest.Mock).mock.calls[2];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01315","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesActions.test.ts","line":403,"code":"expect(buttons?.find((b: any) => b.text === \"Cancel\")).toBeDefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01316","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useMatchesTabs.test.ts","line":8,"code":"it(\"should initialize with matches tab as active\", () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01317","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":38,"code":"const mockUseAuthStore = useAuthStore as jest.MockedFunction<typeof useAuthStore>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01318","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":39,"code":"const mockGetPets = matchesAPI.getPets as jest.MockedFunction<typeof matchesAPI.getPets>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01319","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":40,"code":"const mockCreateMatch = matchesAPI.createMatch as jest.MockedFunction<typeof matchesAPI.createMatch>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01320","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":41,"code":"const mockSwipePet = matchesAPI.swipePet as jest.MockedFunction<typeof matchesAPI.swipePet>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01321","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":47,"code":"] as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01322","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":47,"code":"] as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01323","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":56,"code":"user: { _id: 'user-123' } as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01324","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":56,"code":"user: { _id: 'user-123' } as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01325","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":57,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01326","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":57,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01327","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":60,"code":"mockCreateMatch.mockResolvedValue(mockMatch as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01328","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":60,"code":"mockCreateMatch.mockResolvedValue(mockMatch as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01329","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":368,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01330","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":368,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01331","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":392,"code":"const incompletePet = {} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01332","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":392,"code":"const incompletePet = {} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01333","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":496,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01334","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useModernSwipeScreen.test.ts","line":496,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01335","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/usePremiumScreen.test.ts","line":12,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01336","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/usePremiumScreen.test.ts","line":12,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01337","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/usePremiumScreen.test.ts","line":70,"code":"it(\"should mark premium tier as popular\", () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01338","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useProfileScreen.test.ts","line":18,"code":"import * as ImagePicker from 'expo-image-picker';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01339","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useProfileScreen.test.ts","line":57,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01340","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useProfileScreen.test.ts","line":58,"code":"const mockAnalyticsService = analyticsService as jest.Mocked<typeof analyticsService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01341","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useProfileScreen.test.ts","line":59,"code":"const mockUseColorScheme = useColorScheme as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01342","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useProfileScreen.test.ts","line":60,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01343","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useProfileScreen.test.ts","line":61,"code":"const mockImagePicker = ImagePicker as jest.Mocked<typeof ImagePicker>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01344","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":55,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01345","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":56,"code":"const mockAnalyticsService = analyticsService as jest.Mocked<typeof analyticsService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01346","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":57,"code":"const mockUseColorScheme = useColorScheme as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01347","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":58,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01348","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":502,"code":"const success = await result.current.updatePrivacySettings(invalidSettings as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01349","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":502,"code":"const success = await result.current.updatePrivacySettings(invalidSettings as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01350","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":522,"code":"const success = await result.current.updatePreferences(invalidPreferences as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01351","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":522,"code":"const success = await result.current.updatePreferences(invalidPreferences as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01352","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":544,"code":"const success = await result.current.updatePushNotifications(invalidNotifications.push as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01353","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":544,"code":"const success = await result.current.updatePushNotifications(invalidNotifications.push as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01354","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":614,"code":"const success = await result.current.updatePreferences({ theme: 'invalid' as any });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01355","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useSettingsScreen.test.ts","line":614,"code":"const success = await result.current.updatePreferences({ theme: 'invalid' as any });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01356","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useUserIntentScreen.test.ts","line":13,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01357","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useUserIntentScreen.test.ts","line":13,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01358","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useWelcomeScreen.test.ts","line":11,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01359","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/__tests__/useWelcomeScreen.test.ts","line":11,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01360","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAIBioScreen.ts","line":7,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01361","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAIBioScreen.ts","line":31,"code":"generatedBio: any | null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01362","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAIBioScreen.ts","line":32,"code":"bioHistory: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01363","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAIBioScreen.ts","line":142,"code":"Alert.alert(\"Saved Locally\", \"Bio has been saved to your device\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01364","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAIBioScreen.ts","line":145,"code":"Alert.alert(\"Saved Locally\", \"Bio has been saved to your device\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01365","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAIBioScreen.ts","line":148,"code":"Alert.alert(\"Saved Locally\", \"Bio has been saved to your device\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01366","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAICompatibility.ts","line":2,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01367","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAICompatibilityScreen.ts","line":14,"code":"compatibilityResult: any | null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01368","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAICompatibilityScreen.ts","line":16,"code":"availablePets: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01369","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAICompatibilityScreen.ts","line":18,"code":"selectedPet1: any | null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01370","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAICompatibilityScreen.ts","line":19,"code":"selectedPet2: any | null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01371","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAICompatibilityScreen.ts","line":22,"code":"setSelectedPet1: (pet: any | null) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01372","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAICompatibilityScreen.ts","line":23,"code":"setSelectedPet2: (pet: any | null) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01373","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAIPhotoAnalyzerScreen.ts","line":14,"code":"analysisResult: any | null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01374","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useARScentTrailsScreen.ts","line":2,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01375","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminAnalyticsScreen.ts","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01376","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminAnalyticsScreen.ts","line":261,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01377","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminAnalyticsScreen.ts","line":268,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01378","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminBillingScreen.ts","line":9,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01379","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminBillingScreen.ts","line":397,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01380","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminBillingScreen.ts","line":406,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01381","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminBillingScreen.ts","line":415,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01382","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminBillingScreen.ts","line":466,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01383","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminBillingScreen.ts","line":523,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01384","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminBillingScreen.ts","line":559,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01385","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminBillingScreen.ts","line":593,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01386","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminBillingScreen.ts","line":616,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01387","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminBillingScreen.ts","line":625,"code":"`Billing data exported as ${format.toUpperCase()}. Check your downloads folder.`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01388","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminChatsScreen.ts","line":9,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01389","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminChatsScreen.ts","line":267,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01390","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminChatsScreen.ts","line":290,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01391","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminChatsScreen.ts","line":339,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01392","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminChatsScreen.ts","line":364,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01393","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminDashboardScreen.ts","line":9,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01394","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminDashboardScreen.ts","line":184,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01395","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminDashboardScreen.ts","line":189,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01396","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminDashboardScreen.ts","line":194,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01397","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminDashboardScreen.ts","line":199,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01398","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminDashboardScreen.ts","line":204,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01399","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminDashboardScreen.ts","line":209,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01400","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminDashboardScreen.ts","line":214,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01401","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminDashboardScreen.ts","line":268,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01402","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminSecurityScreen.ts","line":9,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01403","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminSecurityScreen.ts","line":306,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01404","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminSecurityScreen.ts","line":338,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01405","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminSecurityScreen.ts","line":369,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01406","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminSecurityScreen.ts","line":397,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01407","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminUploadsScreen.ts","line":9,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01408","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminUploadsScreen.ts","line":257,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01409","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminUploadsScreen.ts","line":306,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01410","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminUploadsScreen.ts","line":338,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01411","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminUploadsScreen.ts","line":367,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01412","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminUploadsScreen.ts","line":398,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01413","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminUploadsScreen.ts","line":437,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01414","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminVerificationsScreen.ts","line":9,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01415","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminVerificationsScreen.ts","line":268,"code":"void Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01416","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminVerificationsScreen.ts","line":318,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01417","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdminVerificationsScreen.ts","line":389,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01418","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionApplicationScreen.ts","line":136,"code":"`Your application for ${petName} has been submitted. The owner will review it and get back to you soon.`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01419","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":74,"code":"tabAnimatedStyle1: AnimatedStyle<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01420","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":75,"code":"tabAnimatedStyle2: AnimatedStyle<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01421","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":96,"code":"const item = listing as Record<string, unknown>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01422","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":97,"code":"const id = (item.id ?? item._id ?? \"\") as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01423","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":101,"code":"name: (item.name as string) ?? \"Unknown Pet\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01424","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":102,"code":"species: (item.species as string) ?? \"Unknown\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01425","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":103,"code":"breed: (item.breed as string) ?? \"Unknown\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01426","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":105,"code":"status: VALID_LISTING_STATUSES.has(item.status as PetListing[\"status\"])","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01427","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":106,"code":"? (item.status as PetListing[\"status\"])","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01428","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":109,"code":"? (item.photos as string[])","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01429","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":122,"code":"const item = application as Record<string, unknown>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01430","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":123,"code":"const status = item.status as AdoptionApplication[\"status\"];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01431","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":126,"code":"id: (item.id ?? item._id ?? \"\") as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01432","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":127,"code":"petId: (item.petId ?? \"\") as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01433","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":129,"code":"(item.petName as string) ?? ((item.pet as { name?: string })?.name ?? \"Unknown\"),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01434","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":131,"code":"(item.applicantName as string) ??","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01435","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":132,"code":"((item.applicant as { name?: string })?.name ?? \"Pending Applicant\"),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01436","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":134,"code":"(item.applicantEmail as string) ??","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01437","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":135,"code":"((item.applicant as { email?: string })?.email ?? \"unknown@example.com\"),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01438","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":145,"code":"(item.experience as string) ??","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01439","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":146,"code":"((item.applicationData as { experience?: string })?.experience ?? \"\"),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01440","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":148,"code":"(item.livingSpace as string) ??","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01441","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":149,"code":"((item.applicationData as { livingSituation?: string })?.livingSituation ?? \"\"),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01442","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":153,"code":": ((item.applicationData as { references?: number })?.references ?? 0),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01443","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdoptionManagerScreen.ts","line":234,"code":"? { ...p, status: newStatus as PetListing[\"status\"] }","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01444","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useAdvancedFiltersScreen.ts","line":7,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01445","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdvancedFiltersScreen.ts","line":55,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01446","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdvancedFiltersScreen.ts","line":64,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01447","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useAdvancedFiltersScreen.ts","line":84,"code":"Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01448","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useBlockedUsersScreen.ts","line":74,"code":"Alert.alert(\"Success\", \"User has been unblocked\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01449","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useChatScreen.ts","line":47,"code":"flatListRef: React.RefObject<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01450","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useChatScreen.ts","line":48,"code":"inputRef: React.RefObject<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01451","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useChatScreen.ts","line":84,"code":"const flatListRef = useRef<any>(null);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01452","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useChatScreen.ts","line":85,"code":"const inputRef = useRef<any>(null);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01453","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useCreatePetScreen.ts","line":87,"code":"...(prev[section] as Record<string, unknown>),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01454","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useDeactivateAccountScreen.ts","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01455","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useDeactivateAccountScreen.ts","line":39,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01456","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useDeactivateAccountScreen.ts","line":58,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01457","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useDeactivateAccountScreen.ts","line":72,"code":"\"Your account has been temporarily deactivated. You can reactivate it anytime by logging back in.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01458","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useEditProfileScreen.ts","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01459","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useEditProfileScreen.ts","line":4,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01460","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useEditProfileScreen.ts","line":45,"code":"profileData[key as keyof ProfileData] !==","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01461","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useEditProfileScreen.ts","line":46,"code":"originalData[key as keyof ProfileData],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01462","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useEditProfileScreen.ts","line":78,"code":").catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01463","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useForgotPasswordScreen.ts","line":7,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01464","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useForgotPasswordScreen.ts","line":27,"code":"handleSubmit: (e?: any) => void | Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01465","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useForgotPasswordScreen.ts","line":70,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01466","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useForgotPasswordScreen.ts","line":79,"code":"Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01467","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useForgotPasswordScreen.ts","line":97,"code":"Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01468","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useLeaderboardScreen.ts","line":14,"code":"entries: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01469","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useLeaderboardScreen.ts","line":15,"code":"categories: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01470","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useLeaderboardScreen.ts","line":17,"code":"userEntry: any | null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01471","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useLoginScreen.ts","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01472","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useLoginScreen.ts","line":25,"code":"handleSubmit: (e?: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01473","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useLoginScreen.ts","line":79,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01474","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useLoginScreen.ts","line":91,"code":"Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01475","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useLoginScreen.ts","line":101,"code":"Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01476","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useLoginScreen.ts","line":105,"code":"logger.error(\"Login failed\", { error: error as Error, email: values.email });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01477","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useLoginScreen.ts","line":119,"code":"async (e?: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01478","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useMapScreen.ts","line":15,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01479","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useMemoryWeaveScreen.ts","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01480","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useMemoryWeaveScreen.ts","line":69,"code":"const initialMemories = (params.memories ? (Array.isArray(params.memories) ? params.memories as MemoryNode[] : []) : []);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01481","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useModerationToolsScreen.ts","line":10,"code":"moderationTools: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01482","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useModerationToolsScreen.ts","line":11,"code":"moderationStats: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01483","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useModerationToolsScreen.ts","line":13,"code":"handleModerationTool: (tool: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01484","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useModernSwipeScreen.ts","line":31,"code":"swipePet: (petId: string, action: \"like\" | \"pass\" | \"superlike\") => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01485","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/usePetProfileSetupScreen.ts","line":54,"code":"const { userIntent } = route.params as { userIntent: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01486","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/usePreferencesSetupScreen.ts","line":10,"code":"preferences: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01487","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/usePreferencesSetupScreen.ts","line":13,"code":"updatePreferences: (updates: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01488","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/usePreferencesSetupScreen.ts","line":15,"code":"updateAgeRange: (range: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01489","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/usePreferencesSetupScreen.ts","line":24,"code":"activityLevels: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01490","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/usePreferencesSetupScreen.ts","line":25,"code":"sizes: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01491","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/usePreferencesSetupScreen.ts","line":39,"code":"const { userIntent } = route.params as { userIntent: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01492","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/usePreferencesSetupScreen.ts","line":67,"code":"navigation.navigate(\"Main\" as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01493","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/usePrivacySettingsScreen.ts","line":2,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01494","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useProfileScreen.ts","line":4,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01495","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useProfileScreen.ts","line":48,"code":"[setting]: !prev[setting as keyof typeof prev],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01496","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useProfileScreen.ts","line":56,"code":"[setting]: !prev[setting as keyof typeof prev],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01497","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useRegisterScreen.ts","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01498","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useRegisterScreen.ts","line":28,"code":"handleSubmit: (e?: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01499","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useRegisterScreen.ts","line":114,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01500","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useRegisterScreen.ts","line":136,"code":"Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01501","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useRegisterScreen.ts","line":144,"code":"\"Your account has been created successfully. You can now log in.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01502","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useRegisterScreen.ts","line":156,"code":"Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01503","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useRegisterScreen.ts","line":160,"code":"logger.error(\"Registration failed\", { error: error as Error, email: values.email });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01504","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useRegisterScreen.ts","line":176,"code":"async (e?: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01505","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useResetPasswordScreen.ts","line":7,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01506","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useResetPasswordScreen.ts","line":87,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01507","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useResetPasswordScreen.ts","line":100,"code":"Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01508","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useResetPasswordScreen.ts","line":106,"code":"\"Your password has been reset successfully. You can now log in with your new password.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01509","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/screens/useResetPasswordScreen.ts","line":118,"code":"Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01510","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useSafetyCenterScreen.ts","line":12,"code":"safetyOptions: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01511","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useSafetyCenterScreen.ts","line":15,"code":"handleSafetyOption: (option: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01512","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useSafetyCenterScreen.ts","line":20,"code":"colors: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01513","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useSettingsScreen.ts","line":167,"code":"Alert.alert(\"Export Complete\", \"Your data has been exported successfully.\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01514","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useStoriesScreen.ts","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01515","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useStoriesScreen.ts","line":16,"code":"storyGroups: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01516","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useStoriesScreen.ts","line":21,"code":"currentGroup: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01517","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useStoriesScreen.ts","line":22,"code":"currentStory: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01518","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useStoriesScreen.ts","line":38,"code":"panResponder: React.RefObject<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01519","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useSubscriptionFlow.ts","line":132,"code":"navigation.navigate(\"SubscriptionSuccess\" as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01520","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useSubscriptionManager.ts","line":150,"code":"Alert.alert(\"Success\", \"Your subscription has been cancelled.\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01521","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useWelcomeScreen.ts","line":62,"code":"navigation.navigate(\"UserIntent\" as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01522","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/screens/useWelcomeScreen.ts","line":68,"code":"navigation.navigate(\"Main\" as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01523","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/swipe/__tests__/useSwipeGestures.test.ts","line":30,"code":"const mockPanResponder = PanResponder as jest.Mocked<typeof PanResponder>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01524","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useAIBio.ts","line":8,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01525","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useAdminUsersScreen.ts","line":2,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01526","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/useAdminUsersScreen.ts","line":415,"code":").catch(() => undefined);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01527","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useAnimations.ts","line":4,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01528","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useBiometric.ts","line":8,"code":"import type { BiometricAuthResult as BiometricResult } from \"../services/BiometricService\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01529","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useBiometric.ts","line":118,"code":"`${state.biometryType} has been enabled for secure authentication.`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01530","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useBiometric.ts","line":155,"code":"`${state.biometryType} has been disabled.`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01531","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useChatData.ts","line":5,"code":"import type { Message as CoreMessage } from \"@pawfectmatch/core\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01532","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useChatData.ts","line":304,"code":"// Mark messages as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01533","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useChatData.ts","line":308,"code":"logger.debug(\"Messages marked as read\", { matchId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01534","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useChatData.ts","line":311,"code":"logger.error(\"Failed to mark messages as read\", { error: err instanceof Error ? err : new Error(String(err)), matchId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01535","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useChatData.ts","line":399,"code":"\"Fantastic! This is exactly what I was hoping for 🎉\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01536","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useErrorHandler.ts","line":194,"code":"logError: false, // Don't log offline errors as they're expected","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01537","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/useErrorRecovery.ts","line":106,"code":"executeWithRecovery(operation, context).catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01538","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/useErrorRecovery.ts","line":113,"code":"executeWithRecovery(operation, context).catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01539","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useErrorRecovery.ts","line":179,"code":"const err = error as { status?: number; code?: string; message?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01540","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useErrorRecovery.ts","line":218,"code":"const err = error as { code?: string; message?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01541","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useHelpSupportData.ts","line":1,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01542","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/useHelpSupportData.ts","line":123,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01543","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/useHelpSupportData.ts","line":128,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01544","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/useHelpSupportData.ts","line":133,"code":"Linking.canOpenURL(url).then((supported) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01545","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useLiveStream.ts","line":36,"code":"const socketRef = useRef<any>(null);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01546","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePerformance.ts","line":27,"code":") as T;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01547","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePerformance.ts","line":79,"code":") as T;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01548","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePerformance.ts","line":89,"code":"fallback: T = null as T,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01549","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePerformance.ts","line":226,"code":"return stableHandler as T;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01550","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":86,"code":"const parentKey = parent as keyof typeof formData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01551","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":87,"code":"const childKey = child as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01552","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":92,"code":"...(prev[parentKey] as Record<string, unknown>),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01553","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":94,"code":"} as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01554","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":94,"code":"} as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01555","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":97,"code":"const fieldKey = field as keyof typeof formData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01556","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":149,"code":"species: formData.species as \"dog\" | \"cat\" | \"bird\" | \"rabbit\" | \"other\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01557","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":152,"code":"gender: formData.gender as \"male\" | \"female\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01558","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":153,"code":"size: formData.size as \"tiny\" | \"small\" | \"medium\" | \"large\" | \"extra-large\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01559","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":155,"code":"intent: formData.intent as \"adoption\" | \"mating\" | \"playdate\" | \"all\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01560","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":157,"code":"healthInfo: formData.healthInfo as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01561","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":157,"code":"healthInfo: formData.healthInfo as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01562","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":197,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01563","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePetForm.ts","line":197,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01564","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePhotoEditor.ts","line":2,"code":"import * as ImageManipulator from 'expo-image-manipulator';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01565","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePhotoManager.ts","line":1,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01566","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePhotoManager.ts","line":60,"code":"const newPhotos: PhotoData[] = result.assets.map((asset: any, index: number) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01567","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePhotoManager.ts","line":82,"code":"// Mark photo as uploading using functional update to avoid stale state","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01568","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePhotoManager.ts","line":116,"code":"// Mark photo as successfully uploaded","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01569","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/usePhotoManager.ts","line":191,"code":"uploadPhotos(pendingPhotos).catch((error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01570","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/usePremium.ts","line":44,"code":"// central feature map – tweak as needed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01571","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/useReducedMotion.ts","line":16,"code":".then((isEnabled) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01572","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/useReducedMotion.ts","line":21,"code":".catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01573","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useRetry.ts","line":153,"code":"const err = error as { status?: number; code?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01574","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useSettings.ts","line":31,"code":"const copy = JSON.parse(JSON.stringify(prev)) as Settings;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01575","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useSwipeToReply.ts","line":13,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01576","severity":"P1","category":"Type","file":"apps/mobile/src/hooks/useSwipeToReply.ts","line":45,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01577","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useThemeToggle.ts","line":1,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01578","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useThemeToggle.ts","line":32,"code":"const themeMode = mode as ThemeMode;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01579","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useUnifiedAnimations.ts","line":17,"code":"useSwipeGestures as useSwipeGesture,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01580","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/useUnifiedAnimations.ts","line":40,"code":"export { UnifiedAnimations as default };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01581","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/utils/__tests__/useAsyncAction.test.ts","line":65,"code":"// Verify the action was called","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01582","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/utils/__tests__/usePersistedState.test.ts","line":16,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01583","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/utils/__tests__/useScrollPersistence.test.ts","line":15,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01584","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/utils/useFormState.ts","line":28,"code":") => (e?: any) => void | Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01585","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/utils/useFormState.ts","line":93,"code":"// Mark all fields as touched when validating","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01586","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/utils/useFormState.ts","line":96,"code":"allTouched[key as keyof T] = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01587","severity":"P2","category":"Type","file":"apps/mobile/src/hooks/utils/useFormState.ts","line":110,"code":"(onSubmit: (values: T) => void | Promise<void>) => async (e?: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01588","severity":"P2","category":"Type","file":"apps/mobile/src/i18n/detectors.ts","line":2,"code":"import * as RNLocalize from 'react-native-localize';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01589","severity":"P2","category":"Type","file":"apps/mobile/src/i18n/detectors.ts","line":15,"code":"return SUPPORTED.includes(v as Lang) ? (v as Lang) : 'en';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01590","severity":"P2","category":"Type","file":"apps/mobile/src/i18n/detectors.ts","line":50,"code":"* If user has NOT set an override, automatically follow device changes.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01591","severity":"P2","category":"Type","file":"apps/mobile/src/i18n/detectors.ts","line":59,"code":"// @ts-expect-error RNLocalize typing supports addEventListener('change', cb)","problem":"TypeScript suppression comment","evidence":"TypeScript suppressions hide type errors and should be avoided","fix":"Fix the underlying type issue instead of suppressing it","autofix":{"type":"manual","snippet":"Remove suppression and fix the type error"},"blast_radius":"Local","confidence":0.8,"tags":["typescript","suppression"],"owner":"mobile"}
{"id":"AUD-TYP-01592","severity":"P2","category":"Type","file":"apps/mobile/src/index.ts","line":1,"code":"export { default as App } from \"./App\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01593","severity":"P2","category":"Type","file":"apps/mobile/src/lib/sentry.ts","line":7,"code":"import * as Sentry from \"@sentry/react-native\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01594","severity":"P2","category":"Type","file":"apps/mobile/src/lib/sentry.ts","line":50,"code":"event.request.query_string = (event.request.query_string as string)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01595","severity":"P2","category":"Type","file":"apps/mobile/src/lib/sentry.ts","line":109,"code":"// ReactNativeTracing has been replaced with automatic tracing in newer Sentry versions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01596","severity":"P2","category":"Type","file":"apps/mobile/src/lib/sentry.ts","line":197,"code":"// startTransaction has been deprecated - transactions are now automatic","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01597","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/ActivePillTabBar.tsx","line":11,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01598","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/ActivePillTabBar.tsx","line":38,"code":"const route = routeName as RouteName;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01599","severity":"P1","category":"Type","file":"apps/mobile/src/navigation/ActivePillTabBar.tsx","line":111,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01600","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/ActivePillTabBar.tsx","line":217,"code":"(navigation as any).emit({ type: \"tabDoublePress\", target: route.key });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01601","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/ActivePillTabBar.tsx","line":217,"code":"(navigation as any).emit({ type: \"tabDoublePress\", target: route.key });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01602","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":68,"code":"component={AdminDashboardScreen as React.ComponentType<any>}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01603","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":68,"code":"component={AdminDashboardScreen as React.ComponentType<any>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01604","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":77,"code":"component={AdminAnalyticsScreen as React.ComponentType<any>}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01605","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":77,"code":"component={AdminAnalyticsScreen as React.ComponentType<any>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01606","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":86,"code":"component={AdminUsersScreen as React.ComponentType<any>}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01607","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":86,"code":"component={AdminUsersScreen as React.ComponentType<any>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01608","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":95,"code":"component={AdminSecurityScreen as React.ComponentType<any>}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01609","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":95,"code":"component={AdminSecurityScreen as React.ComponentType<any>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01610","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":104,"code":"component={AdminBillingScreen as React.ComponentType<any>}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01611","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":104,"code":"component={AdminBillingScreen as React.ComponentType<any>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01612","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":114,"code":"component={AdminChatsScreen as React.ComponentType<any>}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01613","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":114,"code":"component={AdminChatsScreen as React.ComponentType<any>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01614","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":124,"code":"component={AdminUploadsScreen as React.ComponentType<any>}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01615","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":124,"code":"component={AdminUploadsScreen as React.ComponentType<any>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01616","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":134,"code":"component={AdminVerificationsScreen as React.ComponentType<any>}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01617","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":134,"code":"component={AdminVerificationsScreen as React.ComponentType<any>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01618","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":144,"code":"component={AdminServicesScreen as React.ComponentType<any>}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01619","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":144,"code":"component={AdminServicesScreen as React.ComponentType<any>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01620","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/AdminNavigator.tsx","line":154,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01621","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/UltraTabBar.tsx","line":12,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01622","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/UltraTabBar.tsx","line":33,"code":"const routeName = route as RouteName;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01623","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/UltraTabBar.tsx","line":169,"code":"const label = (opts.tabBarLabel as string) ?? (opts.title as string) ?? route.name;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01624","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.integration.test.tsx","line":11,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01625","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.integration.test.tsx","line":44,"code":"(Haptics.impactAsync as jest.Mock).mockResolvedValue(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01626","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.integration.test.tsx","line":341,"code":"(Haptics.impactAsync as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01627","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.test.tsx","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01628","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.test.tsx","line":23,"code":"BlurView: ({ children, ...props }: any) => (","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01629","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.test.tsx","line":45,"code":"Ionicons: React.forwardRef(({ name, size, color, testID, ...props }: any, ref: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01630","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.test.tsx","line":46,"code":"// Store icon props as data attributes for testing","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01631","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.test.tsx","line":91,"code":"const mockNavigation: any = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01632","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.test.tsx","line":108,"code":"(Haptics.impactAsync as jest.Mock).mockResolvedValue(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01633","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.test.tsx","line":334,"code":"const descriptors = (homeTab as any)._fiber?.stateNode?.props?.onLongPress;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01634","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.test.tsx","line":334,"code":"const descriptors = (homeTab as any)._fiber?.stateNode?.props?.onLongPress;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01635","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/ActivePillTabBar.test.tsx","line":364,"code":"// Should use route name as label","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01636","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/TabNavigation.screen-integration.test.tsx","line":12,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01637","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/TabNavigation.screen-integration.test.tsx","line":27,"code":"emit: jest.fn((event: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01638","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/TabNavigation.screen-integration.test.tsx","line":313,"code":"}, {} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01639","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/TabNavigation.screen-integration.test.tsx","line":313,"code":"}, {} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01640","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/UltraTabBar.integration.test.tsx","line":19,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01641","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/UltraTabBar.integration.test.tsx","line":182,"code":"it(\"has proper accessibility labels\", () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01642","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/UltraTabBar.integration.test.tsx","line":219,"code":"// Matches has 3","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01643","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/UltraTabBar.integration.test.tsx","line":221,"code":"// Map has 1","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01644","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/UltraTabBar.integration.test.tsx","line":223,"code":"// Home has 2","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01645","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/__tests__/UltraTabBar.integration.test.tsx","line":261,"code":"it(\"has proper styling with shadows and elevation\", () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01646","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/transitions.ts","line":9,"code":"} as NativeStackNavigationOptions,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01647","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/transitions.ts","line":14,"code":"} as NativeStackNavigationOptions,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01648","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/transitions.ts","line":18,"code":"} as NativeStackNavigationOptions,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01649","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/transitions.ts","line":30,"code":"}) as NativeStackNavigationOptions,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01650","severity":"P2","category":"Type","file":"apps/mobile/src/navigation/transitions.ts","line":36,"code":"} as NativeStackNavigationOptions,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01651","severity":"P1","category":"Type","file":"apps/mobile/src/providers/PremiumProvider.tsx","line":97,"code":"refresh().catch(() => null);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01652","severity":"P2","category":"Type","file":"apps/mobile/src/schemas/api.ts","line":2,"code":"* Zod Schemas for API Runtime Validation","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01653","severity":"P2","category":"Type","file":"apps/mobile/src/schemas/api.ts","line":5,"code":"* These schemas ensure type safety at runtime, not just compile time.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01654","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.refactored.tsx","line":20,"code":"navigation: NavigationProp<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01655","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.refactored.tsx","line":204,"code":"const createStyles = (colors: ReturnType<typeof getExtendedColors>, spacing: any, borderRadius: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01656","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.refactored.tsx","line":327,"code":"{ background: '#fff', border: '#ccc', text: '#000', textMuted: '#666', primary: '#007AFF', white: '#fff', danger: '#FF3B30' } as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01657","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.refactored.tsx","line":327,"code":"{ background: '#fff', border: '#ccc', text: '#000', textMuted: '#666', primary: '#007AFF', white: '#fff', danger: '#FF3B30' } as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01658","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.refactored.tsx","line":328,"code":"{ xs: 4, sm: 8, md: 16, lg: 24, xl: 32 } as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01659","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.refactored.tsx","line":328,"code":"{ xs: 4, sm: 8, md: 16, lg: 24, xl: 32 } as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01660","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.refactored.tsx","line":329,"code":"{ none: 0, xs: 2, sm: 4, md: 8, lg: 12, xl: 16, '2xl': 20, full: 9999 } as any","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01661","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.refactored.tsx","line":329,"code":"{ none: 0, xs: 2, sm: 4, md: 8, lg: 12, xl: 16, '2xl': 20, full: 9999 } as any","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01662","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.stories.tsx","line":18,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01663","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.stories.tsx","line":18,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01664","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.stories.tsx","line":147,"code":"✅ This story would show the screen after a bio has been generated.{'\\n'}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01665","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.tsx","line":284,"code":"const createStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01666","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIBioScreen.tsx","line":544,"code":"const getStyles = (theme: any) => createStyles(theme);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01667","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIPhotoAnalyzerScreen.tsx","line":11,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01668","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AIPhotoAnalyzerScreen.tsx","line":59,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01669","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ARScentTrailsScreen.tsx","line":4,"code":"import * as Location from \"expo-location\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01670","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ARScentTrailsScreen.tsx","line":38,"code":"const pins: Pin[] = (route.params as any)?.pins ?? [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01671","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ARScentTrailsScreen.tsx","line":38,"code":"const pins: Pin[] = (route.params as any)?.pins ?? [];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01672","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AboutTermsPrivacyScreen.tsx","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01673","severity":"P1","category":"Type","file":"apps/mobile/src/screens/AboutTermsPrivacyScreen.tsx","line":78,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01674","severity":"P1","category":"Type","file":"apps/mobile/src/screens/AboutTermsPrivacyScreen.tsx","line":83,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01675","severity":"P1","category":"Type","file":"apps/mobile/src/screens/AboutTermsPrivacyScreen.tsx","line":85,"code":"Linking.canOpenURL(url).then((supported) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01676","severity":"P1","category":"Type","file":"apps/mobile/src/screens/AboutTermsPrivacyScreen.tsx","line":107,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01677","severity":"P2","category":"Type","file":"apps/mobile/src/screens/AdvancedFiltersScreen.tsx","line":14,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01678","severity":"P1","category":"Type","file":"apps/mobile/src/screens/AdvancedFiltersScreen.tsx","line":108,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01679","severity":"P2","category":"Type","file":"apps/mobile/src/screens/BlockedUsersScreen.tsx","line":16,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01680","severity":"P1","category":"Type","file":"apps/mobile/src/screens/BlockedUsersScreen.tsx","line":175,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01681","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CommunityScreen.tsx","line":28,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01682","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CommunityScreen.tsx","line":41,"code":"import type { FlatList as FlatListType } from \"react-native\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01683","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CommunityScreen.tsx","line":105,"code":"logger.error(\"Error liking post:\", { error: error as Error, postId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01684","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CommunityScreen.tsx","line":143,"code":"logger.error(\"Error adding comment:\", { error: error as Error, postId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01685","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CommunityScreen.tsx","line":192,"code":"Alert.alert(\"Success\", \"User has been blocked.\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01686","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CreatePetScreen.tsx","line":112,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01687","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CreateReelScreen.tsx","line":14,"code":"type Template = { id: string; name: string; minClips: number; maxClips: number; jsonSpec: any };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01688","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CreateReelScreen.tsx","line":25,"code":"return (await r.json()) as T;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01689","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CreateReelScreen.tsx","line":30,"code":"const createReel = (body: any) => api<Reel>('/reels', { method: 'POST', body: JSON.stringify(body) });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01690","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CreateReelScreen.tsx","line":31,"code":"const setClips = (id: string, clips: any[]) => api<Reel>(`/reels/${id}/clips`, { method: 'PUT', body: JSON.stringify({ clips }) });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01691","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CreateReelScreen.tsx","line":128,"code":"Alert.alert('Error', 'Reel was flagged or removed');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01692","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CreateReelScreen.tsx","line":318,"code":"onPress={() => setStep((s) => (s - 1) as any)}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01693","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CreateReelScreen.tsx","line":318,"code":"onPress={() => setStep((s) => (s - 1) as any)}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01694","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CreateReelScreen.tsx","line":335,"code":"onPress={() => (step < 2 ? setStep((s) => (s + 1) as any) : onRender())}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01695","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CreateReelScreen.tsx","line":335,"code":"onPress={() => (step < 2 ? setStep((s) => (s + 1) as any) : onRender())}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01696","severity":"P2","category":"Type","file":"apps/mobile/src/screens/CreateReelScreen.tsx","line":359,"code":"const makeStyles = (theme: any) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01697","severity":"P2","category":"Type","file":"apps/mobile/src/screens/DeactivateAccountScreen.tsx","line":14,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01698","severity":"P2","category":"Type","file":"apps/mobile/src/screens/EditProfileScreen.tsx","line":58,"code":"// If an avatar was selected, show the editor","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01699","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ForgotPasswordScreen.tsx","line":56,"code":"color: theme.colors.primary as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01700","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ForgotPasswordScreen.tsx","line":109,"code":"backgroundColor: theme.colors.primary as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01701","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ForgotPasswordScreen.tsx","line":135,"code":"color: theme.colors.primary as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01702","severity":"P2","category":"Type","file":"apps/mobile/src/screens/GoLiveScreen.tsx","line":12,"code":"navigation: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01703","severity":"P2","category":"Type","file":"apps/mobile/src/screens/GoLiveScreen.tsx","line":154,"code":"return data as { streamId: string; roomName: string; token: string; url: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01704","severity":"P2","category":"Type","file":"apps/mobile/src/screens/GoLiveScreen.tsx","line":156,"code":"onError: (e: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01705","severity":"P2","category":"Type","file":"apps/mobile/src/screens/GoLiveScreen.tsx","line":170,"code":"onError: (e: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01706","severity":"P2","category":"Type","file":"apps/mobile/src/screens/GoLiveScreen.tsx","line":200,"code":"} catch (e: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01707","severity":"P2","category":"Type","file":"apps/mobile/src/screens/HelpSupportScreen.tsx","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01708","severity":"P1","category":"Type","file":"apps/mobile/src/screens/HelpSupportScreen.tsx","line":45,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01709","severity":"P2","category":"Type","file":"apps/mobile/src/screens/LiveBrowseScreen.tsx","line":10,"code":"navigation: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01710","severity":"P2","category":"Type","file":"apps/mobile/src/screens/LiveBrowseScreen.tsx","line":29,"code":"return (data as { items: LiveStreamItem[] }).items;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01711","severity":"P2","category":"Type","file":"apps/mobile/src/screens/LiveViewerScreen.tsx","line":13,"code":"navigation: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01712","severity":"P2","category":"Type","file":"apps/mobile/src/screens/LiveViewerScreen.tsx","line":23,"code":"const { streamId } = (route.params as RouteParams) || {};","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01713","severity":"P2","category":"Type","file":"apps/mobile/src/screens/LiveViewerScreen.tsx","line":125,"code":"const [room, setRoom] = useState<any>(null);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01714","severity":"P2","category":"Type","file":"apps/mobile/src/screens/LiveViewerScreen.tsx","line":135,"code":"return data as { roomName: string; token: string; url: string; title: string; coverUrl: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01715","severity":"P2","category":"Type","file":"apps/mobile/src/screens/LiveViewerScreen.tsx","line":149,"code":"socket.on(\"chat:message\", (m: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01716","severity":"P2","category":"Type","file":"apps/mobile/src/screens/LoginScreen.tsx","line":61,"code":"color: theme.colors.primary as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01717","severity":"P2","category":"Type","file":"apps/mobile/src/screens/LoginScreen.tsx","line":113,"code":"color: theme.colors.primary as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01718","severity":"P2","category":"Type","file":"apps/mobile/src/screens/LoginScreen.tsx","line":117,"code":"backgroundColor: theme.colors.primary as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01719","severity":"P2","category":"Type","file":"apps/mobile/src/screens/LoginScreen.tsx","line":137,"code":"color: theme.colors.primary as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01720","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ManageSubscriptionScreen.tsx","line":5,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01721","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ManageSubscriptionScreen.tsx","line":64,"code":"const status = (data.status && validStatuses.includes(data.status as any)) ? data.status as \"active\" | \"canceled\" | \"past_due\" | \"unpaid\" | \"incomplete\" | \"inactive\" : undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01722","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ManageSubscriptionScreen.tsx","line":64,"code":"const status = (data.status && validStatuses.includes(data.status as any)) ? data.status as \"active\" | \"canceled\" | \"past_due\" | \"unpaid\" | \"incomplete\" | \"inactive\" : undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01723","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ManageSubscriptionScreen.tsx","line":71,"code":": (data.plan as any),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01724","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ManageSubscriptionScreen.tsx","line":71,"code":": (data.plan as any),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01725","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ManageSubscriptionScreen.tsx","line":113,"code":"\"Your subscription has been canceled. You will retain access until the end of your current billing period.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01726","severity":"P2","category":"Type","file":"apps/mobile/src/screens/MapScreen.tsx","line":125,"code":"pin={selectedPin as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01727","severity":"P2","category":"Type","file":"apps/mobile/src/screens/MapScreen.tsx","line":125,"code":"pin={selectedPin as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01728","severity":"P2","category":"Type","file":"apps/mobile/src/screens/MatchesScreen.tsx","line":3,"code":"import type { FlatList as FlatListType } from \"react-native\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01729","severity":"P2","category":"Type","file":"apps/mobile/src/screens/MemoryWeaveScreen.tsx","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01730","severity":"P2","category":"Type","file":"apps/mobile/src/screens/MemoryWeaveScreen.tsx","line":351,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01731","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ModerationToolsScreen.tsx","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01732","severity":"P1","category":"Type","file":"apps/mobile/src/screens/ModerationToolsScreen.tsx","line":108,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01733","severity":"P1","category":"Type","file":"apps/mobile/src/screens/ModerationToolsScreen.tsx","line":135,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01734","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ModerationToolsScreen.tsx","line":194,"code":"<Ionicons name={item.icon as any} size={24} color=\"white\" />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01735","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ModerationToolsScreen.tsx","line":194,"code":"<Ionicons name={item.icon as any} size={24} color=\"white\" />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01736","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ModernCreatePetScreen.tsx","line":128,"code":"\"Your pet profile has been created successfully.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01737","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ModernSwipeScreen.tsx","line":229,"code":"pet={currentPet as any} // TODO: Create proper adapter between core Pet and ModernSwipeCard Pet","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01738","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ModernSwipeScreen.tsx","line":229,"code":"pet={currentPet as any} // TODO: Create proper adapter between core Pet and ModernSwipeCard Pet","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01739","severity":"P2","category":"Type","file":"apps/mobile/src/screens/NewComponentsTestScreen.tsx","line":95,"code":"Alert.alert(\"Button Pressed\", `${buttonName} button was pressed!`);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01740","severity":"P2","category":"Type","file":"apps/mobile/src/screens/NewComponentsTestScreen.tsx","line":114,"code":"Alert.alert(\"Loading Complete\", \"The loading animation has finished!\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01741","severity":"P2","category":"Type","file":"apps/mobile/src/screens/NewComponentsTestScreen.tsx","line":340,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01742","severity":"P2","category":"Type","file":"apps/mobile/src/screens/NotificationPreferencesScreen.tsx","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01743","severity":"P1","category":"Type","file":"apps/mobile/src/screens/NotificationPreferencesScreen.tsx","line":98,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01744","severity":"P1","category":"Type","file":"apps/mobile/src/screens/NotificationPreferencesScreen.tsx","line":109,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01745","severity":"P1","category":"Type","file":"apps/mobile/src/screens/NotificationPreferencesScreen.tsx","line":123,"code":"Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01746","severity":"P1","category":"Type","file":"apps/mobile/src/screens/NotificationPreferencesScreen.tsx","line":211,"code":"Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01747","severity":"P1","category":"Type","file":"apps/mobile/src/screens/NotificationPreferencesScreen.tsx","line":295,"code":"Haptics.selectionAsync().catch(() => {});","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-01748","severity":"P2","category":"Type","file":"apps/mobile/src/screens/PremiumCancelScreen.tsx","line":13,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01749","severity":"P2","category":"Type","file":"apps/mobile/src/screens/PremiumCancelScreen.tsx","line":56,"code":"No worries! Your payment was cancelled and you weren't charged. You","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01750","severity":"P2","category":"Type","file":"apps/mobile/src/screens/PremiumDemoScreen.tsx","line":229,"code":"setActiveDemo(item.id as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01751","severity":"P2","category":"Type","file":"apps/mobile/src/screens/PremiumDemoScreen.tsx","line":229,"code":"setActiveDemo(item.id as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01752","severity":"P2","category":"Type","file":"apps/mobile/src/screens/PremiumScreen.tsx","line":2,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01753","severity":"P2","category":"Type","file":"apps/mobile/src/screens/PremiumSuccessScreen.tsx","line":10,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01754","severity":"P2","category":"Type","file":"apps/mobile/src/screens/PremiumSuccessScreen.tsx","line":68,"code":"Your subscription has been activated successfully. Enjoy all","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01755","severity":"P2","category":"Type","file":"apps/mobile/src/screens/PrivacySettingsScreen.tsx","line":188,"code":"value as PrivacySettings[\"profileVisibility\"],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01756","severity":"P2","category":"Type","file":"apps/mobile/src/screens/PrivacySettingsScreen.tsx","line":260,"code":"value as PrivacySettings[\"allowMessages\"],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01757","severity":"P2","category":"Type","file":"apps/mobile/src/screens/PrivacySettingsScreen.tsx","line":401,"code":"`Your data export has been initiated. You will receive an email with your data within ${response.estimatedTime}.`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01758","severity":"P2","category":"Type","file":"apps/mobile/src/screens/PrivacySettingsScreen.tsx","line":429,"code":"const getStyles = (colors: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01759","severity":"P2","category":"Type","file":"apps/mobile/src/screens/RegisterScreen.tsx","line":46,"code":"color: theme.colors.primary as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01760","severity":"P2","category":"Type","file":"apps/mobile/src/screens/RegisterScreen.tsx","line":88,"code":"backgroundColor: theme.colors.primary as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01761","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ResetPasswordScreen.tsx","line":54,"code":"color: theme.colors.primary as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01762","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ResetPasswordScreen.tsx","line":107,"code":"backgroundColor: theme.colors.primary as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01763","severity":"P2","category":"Type","file":"apps/mobile/src/screens/SettingsScreen.tsx","line":193,"code":"// Add UI preferences here as needed - but won't be in User[\"preferences\"]","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01764","severity":"P2","category":"Type","file":"apps/mobile/src/screens/StoriesScreen.tsx","line":42,"code":"[key: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01765","severity":"P2","category":"Type","file":"apps/mobile/src/screens/TemplateScreen.tsx","line":122,"code":"const createStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01766","severity":"P2","category":"Type","file":"apps/mobile/src/screens/VerificationCenterScreen.tsx","line":58,"code":"logger.error('Error loading verification status', { error: error as Error });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01767","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":46,"code":"(useAuthStore as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01768","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":164,"code":"(api.ai.generateBio as jest.Mock).mockImplementation(mockGenerateBio);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01769","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":207,"code":"(api.ai.generateBio as jest.Mock).mockResolvedValue(mockBioData);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01770","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":238,"code":"(api.ai.generateBio as jest.Mock).mockRejectedValue(mockError);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01771","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":269,"code":"let resolvePromise: (value: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01772","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":274,"code":"(api.ai.generateBio as jest.Mock).mockReturnValue(promise);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01773","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":330,"code":"(api.ai.generateBio as jest.Mock).mockImplementation(mockGenerateBio);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01774","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":373,"code":"(api.ai.generateBio as jest.Mock).mockImplementation(mockGenerateBio);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01775","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":409,"code":"(api.ai.generateBio as jest.Mock).mockRejectedValue(timeoutError);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01776","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":441,"code":"(serviceError as any).response = { status: 503 };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01777","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":441,"code":"(serviceError as any).response = { status: 503 };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01778","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIBioScreen.test.tsx","line":443,"code":"(api.ai.generateBio as jest.Mock).mockRejectedValue(serviceError);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01779","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":80,"code":"const mockMatchesAPI = matchesAPI as jest.Mocked<typeof matchesAPI>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01780","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":81,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01781","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":98,"code":"const renderComponent = (routeParams?: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01782","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":299,"code":"(api.ai.analyzeCompatibility as jest.Mock).mockImplementation(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01783","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":350,"code":"(api.ai.analyzeCompatibility as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01784","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":385,"code":"let resolvePromise: (value: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01785","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":390,"code":"(api.ai.analyzeCompatibility as jest.Mock).mockReturnValue(promise);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01786","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":439,"code":"(api.ai.analyzeCompatibility as jest.Mock).mockRejectedValue(mockError);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01787","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":487,"code":"(api.ai.analyzeCompatibility as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01788","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":535,"code":"(api.ai.analyzeCompatibility as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01789","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":583,"code":"(api.ai.analyzeCompatibility as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01790","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":640,"code":"(api.ai.analyzeCompatibility as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01791","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":716,"code":"(api.ai.analyzeCompatibility as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01792","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AICompatibilityScreen.test.tsx","line":786,"code":"(api.ai.analyzeCompatibility as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01793","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":7,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01794","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":48,"code":"(useAuthStore as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01795","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":83,"code":"ImagePicker.requestCameraPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01796","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":87,"code":"(ImagePicker.launchCameraAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01797","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":103,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01798","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":107,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01799","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":125,"code":"ImagePicker.requestCameraPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01800","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":145,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01801","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":165,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01802","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":169,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01803","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":188,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01804","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":192,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01805","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":218,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01806","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":222,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01807","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":283,"code":"(api.ai.analyzePhotos as jest.Mock).mockImplementation(mockAnalyzePhotos);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01808","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":287,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01809","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":291,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01810","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":338,"code":"(api.ai.analyzePhotos as jest.Mock).mockResolvedValue(mockAnalysisResult);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01811","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":342,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01812","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":346,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01813","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":373,"code":"let resolvePromise: (value: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01814","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":378,"code":"(api.ai.analyzePhotos as jest.Mock).mockReturnValue(promise);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01815","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":382,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01816","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":386,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01817","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":429,"code":"(api.ai.analyzePhotos as jest.Mock).mockRejectedValue(mockError);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01818","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":433,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01819","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":437,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01820","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":479,"code":"(api.ai.analyzePhotos as jest.Mock).mockResolvedValue(mockAnalysisResult);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01821","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":483,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01822","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":487,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01823","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":533,"code":"(api.ai.analyzePhotos as jest.Mock).mockResolvedValue(mockAnalysisResult);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01824","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":537,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01825","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":541,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01826","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":587,"code":"(api.ai.analyzePhotos as jest.Mock).mockResolvedValue(mockAnalysisResult);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01827","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":591,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01828","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":595,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01829","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":640,"code":"(api.ai.analyzePhotos as jest.Mock).mockResolvedValue(mockAnalysisResult);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01830","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":644,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01831","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":648,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01832","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":694,"code":"ImagePicker.requestMediaLibraryPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01833","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":698,"code":"(ImagePicker.launchImageLibraryAsync as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01834","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":717,"code":"ImagePicker.requestCameraPermissionsAsync as jest.Mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01835","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/AIPhotoAnalyzerScreen.test.tsx","line":721,"code":"(ImagePicker.launchCameraAsync as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01836","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":33,"code":"const mockUseCallManager = useCallManager as jest.MockedFunction<","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01837","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":36,"code":"const mockUseAuthStore = useAuthStore as jest.MockedFunction<","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01838","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":72,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01839","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":72,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01840","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":107,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01841","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":109,"code":"(button: any) => button.text === \"Call\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01842","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":138,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01843","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":140,"code":"(button: any) => button.text === \"Call\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01844","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":159,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01845","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":161,"code":"(button: any) => button.text === \"Call\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01846","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":214,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01847","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ChatScreen.calling.test.tsx","line":216,"code":"(button: any) => button.text === \"Cancel\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01848","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/HomeScreen.theme.test.tsx","line":81,"code":"expect((theme.colors as any).neutral).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01849","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/HomeScreen.theme.test.tsx","line":81,"code":"expect((theme.colors as any).neutral).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01850","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/HomeScreen.theme.test.tsx","line":203,"code":"// This test verifies the refactoring was done correctly","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01851","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.accessibility.test.tsx","line":9,"code":"LinearGradient: ({ children, ...rest }: any) => (","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01852","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.accessibility.test.tsx","line":49,"code":"it(\"has visible headings and decorative gradient container\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01853","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.accessibility.test.tsx","line":51,"code":"(<(typeof import(\"../MapScreen\"))[\"default\"]>require(\"../MapScreen\").default)({ navigation: { navigate: mockNavigate } } as any)","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01854","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.accessibility.test.tsx","line":51,"code":"(<(typeof import(\"../MapScreen\"))[\"default\"]>require(\"../MapScreen\").default)({ navigation: { navigate: mockNavigate } } as any)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01855","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":13,"code":"LinearGradient: ({ children, ...rest }: any) => (","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01856","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":33,"code":"MapFiltersModal: ({ onSetFilters, onToggleActivity }: any) => (","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01857","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":46,"code":"MapStatsPanel: ({ stats }: { stats: any }) => (","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01858","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":51,"code":"PinDetailsModal: ({ visible, onClose }: any) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01859","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":99,"code":"getStableMatchFlag: (pin: any) => pin.activity === \"walk\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01860","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":112,"code":"const { getByText } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01861","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":112,"code":"const { getByText } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01862","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":118,"code":"const { getByTestId, getAllByTestId } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01863","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":118,"code":"const { getByTestId, getAllByTestId } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01864","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":125,"code":"const { getAllByText } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01865","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":125,"code":"const { getAllByText } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01866","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":131,"code":"const { getByText } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01867","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":131,"code":"const { getByText } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01868","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":137,"code":"const { getAllByText } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01869","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":137,"code":"const { getAllByText } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01870","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":145,"code":"const { getByTestId, getByText } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01871","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":145,"code":"const { getByTestId, getByText } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01872","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":153,"code":"const { getByTestId } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01873","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.base.test.tsx","line":153,"code":"const { getByTestId } = renderWithProviders(<MapScreen navigation={{ navigate: mockNavigate }} as any />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01874","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.interactions.test.tsx","line":12,"code":"LinearGradient: ({ children, ...rest }: any) => (","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01875","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.interactions.test.tsx","line":24,"code":"PinDetailsModal: ({ visible, onClose }: any) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01876","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.interactions.test.tsx","line":50,"code":"getStableMatchFlag: (pin: any) => pin.activity === \"walk\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01877","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.interactions.test.tsx","line":72,"code":"renderWithProviders(<MapScreen navigation={{navigate: mockNavigate}} as any />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01878","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.interactions.test.tsx","line":72,"code":"renderWithProviders(<MapScreen navigation={{navigate: mockNavigate}} as any />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01879","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.interactions.test.tsx","line":101,"code":"const { getAllByText } = renderWithProviders(<MapScreen navigation={{navigate: mockNavigate}} as any />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01880","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MapScreen.interactions.test.tsx","line":101,"code":"const { getAllByText } = renderWithProviders(<MapScreen navigation={{navigate: mockNavigate}} as any />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01881","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":29,"code":"const mockUseCallManager = useCallManager as jest.MockedFunction<","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01882","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":32,"code":"const mockUseAuthStore = useAuthStore as jest.MockedFunction<","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01883","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":94,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01884","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":94,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01885","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":136,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01886","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":138,"code":"(button: any) => button.text === \"Call\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01887","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":169,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01888","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":171,"code":"(button: any) => button.text === \"Call\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01889","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":209,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01890","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":211,"code":"(button: any) => button.text === \"Call\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01891","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":265,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01892","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":267,"code":"(button: any) => button.text === \"Call\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01893","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":353,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01894","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":355,"code":"(button: any) => button.text === \"Cancel\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01895","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":396,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01896","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.calling.test.tsx","line":398,"code":"(button: any) => button.text === \"Call\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01897","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":34,"code":"(useMatchesData as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01898","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":47,"code":"(useScrollOffsetTracker as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01899","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":52,"code":"(useTabReselectRefresh as jest.Mock).mockReturnValue(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01900","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":56,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01901","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":56,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01902","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":64,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01903","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":64,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01904","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":66,"code":"const useTabReselectRefreshCall = (useTabReselectRefresh as jest.Mock).mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01905","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":80,"code":"<MatchesScreen navigation={{ navigate: jest.fn() } as any} />,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01906","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":80,"code":"<MatchesScreen navigation={{ navigate: jest.fn() } as any} />,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01907","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":89,"code":"(useScrollOffsetTracker as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01908","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":94,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01909","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":94,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01910","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":102,"code":"(useMatchesData as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01911","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":115,"code":"(useScrollOffsetTracker as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01912","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":120,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01913","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":120,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01914","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":122,"code":"const useTabReselectRefreshCall = (useTabReselectRefresh as jest.Mock).mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01915","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":136,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01916","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":136,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01917","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":144,"code":"(useMatchesData as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01918","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":157,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01919","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":157,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01920","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":164,"code":"(useScrollOffsetTracker as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01921","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":169,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01922","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":169,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01923","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":171,"code":"const useTabReselectRefreshCall = (useTabReselectRefresh as jest.Mock).mock","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01924","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":179,"code":"(useMatchesData as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01925","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":193,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01926","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":193,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01927","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":198,"code":"(useMatchesData as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01928","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":211,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01929","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MatchesScreen.tab-reselect.test.tsx","line":211,"code":"render(<MatchesScreen navigation={{ navigate: jest.fn() } as any} />);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01930","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ModernSwipeScreen.theme.test.tsx","line":102,"code":"expect((theme.colors as any).status).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01931","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ModernSwipeScreen.theme.test.tsx","line":102,"code":"expect((theme.colors as any).status).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01932","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ModernSwipeScreen.theme.test.tsx","line":103,"code":"expect((theme.colors as any).status?.error).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01933","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ModernSwipeScreen.theme.test.tsx","line":103,"code":"expect((theme.colors as any).status?.error).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01934","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ModernSwipeScreen.theme.test.tsx","line":104,"code":"expect((theme.colors as any).status?.success).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01935","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/ModernSwipeScreen.theme.test.tsx","line":104,"code":"expect((theme.colors as any).status?.success).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01936","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":177,"code":"(matchesAPI.getMyPets as jest.Mock).mockResolvedValue(mockPets);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01937","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":178,"code":"(matchesAPI.deletePet as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01938","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":185,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01939","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":185,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01940","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":186,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01941","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":186,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01942","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":210,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01943","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":210,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01944","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":211,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01945","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":211,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01946","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":220,"code":"(matchesAPI.getMyPets as jest.Mock).mockResolvedValue([]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01947","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":225,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01948","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":225,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01949","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":226,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01950","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":226,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01951","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":245,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01952","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":245,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01953","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":246,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01954","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":246,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01955","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":259,"code":"(matchesAPI.getMyPets as jest.Mock).mockResolvedValue([]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01956","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":264,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01957","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":264,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01958","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":265,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01959","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":265,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01960","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":281,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01961","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":281,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01962","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":282,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01963","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":282,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01964","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":298,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01965","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":298,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01966","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":299,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01967","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":299,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01968","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":315,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01969","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":315,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01970","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":316,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01971","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":316,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01972","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":337,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01973","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":337,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01974","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":338,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01975","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":338,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01976","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":349,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01977","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":360,"code":"(matchesAPI.getMyPets as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01978","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":367,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01979","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":367,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01980","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":368,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01981","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":368,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01982","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":388,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01983","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":388,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01984","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":389,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01985","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":389,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01986","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":411,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01987","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":411,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01988","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":412,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01989","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":412,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01990","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":436,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01991","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":436,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01992","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":437,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01993","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":437,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01994","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":454,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01995","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":454,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01996","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":455,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-01997","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":455,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01998","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":466,"code":"it(\"shows photo count badge when pet has multiple photos\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-01999","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":476,"code":"(matchesAPI.getMyPets as jest.Mock).mockResolvedValue([","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02000","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":483,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02001","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":483,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02002","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":484,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02003","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":484,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02004","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":494,"code":"it(\"displays placeholder when pet has no photos\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02005","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":500,"code":"(matchesAPI.getMyPets as jest.Mock).mockResolvedValue([petWithoutPhotos]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02006","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":505,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02007","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":505,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02008","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":506,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02009","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":506,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02010","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":512,"code":"expect(getByText(\"🐕\")).toBeTruthy(); // Species emoji as placeholder","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02011","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":520,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02012","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":520,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02013","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":521,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02014","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":521,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02015","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":537,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02016","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":537,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02017","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":538,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02018","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":538,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02019","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":549,"code":"(matchesAPI.getMyPets as jest.Mock).mockResolvedValue([mockPets[0]]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02020","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":554,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02021","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":554,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02022","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":555,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02023","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":555,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02024","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":567,"code":"(matchesAPI.deletePet as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02025","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":574,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02026","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":574,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02027","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":575,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02028","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":575,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02029","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":586,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02030","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":607,"code":"navigation={mockNavigation as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02031","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":607,"code":"navigation={mockNavigation as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02032","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":608,"code":"route={mockRoute as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02033","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":608,"code":"route={mockRoute as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02034","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/MyPetsScreen.test.tsx","line":619,"code":"const alertCall = (Alert.alert as jest.Mock).mock.calls[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02035","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/UIDemoScreen.unit.test.tsx","line":66,"code":"<I18nextProvider i18n={mockI18n as any}>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02036","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/UIDemoScreen.unit.test.tsx","line":66,"code":"<I18nextProvider i18n={mockI18n as any}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02037","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/UIDemoScreen.unit.test.tsx","line":67,"code":"<ThemeProvider theme={mockTheme as any}>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02038","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/UIDemoScreen.unit.test.tsx","line":67,"code":"<ThemeProvider theme={mockTheme as any}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02039","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/UIDemoScreen.unit.test.tsx","line":396,"code":"it('has proper button titles', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02040","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/UIDemoScreen.unit.test.tsx","line":436,"code":"<I18nextProvider i18n={mockI18n as any}>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02041","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/UIDemoScreen.unit.test.tsx","line":436,"code":"<I18nextProvider i18n={mockI18n as any}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02042","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/UIDemoScreen.unit.test.tsx","line":437,"code":"<ThemeProvider theme={darkTheme as any}>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02043","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/UIDemoScreen.unit.test.tsx","line":437,"code":"<ThemeProvider theme={darkTheme as any}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02044","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/UIDemoScreen.unit.test.tsx","line":460,"code":"<I18nextProvider i18n={mockI18n as any}>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02045","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/UIDemoScreen.unit.test.tsx","line":460,"code":"<I18nextProvider i18n={mockI18n as any}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02046","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/navigation.int.test.tsx","line":47,"code":"<I18nextProvider i18n={mockI18n as any}>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02047","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/navigation.int.test.tsx","line":47,"code":"<I18nextProvider i18n={mockI18n as any}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02048","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/navigation.int.test.tsx","line":48,"code":"<ThemeProvider theme={mockTheme as any}>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02049","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/navigation.int.test.tsx","line":48,"code":"<ThemeProvider theme={mockTheme as any}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02050","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/test-utils.tsx","line":8,"code":"// @ts-expect-error - jest.requireActual is defined by jest","problem":"TypeScript suppression comment","evidence":"TypeScript suppressions hide type errors and should be avoided","fix":"Fix the underlying type issue instead of suppressing it","autofix":{"type":"manual","snippet":"Remove suppression and fix the type error"},"blast_radius":"Local","confidence":0.8,"tags":["typescript","suppression"],"owner":"mobile"}
{"id":"AUD-TYP-02051","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/test-utils.tsx","line":9,"code":"const actual = jest.requireActual(\"@react-navigation/native\") as typeof import(\"@react-navigation/native\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02052","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":34,"code":"'bg': 'bg', // was neutral[0]","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02053","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":35,"code":"'bgElevated': 'bgElevated', // was neutral[50]","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02054","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":36,"code":"'text': 'text', // was text.primary","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02055","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":37,"code":"'textMuted': 'textMuted', // was text.secondary","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02056","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":38,"code":"'primary': 'primary', // was primary[500]","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02057","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":39,"code":"'success': 'success', // was status.success","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02058","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":40,"code":"'warning': 'warning', // was status.warning","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02059","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":41,"code":"'danger': 'danger', // was status.error","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02060","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":42,"code":"'border': 'border', // was border.light","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02061","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":47,"code":"expect(typeof theme.colors[newName as keyof typeof theme.colors]).toBe('string');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02062","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":62,"code":"expect((theme.colors as any)[prop]).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02063","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":62,"code":"expect((theme.colors as any)[prop]).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02064","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":78,"code":"expect(typeof theme.spacing[size as keyof typeof theme.spacing]).toBe('number');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02065","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":85,"code":"expect((theme.spacing as any).typography).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02066","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":85,"code":"expect((theme.spacing as any).typography).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02067","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":86,"code":"expect((theme.spacing as any).fontSize).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02068","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":86,"code":"expect((theme.spacing as any).fontSize).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02069","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":95,"code":"expect((theme as any).radius).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02070","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":95,"code":"expect((theme as any).radius).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02071","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":246,"code":"expect(lighttheme.colors[color as keyof typeof lighttheme.colors])","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02072","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":247,"code":".toBe(darktheme.colors[color as keyof typeof darktheme.colors]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02073","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":258,"code":"expect(lighttheme.spacing[key as keyof typeof lighttheme.spacing])","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02074","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":259,"code":".toBe(darktheme.spacing[key as keyof typeof darktheme.spacing]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02075","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":270,"code":"expect(lighttheme.radius[key as keyof typeof lighttheme.radius])","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02076","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":271,"code":".toBe(darktheme.radius[key as keyof typeof darktheme.radius]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02077","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":301,"code":"noNeutralArray: !Array.isArray((theme.colors as any).neutral),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02078","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":301,"code":"noNeutralArray: !Array.isArray((theme.colors as any).neutral),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02079","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":302,"code":"noStatusProperty: !(theme.colors as any).status,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02080","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":302,"code":"noStatusProperty: !(theme.colors as any).status,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02081","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":303,"code":"noBorderRadiusProperty: !(theme as any).radius,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02082","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring-integration.test.tsx","line":303,"code":"noBorderRadiusProperty: !(theme as any).radius,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02083","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":212,"code":"expect(typeof theme.spacing[key as keyof typeof theme.spacing]).toBe('number');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02084","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":234,"code":"expect(typeof theme.radius[key as keyof typeof theme.radius]).toBe('number');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02085","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":291,"code":"expect((theme.colors as any).neutral).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02086","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":291,"code":"expect((theme.colors as any).neutral).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02087","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":292,"code":"expect((theme.colors as any).status).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02088","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":292,"code":"expect((theme.colors as any).status).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02089","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":293,"code":"expect((theme.colors as any).background).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02090","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":293,"code":"expect((theme.colors as any).background).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02091","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":294,"code":"expect((theme.colors as any).textSecondary).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02092","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":294,"code":"expect((theme.colors as any).textSecondary).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02093","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":323,"code":"expect((theme as any).radius).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02094","severity":"P2","category":"Type","file":"apps/mobile/src/screens/__tests__/theme-refactoring.test.tsx","line":323,"code":"expect((theme as any).radius).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02095","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":10,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02096","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":25,"code":"import { _adminAPI as adminAPI } from \"../../services/api\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02097","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":135,"code":"growth: (responseData.users as any)?.growth || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02098","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":135,"code":"growth: (responseData.users as any)?.growth || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02099","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":136,"code":"trend: ((responseData.users as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02100","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":136,"code":"trend: ((responseData.users as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02101","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":142,"code":"growth: (responseData.pets as any)?.growth || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02102","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":142,"code":"growth: (responseData.pets as any)?.growth || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02103","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":143,"code":"trend: ((responseData.pets as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02104","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":143,"code":"trend: ((responseData.pets as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02105","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":150,"code":"growth: (responseData.matches as any)?.growth || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02106","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":150,"code":"growth: (responseData.matches as any)?.growth || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02107","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":151,"code":"trend: ((responseData.matches as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02108","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":151,"code":"trend: ((responseData.matches as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02109","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":157,"code":"growth: (responseData.messages as any)?.growth || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02110","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":157,"code":"growth: (responseData.messages as any)?.growth || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02111","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":158,"code":"trend: ((responseData.messages as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02112","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":158,"code":"trend: ((responseData.messages as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02113","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.refactored.tsx","line":254,"code":"(navigation as { goBack: () => void }).goBack();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02114","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.tsx","line":7,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02115","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminAnalyticsScreen.tsx","line":44,"code":"(navigation as { goBack: () => void }).goBack();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02116","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminBillingScreen.tsx","line":80,"code":"const renderSubscriptionItem = ({ item }: { item: any }) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02117","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminChatsScreen.tsx","line":74,"code":"setMessages(dataArray as ChatMessage[]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02118","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminDashboardScreen.refactored.tsx","line":7,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02119","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminDashboardScreen.tsx","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02120","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminDashboardScreen.tsx","line":33,"code":"(navigation as { navigate: (screen: string) => void }).navigate(screen);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02121","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminSecurityScreen.refactored.tsx","line":7,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02122","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminSecurityScreen.refactored.tsx","line":50,"code":"const renderAlert = ({ item }: { item: any }) => (","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02123","severity":"P3","category":"Type","file":"apps/mobile/src/screens/admin/AdminSecurityScreen.refactored.tsx","line":55,"code":"console.log(\"Alert pressed:\", alert);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-02124","severity":"P3","category":"Type","file":"apps/mobile/src/screens/admin/AdminSecurityScreen.tsx","line":112,"code":"console.log(\"Alert pressed:\", alert.id);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-02125","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminServicesScreen.tsx","line":30,"code":"icon: string; // Ionicons name as string","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02126","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminServicesScreen.tsx","line":207,"code":"<Ionicons name={service.icon as any} size={24} color={service.color} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02127","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminServicesScreen.tsx","line":207,"code":"<Ionicons name={service.icon as any} size={24} color={service.color} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02128","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminUsersScreen.tsx","line":50,"code":"colors={theme.colors as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02129","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AdminUsersScreen.tsx","line":50,"code":"colors={theme.colors as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02130","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AnalyticsRealtimeScreen.tsx","line":16,"code":"const data = await request<{ events: Row[]; errors: any[] }>(\"/api/admin/analytics/realtime\", { method: \"GET\" });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02131","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AnalyticsRealtimeScreen.tsx","line":69,"code":"count: { fontVariant: [\"tabular-nums\"] as any },","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02132","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AnalyticsRealtimeScreen.tsx","line":69,"code":"count: { fontVariant: [\"tabular-nums\"] as any },","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02133","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AnalyticsRealtimeScreen.tsx","line":73,"code":"errorTs: { opacity: 0.6, marginTop: 2, fontVariant: [\"tabular-nums\"] as any },","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02134","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/AnalyticsRealtimeScreen.tsx","line":73,"code":"errorTs: { opacity: 0.6, marginTop: 2, fontVariant: [\"tabular-nums\"] as any },","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02135","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/components/KeyMetricsSection.tsx","line":42,"code":"const getTrendColor = (trend: \"up\" | \"down\" | \"stable\", theme: any): string => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02136","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":4,"code":"import { _adminAPI as adminAPI } from \"../../../../services/api\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02137","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":104,"code":"growth: (responseData.users as any)?.growth || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02138","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":104,"code":"growth: (responseData.users as any)?.growth || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02139","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":105,"code":"trend: ((responseData.users as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02140","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":105,"code":"trend: ((responseData.users as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02141","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":111,"code":"growth: (responseData.pets as any)?.growth || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02142","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":111,"code":"growth: (responseData.pets as any)?.growth || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02143","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":112,"code":"trend: ((responseData.pets as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02144","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":112,"code":"trend: ((responseData.pets as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02145","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":119,"code":"growth: (responseData.matches as any)?.growth || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02146","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":119,"code":"growth: (responseData.matches as any)?.growth || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02147","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":120,"code":"trend: ((responseData.matches as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02148","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":120,"code":"trend: ((responseData.matches as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02149","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":126,"code":"growth: (responseData.messages as any)?.growth || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02150","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":126,"code":"growth: (responseData.messages as any)?.growth || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02151","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":127,"code":"trend: ((responseData.messages as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02152","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/analytics/hooks/useAdminAnalytics.ts","line":127,"code":"trend: ((responseData.messages as any)?.trend as \"up\" | \"down\" | \"stable\") || \"stable\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02153","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/billing/hooks/useAdminBilling.ts","line":4,"code":"import { _adminAPI as adminAPI } from \"../../../../services/api\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02154","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/billing/hooks/useAdminBilling.ts","line":81,"code":"setSubscriptions(subscriptionsResponse.data.subscriptions as Subscription[]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02155","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/billing/hooks/useAdminBilling.ts","line":82,"code":"setMetrics(metricsResponse.data as BillingMetrics);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02156","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/dashboard/components/QuickActionsSection.tsx","line":101,"code":"<Ionicons name={action.icon as any} size={24} color=\"#FFFFFF\" />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02157","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/dashboard/components/QuickActionsSection.tsx","line":101,"code":"<Ionicons name={action.icon as any} size={24} color=\"#FFFFFF\" />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02158","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/dashboard/components/SystemHealthSection.tsx","line":30,"code":"const getStatusColor = (status: string, colors: any): string => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02159","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/dashboard/hooks/useAdminDashboard.ts","line":9,"code":"import { _adminAPI as adminAPI } from \"../../../../services/api\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02160","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/dashboard/hooks/useAdminDashboard.ts","line":30,"code":"setStats(statsResponse.data as AdminStats);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02161","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/dashboard/hooks/useAdminDashboard.ts","line":31,"code":"setSystemHealth(healthResponse.data as SystemHealth);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02162","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/security/components/SecurityAlertCard.tsx","line":76,"code":"<Ionicons name={getTypeIcon(alert.type) as any} size={20} color={colors.text} />","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02163","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/security/components/SecurityAlertCard.tsx","line":76,"code":"<Ionicons name={getTypeIcon(alert.type) as any} size={20} color={colors.text} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02164","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/security/hooks/useAdminSecurity.ts","line":7,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02165","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/security/hooks/useAdminSecurity.ts","line":10,"code":"import { _adminAPI as adminAPI } from \"../../../../services/api\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02166","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/security/hooks/useAdminSecurity.ts","line":56,"code":"setAlerts(alertsResponse.data.alerts as SecurityAlert[]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02167","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/security/hooks/useAdminSecurity.ts","line":57,"code":"setMetrics(metricsResponse.data as SecurityMetrics);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02168","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/uploads/hooks/useAdminUploads.ts","line":33,"code":"const uploads = (response.data as any)?.uploads || response.data;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02169","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/uploads/hooks/useAdminUploads.ts","line":33,"code":"const uploads = (response.data as any)?.uploads || response.data;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02170","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/verifications/hooks/useAdminVerifications.ts","line":57,"code":"const verifications = (response.data as any)?.verifications || response.data;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02171","severity":"P2","category":"Type","file":"apps/mobile/src/screens/admin/verifications/hooks/useAdminVerifications.ts","line":57,"code":"const verifications = (response.data as any)?.verifications || response.data;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02172","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionApplicationScreen.tsx","line":116,"code":"`Your application for ${petName} has been submitted. The owner will review it and get back to you soon.`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02173","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionContractScreen.tsx","line":253,"code":"\"The adoption contract has been generated and sent to both parties for review and signature.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02174","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionContractScreen.tsx","line":279,"code":"`The adoption contract for ${petName} has been sent to ${applicantName} for digital signature. You will be notified when it's signed.`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02175","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionContractScreen.tsx","line":355,"code":"contractTerms[item.key as keyof ContractTerms] as boolean","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02176","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionContractScreen.tsx","line":362,"code":"contractTerms[item.key as keyof ContractTerms]","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02177","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionContractScreen.tsx","line":400,"code":"contractTerms[item.key as keyof ContractTerms] as boolean","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02178","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionContractScreen.tsx","line":407,"code":"contractTerms[item.key as keyof ContractTerms]","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02179","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":2,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02180","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":33,"code":"import type { PetListing as PetListingFromHook } from \"../../hooks/screens/useAdoptionManagerScreen\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02181","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":87,"code":"const item = listing as Record<string, unknown>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02182","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":88,"code":"const id = (item.id ?? item._id ?? \"\") as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02183","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":92,"code":"name: (item.name as string) ?? \"Unknown Pet\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02184","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":93,"code":"species: (item.species as string) ?? \"Unknown\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02185","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":94,"code":"breed: (item.breed as string) ?? \"Unknown\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02186","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":96,"code":"status: VALID_LISTING_STATUSES.has(item.status as PetListing[\"status\"])","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02187","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":97,"code":"? (item.status as PetListing[\"status\"])","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02188","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":100,"code":"? (item.photos as string[])","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02189","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":113,"code":"const item = application as Record<string, unknown>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02190","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":114,"code":"const status = item.status as AdoptionApplication[\"status\"];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02191","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":117,"code":"id: (item.id ?? item._id ?? \"\") as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02192","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":118,"code":"petId: (item.petId ?? \"\") as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02193","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":120,"code":"(item.petName as string) ?? ((item.pet as { name?: string })?.name ?? \"Unknown\"),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02194","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":122,"code":"(item.applicantName as string) ??","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02195","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":123,"code":"((item.applicant as { name?: string })?.name ?? \"Pending Applicant\"),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02196","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":125,"code":"(item.applicantEmail as string) ??","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02197","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":126,"code":"((item.applicant as { email?: string })?.email ?? \"unknown@example.com\"),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02198","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":136,"code":"(item.experience as string) ??","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02199","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":137,"code":"((item.applicationData as { experience?: string })?.experience ?? \"\"),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02200","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":139,"code":"(item.livingSpace as string) ??","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02201","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":140,"code":"((item.applicationData as { livingSituation?: string })?.livingSituation ?? \"\"),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02202","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/AdoptionManagerScreen.tsx","line":144,"code":": ((item.applicationData as { references?: number })?.references ?? 0),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02203","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/ApplicationReviewScreen.tsx","line":5,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02204","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/ApplicationReviewScreen.tsx","line":340,"code":"setApplication({ ...application, status: newStatus as any });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02205","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/ApplicationReviewScreen.tsx","line":340,"code":"setApplication({ ...application, status: newStatus as any });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02206","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/ApplicationReviewScreen.tsx","line":532,"code":"<Text style={styles.lifestyleLabel}>Has Children</Text>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02207","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/ApplicationReviewScreen.tsx","line":538,"code":"<Text style={styles.lifestyleLabel}>Has Other Pets</Text>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02208","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/CreateListingScreen.tsx","line":5,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02209","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/CreateListingScreen.tsx","line":137,"code":"\"Your pet listing has been created successfully.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02210","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/CreateListingScreen.tsx","line":616,"code":"handleHealthToggle(key as keyof typeof formData.healthInfo);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02211","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/PetDetailsScreen.tsx","line":5,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02212","severity":"P2","category":"Type","file":"apps/mobile/src/screens/adoption/PetDetailsScreen.tsx","line":332,"code":"setPet({ ...pet, status: newStatus as PetDetails[\"status\"] });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02213","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/AICompatibilityScreen.original.tsx","line":9,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02214","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/AICompatibilityScreen.tsx","line":10,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02215","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/AICompatibilityScreen.tsx","line":283,"code":"\"These pets show promising compatibility with some areas that need attention.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02216","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/AIPhotoAnalyzerScreen.original.tsx","line":8,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02217","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/AIPhotoAnalyzerScreen.original.tsx","line":9,"code":"import * as ImagePicker from \"expo-image-picker\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02218","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/AIPhotoAnalyzerScreen.original.tsx","line":114,"code":"logger.error(\"Error picking image:\", { error: error as Error });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02219","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/AIPhotoAnalyzerScreen.original.tsx","line":150,"code":"logger.error(\"Error taking photo:\", { error: error as Error });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02220","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/AIPhotoAnalyzerScreen.original.tsx","line":219,"code":"logger.error(\"Photo analysis failed:\", { error: error as Error });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02221","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/AIPhotoAnalyzerScreen.refactored.tsx","line":153,"code":"width: 40, // Same width as back button to center title","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02222","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/AIPhotoAnalyzerScreen.tsx","line":153,"code":"width: 40, // Same width as back button to center title","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02223","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/compatibility/AnalysisResultsSection.tsx","line":124,"code":"const score = Math.round((breakdown as any)[category.key] * 100);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02224","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/compatibility/AnalysisResultsSection.tsx","line":124,"code":"const score = Math.round((breakdown as any)[category.key] * 100);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02225","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/compatibility/components/CompatibilityBreakdown.tsx","line":25,"code":"const getScoreColor = (score: number, colors: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02226","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/compatibility/components/CompatibilityInteractions.tsx","line":21,"code":"const getScoreColor = (score: number, colors: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02227","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/compatibility/components/CompatibilityScoreDisplay.tsx","line":21,"code":"const getScoreColor = (score: number, colors: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02228","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/compatibility/hooks/useCompatibilityAnalysis.ts","line":7,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02229","severity":"P2","category":"Type","file":"apps/mobile/src/screens/ai/compatibility/hooks/useCompatibilityAnalysis.ts","line":203,"code":"\"These pets show promising compatibility with some areas that need attention.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02230","severity":"P2","category":"Type","file":"apps/mobile/src/screens/calling/__tests__/ActiveCallScreen.test.tsx","line":51,"code":"localStream: {} as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02231","severity":"P2","category":"Type","file":"apps/mobile/src/screens/calling/__tests__/ActiveCallScreen.test.tsx","line":51,"code":"localStream: {} as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02232","severity":"P2","category":"Type","file":"apps/mobile/src/screens/calling/__tests__/ActiveCallScreen.test.tsx","line":52,"code":"remoteStream: {} as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02233","severity":"P2","category":"Type","file":"apps/mobile/src/screens/calling/__tests__/ActiveCallScreen.test.tsx","line":52,"code":"remoteStream: {} as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02234","severity":"P3","category":"Type","file":"apps/mobile/src/screens/calling/__tests__/IncomingCallScreen.test.tsx","line":50,"code":"console.log(\"IncomingCallScreen imported:\", typeof IncomingCallScreen);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-02235","severity":"P3","category":"Type","file":"apps/mobile/src/screens/calling/__tests__/IncomingCallScreen.test.tsx","line":51,"code":"console.log(\"IncomingCallScreen:\", IncomingCallScreen);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-02236","severity":"P2","category":"Type","file":"apps/mobile/src/screens/leaderboard/LeaderboardScreen.tsx","line":219,"code":"name={category.icon as never}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02237","severity":"P2","category":"Type","file":"apps/mobile/src/screens/live/LiveStreamPublisherScreen.tsx","line":18,"code":"const { streamId } = route.params as { streamId: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02238","severity":"P2","category":"Type","file":"apps/mobile/src/screens/live/LiveStreamViewerScreen.tsx","line":30,"code":"const { streamId } = route.params as { streamId: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02239","severity":"P2","category":"Type","file":"apps/mobile/src/screens/live/LiveStreamViewerScreen.tsx","line":124,"code":"videoTrack={videoTrack as any}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02240","severity":"P2","category":"Type","file":"apps/mobile/src/screens/live/LiveStreamViewerScreen.tsx","line":124,"code":"videoTrack={videoTrack as any}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02241","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/PetProfileSetupScreen.tsx","line":162,"code":"const getStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02242","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/PreferencesSetupScreen.tsx","line":360,"code":"option.key as keyof typeof preferences.notifications","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02243","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/PreferencesSetupScreen.tsx","line":369,"code":"option.key as keyof typeof preferences.notifications","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02244","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/PreferencesSetupScreen.tsx","line":410,"code":"const getStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02245","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/UserIntentScreen.tsx","line":3,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02246","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/UserIntentScreen.tsx","line":140,"code":"const handleIntentSelect = (intent: string, scaleValue: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02247","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/UserIntentScreen.tsx","line":368,"code":"const getStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02248","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/WelcomeScreen.tsx","line":27,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02249","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/WelcomeScreen.tsx","line":183,"code":"// Mark onboarding as complete","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02250","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/WelcomeScreen.tsx","line":519,"code":"const createLocalStyles = (colors: any): WelcomeStyles =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02251","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/pet-profile-setup/components/BasicInfoStep.tsx","line":13,"code":"updateFormData: (field: string, value: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02252","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/pet-profile-setup/components/HealthInfoStep.tsx","line":38,"code":"formData.healthInfo[option.key as keyof typeof formData.healthInfo] &&","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02253","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/pet-profile-setup/components/HealthInfoStep.tsx","line":47,"code":"!formData.healthInfo[option.key as keyof typeof formData.healthInfo],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02254","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/pet-profile-setup/components/HealthInfoStep.tsx","line":55,"code":"formData.healthInfo[option.key as keyof typeof formData.healthInfo] &&","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02255","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/pet-profile-setup/components/HealthInfoStep.tsx","line":73,"code":"const getStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02256","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/pet-profile-setup/components/PersonalityStep.tsx","line":13,"code":"updateFormData: (field: string, value: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02257","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/pet-profile-setup/components/PersonalityStep.tsx","line":98,"code":"const getStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02258","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/pet-profile-setup/components/PhysicalInfoStep.tsx","line":13,"code":"updateFormData: (field: string, value: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02259","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/pet-profile-setup/components/PhysicalInfoStep.tsx","line":91,"code":"const getStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02260","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/pet-profile-setup/hooks/usePetProfileSetup.ts","line":22,"code":"updateFormData: (field: string, value: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02261","severity":"P2","category":"Type","file":"apps/mobile/src/screens/onboarding/pet-profile-setup/hooks/usePetProfileSetup.ts","line":65,"code":"const updateFormData = (field: string, value: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02262","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/PremiumScreen.tsx","line":200,"code":"const getStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02263","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionManagerScreen.tsx","line":18,"code":"import { _subscriptionAPI as subscriptionApi } from \"../../services/api\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02264","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionManagerScreen.tsx","line":75,"code":"return response.json() as Promise<T>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02265","severity":"P1","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionManagerScreen.tsx","line":108,"code":").then((res) => res.json())) as UsageStats;","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-02266","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionManagerScreen.tsx","line":108,"code":").then((res) => res.json())) as UsageStats;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02267","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionManagerScreen.tsx","line":152,"code":"\"Your subscription has been canceled. You can continue using premium features until the end of your current billing period.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02268","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionManagerScreen.tsx","line":187,"code":"\"Your subscription has been successfully reactivated.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02269","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionManagerScreen.tsx","line":540,"code":"const getStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02270","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionSuccessScreen.tsx","line":5,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02271","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionSuccessScreen.tsx","line":25,"code":"const AnimatedCheckmark = ({ theme, styles }: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02272","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionSuccessScreen.tsx","line":87,"code":"} as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02273","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionSuccessScreen.tsx","line":87,"code":"} as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02274","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionSuccessScreen.tsx","line":108,"code":"const { sessionId } = (route.params as { sessionId?: string }) || {};","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02275","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/SubscriptionSuccessScreen.tsx","line":189,"code":"const getStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02276","severity":"P2","category":"Type","file":"apps/mobile/src/screens/premium/__tests__/PremiumScreen.test.tsx","line":153,"code":"it(\"has accessible labels for subscription tiers\", () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02277","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/ProfileHeaderSection.tsx","line":10,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02278","severity":"P1","category":"Type","file":"apps/mobile/src/screens/profile/components/ProfileStatsSection.tsx","line":50,"code":"matchesAPI.getMatches().catch(() => []),","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-02279","severity":"P1","category":"Type","file":"apps/mobile/src/screens/profile/components/ProfileStatsSection.tsx","line":51,"code":"matchesAPI.getUserProfile().catch(() => null),","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-02280","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":36,"code":"expect((theme.colors as any).status).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02281","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":36,"code":"expect((theme.colors as any).status).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02282","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":37,"code":"expect((theme.colors as any).status?.info).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02283","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":37,"code":"expect((theme.colors as any).status?.info).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02284","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":38,"code":"expect((theme.colors as any).status?.success).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02285","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":38,"code":"expect((theme.colors as any).status?.success).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02286","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":39,"code":"expect((theme.colors as any).status?.warning).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02287","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":39,"code":"expect((theme.colors as any).status?.warning).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02288","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":101,"code":"expect((theme.colors as any).neutral).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02289","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":101,"code":"expect((theme.colors as any).neutral).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02290","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":295,"code":"expect((theme.colors as any).status).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02291","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":295,"code":"expect((theme.colors as any).status).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02292","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":296,"code":"expect((theme.colors as any).status?.info).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02293","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":296,"code":"expect((theme.colors as any).status?.info).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02294","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":297,"code":"expect((theme.colors as any).status?.success).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02295","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":297,"code":"expect((theme.colors as any).status?.success).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02296","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":298,"code":"expect((theme.colors as any).status?.warning).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02297","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":298,"code":"expect((theme.colors as any).status?.warning).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02298","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":305,"code":"expect((theme.colors as any).neutral).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02299","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":305,"code":"expect((theme.colors as any).neutral).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02300","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":306,"code":"expect((theme.colors as any).neutral?.[0]).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02301","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":306,"code":"expect((theme.colors as any).neutral?.[0]).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02302","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":307,"code":"expect((theme.colors as any).neutral?.[900]).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02303","severity":"P2","category":"Type","file":"apps/mobile/src/screens/profile/components/__tests__/ProfileMenuSection.theme.test.tsx","line":307,"code":"expect((theme.colors as any).neutral?.[900]).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02304","severity":"P2","category":"Type","file":"apps/mobile/src/services/AccessibilityService.ts","line":187,"code":"const accessibilityModule = AccessibilityInfo as AccessibilityInfo & {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02305","severity":"P2","category":"Type","file":"apps/mobile/src/services/AssetPreloader.ts","line":6,"code":"import * as Font from \"expo-font\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02306","severity":"P2","category":"Type","file":"apps/mobile/src/services/AssetPreloader.ts","line":7,"code":"import * as SplashScreen from \"expo-splash-screen\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02307","severity":"P2","category":"Type","file":"apps/mobile/src/services/AssetPreloader.ts","line":102,"code":"source as ImageSourcePropType,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02308","severity":"P1","category":"Type","file":"apps/mobile/src/services/AssetPreloader.ts","line":106,"code":".then(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-02309","severity":"P1","category":"Type","file":"apps/mobile/src/services/AssetPreloader.ts","line":109,"code":".catch((error: unknown) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-02310","severity":"P1","category":"Type","file":"apps/mobile/src/services/AssetPreloader.ts","line":143,"code":".then(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-02311","severity":"P1","category":"Type","file":"apps/mobile/src/services/AssetPreloader.ts","line":146,"code":".catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-02312","severity":"P2","category":"Type","file":"apps/mobile/src/services/AttachmentClassifierService.ts","line":80,"code":"width: params.metadata.width as number,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02313","severity":"P2","category":"Type","file":"apps/mobile/src/services/AttachmentClassifierService.ts","line":81,"code":"height: params.metadata.height as number,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02314","severity":"P2","category":"Type","file":"apps/mobile/src/services/AttachmentClassifierService.ts","line":87,"code":"attachmentMetadata.duration = params.metadata.duration as number;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02315","severity":"P2","category":"Type","file":"apps/mobile/src/services/AttachmentClassifierService.ts","line":145,"code":"const width = metadata?.width as number | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02316","severity":"P2","category":"Type","file":"apps/mobile/src/services/AttachmentClassifierService.ts","line":146,"code":"const height = metadata?.height as number | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02317","severity":"P2","category":"Type","file":"apps/mobile/src/services/AttachmentClassifierService.ts","line":173,"code":"const mimeType = metadata?.mimeType as string | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02318","severity":"P2","category":"Type","file":"apps/mobile/src/services/AttachmentClassifierService.ts","line":234,"code":"const size = metadata?.size as number | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02319","severity":"P2","category":"Type","file":"apps/mobile/src/services/AttachmentClassifierService.ts","line":247,"code":"const width = metadata?.width as number | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02320","severity":"P2","category":"Type","file":"apps/mobile/src/services/AttachmentClassifierService.ts","line":248,"code":"const height = metadata?.height as number | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02321","severity":"P2","category":"Type","file":"apps/mobile/src/services/AuthService.ts","line":6,"code":"import * as SecureStore from \"expo-secure-store\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02322","severity":"P2","category":"Type","file":"apps/mobile/src/services/AuthService.ts","line":7,"code":"import * as LocalAuthentication from \"expo-local-authentication\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02323","severity":"P2","category":"Type","file":"apps/mobile/src/services/AuthService.ts","line":8,"code":"import * as Keychain from \"react-native-keychain\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02324","severity":"P2","category":"Type","file":"apps/mobile/src/services/AuthService.ts","line":376,"code":"const credentials = JSON.parse(storedCredentials) as BiometricCredentials;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02325","severity":"P2","category":"Type","file":"apps/mobile/src/services/AuthService.ts","line":581,"code":"return userData ? (JSON.parse(userData) as User) : null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02326","severity":"P2","category":"Type","file":"apps/mobile/src/services/AuthService.ts","line":701,"code":"// Data was stored in SecureStore due to Keychain failure","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02327","severity":"P2","category":"Type","file":"apps/mobile/src/services/AuthService.ts","line":731,"code":"// Data was stored in SecureStore","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02328","severity":"P2","category":"Type","file":"apps/mobile/src/services/AuthService.ts","line":745,"code":"// Don't throw here as this is cleanup","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02329","severity":"P2","category":"Type","file":"apps/mobile/src/services/AuthService.ts","line":798,"code":"// Don't throw here as this is cleanup","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02330","severity":"P2","category":"Type","file":"apps/mobile/src/services/BiometricService.ts","line":5,"code":"import * as LocalAuthentication from \"expo-local-authentication\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02331","severity":"P2","category":"Type","file":"apps/mobile/src/services/BiometricService.ts","line":6,"code":"import * as SecureStore from \"expo-secure-store\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02332","severity":"P2","category":"Type","file":"apps/mobile/src/services/BiometricService.ts","line":326,"code":"this.keystorePreference = JSON.parse(stored) as KeystorePreference;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02333","severity":"P2","category":"Type","file":"apps/mobile/src/services/ImageCompressionService.ts","line":5,"code":"import * as ImageManipulator from \"expo-image-manipulator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02334","severity":"P2","category":"Type","file":"apps/mobile/src/services/ImageCompressionService.ts","line":6,"code":"import * as FileSystem from \"expo-file-system\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02335","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":101,"code":"const cached = this.getCachedData(cacheKey) as LeaderboardResponse | null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02336","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":107,"code":"// Cache was checked above, continue with API call","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02337","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":112,"code":"...(filter as Record<string, string>),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02338","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":132,"code":"const data = (await response.json()) as LeaderboardResponse;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02339","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":150,"code":"const cached = this.getCachedData(cacheKey) as {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02340","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":177,"code":"const data = (await response.json()) as {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02341","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":221,"code":"const data = (await response.json()) as LeaderboardCategory[];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02342","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":237,"code":"const cached = this.getCachedData(cacheKey) as Badge[] | null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02343","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":257,"code":"const data = (await response.json()) as Badge[];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02344","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":273,"code":"const cached = this.getCachedData(cacheKey) as LeaderboardStats | null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02345","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":296,"code":"const data = (await response.json()) as LeaderboardStats;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02346","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":390,"code":"const data = (await response.json()) as {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02347","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":414,"code":"const cached = this.getCachedData(cacheKey) as LeaderboardEntry[] | null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02348","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":443,"code":"const data = (await response.json()) as LeaderboardEntry[];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02349","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":466,"code":"const cached = this.getCachedData(cacheKey) as {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02350","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":496,"code":"const data = (await response.json()) as {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02351","severity":"P2","category":"Type","file":"apps/mobile/src/services/LeaderboardService.ts","line":539,"code":"const data = (await response.json()) as { shareUrl: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02352","severity":"P2","category":"Type","file":"apps/mobile/src/services/MatchingService.ts","line":83,"code":"// Return empty array as fallback","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02353","severity":"P2","category":"Type","file":"apps/mobile/src/services/MatchingService.ts","line":370,"code":"* Check if user can undo (has premium or remaining undos)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02354","severity":"P2","category":"Type","file":"apps/mobile/src/services/OfflineSyncService.ts","line":212,"code":"this.queue = JSON.parse(storedQueue) as OfflineQueueItem[];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02355","severity":"P1","category":"Type","file":"apps/mobile/src/services/OfflineSyncService.ts","line":245,"code":"void NetInfo.fetch().then((state: NetInfoState) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-02356","severity":"P2","category":"Type","file":"apps/mobile/src/services/OfflineSyncService.ts","line":380,"code":"// For now, return current time as placeholder","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02357","severity":"P2","category":"Type","file":"apps/mobile/src/services/PremiumService.ts","line":100,"code":"* Check if user has active premium subscription","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02358","severity":"P2","category":"Type","file":"apps/mobile/src/services/PremiumService.ts","line":315,"code":"return limits[feature] as boolean;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02359","severity":"P2","category":"Type","file":"apps/mobile/src/services/SecureAPIService.ts","line":5,"code":"import { fetch as sslFetch } from \"react-native-ssl-pinning\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02360","severity":"P2","category":"Type","file":"apps/mobile/src/services/SecureAPIService.ts","line":131,"code":"...(fetchOptions.headers as Record<string, string> | undefined),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02361","severity":"P2","category":"Type","file":"apps/mobile/src/services/SecureAPIService.ts","line":165,"code":"method: requestConfig.method as \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02362","severity":"P2","category":"Type","file":"apps/mobile/src/services/SecureAPIService.ts","line":166,"code":"} as any)) as SSLResponse;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02363","severity":"P2","category":"Type","file":"apps/mobile/src/services/SecureAPIService.ts","line":166,"code":"} as any)) as SSLResponse;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02364","severity":"P2","category":"Type","file":"apps/mobile/src/services/SecureAPIService.ts","line":174,"code":"const data = (await response.json()) as T;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02365","severity":"P2","category":"Type","file":"apps/mobile/src/services/SecureAPIService.ts","line":275,"code":"await sslFetch(`https://${domain}`, testConfig as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02366","severity":"P2","category":"Type","file":"apps/mobile/src/services/SecureAPIService.ts","line":275,"code":"await sslFetch(`https://${domain}`, testConfig as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02367","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":8,"code":"RTCIceCandidate as RTCIceCandidateImpl,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02368","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":9,"code":"RTCSessionDescription as RTCSessionDescriptionImpl,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02369","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":167,"code":"this.handleIncomingCall(callData as CallData);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02370","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":172,"code":"void this.handleCallAnswered(data as CallAnsweredData);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02371","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":182,"code":"void this.handleOffer(data as WebRTCSignalingData);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02372","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":186,"code":"void this.handleAnswer(data as WebRTCSignalingData);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02373","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":190,"code":"void this.handleIceCandidate(data as WebRTCSignalingData);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02374","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":213,"code":"this.localStream = await mediaDevices.getUserMedia(constraints as MediaStreamConstraints);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02375","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":292,"code":"this.localStream = await mediaDevices.getUserMedia(constraints as MediaStreamConstraints);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02376","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":313,"code":"// Notify caller that call was answered","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02377","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":479,"code":"const peerConnection = this.peerConnection as RTCPeerConnection & {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02378","severity":"P2","category":"Type","file":"apps/mobile/src/services/WebRTCService.ts","line":525,"code":"const extendedPeerConnection = this.peerConnection as RTCPeerConnection & {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02379","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":44,"code":"const mockAccessibilityInfo = AccessibilityInfo as jest.Mocked<typeof AccessibilityInfo>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02380","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":53,"code":"(AccessibilityService as any).instance = undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02381","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":53,"code":"(AccessibilityService as any).instance = undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02382","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":211,"code":"(accessibilityService as any).config.isGrayscaleEnabled = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02383","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":211,"code":"(accessibilityService as any).config.isGrayscaleEnabled = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02384","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":215,"code":"(accessibilityService as any).config.isGrayscaleEnabled = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02385","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":215,"code":"(accessibilityService as any).config.isGrayscaleEnabled = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02386","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":216,"code":"(accessibilityService as any).config.isInvertColorsEnabled = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02387","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":216,"code":"(accessibilityService as any).config.isInvertColorsEnabled = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02388","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":258,"code":"expect((mockAccessibilityInfo as any).setAccessibilityFocus).toHaveBeenCalledWith(mockRef);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02389","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":258,"code":"expect((mockAccessibilityInfo as any).setAccessibilityFocus).toHaveBeenCalledWith(mockRef);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02390","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":262,"code":"(mockAccessibilityInfo as any).setAccessibilityFocus = jest.fn(() => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02391","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":262,"code":"(mockAccessibilityInfo as any).setAccessibilityFocus = jest.fn(() => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02392","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":291,"code":"(accessibilityService as any).config.preferredContentSizeCategory = category;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02393","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":291,"code":"(accessibilityService as any).config.preferredContentSizeCategory = category;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02394","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":316,"code":"(accessibilityService as any).config.isGrayscaleEnabled = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02395","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":316,"code":"(accessibilityService as any).config.isGrayscaleEnabled = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02396","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":348,"code":"expect((accessibilityService as any).listeners).toContain(listener);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02397","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":348,"code":"expect((accessibilityService as any).listeners).toContain(listener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02398","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":352,"code":"expect((accessibilityService as any).listeners).not.toContain(listener);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02399","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":352,"code":"expect((accessibilityService as any).listeners).not.toContain(listener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02400","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":426,"code":"expect((mockAccessibilityInfo as any).setAccessibilityFocus).toHaveBeenCalledWith(mockRef);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02401","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AccessibilityService.test.ts","line":426,"code":"expect((mockAccessibilityInfo as any).setAccessibilityFocus).toHaveBeenCalledWith(mockRef);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02402","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":7,"code":"import * as Keychain from 'react-native-keychain';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02403","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":8,"code":"import * as SecureStore from 'expo-secure-store';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02404","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":9,"code":"import * as LocalAuthentication from 'expo-local-authentication';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02405","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":36,"code":"(api.request as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02406","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":37,"code":"(Keychain.setGenericPassword as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02407","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":38,"code":"(Keychain.getGenericPassword as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02408","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":39,"code":"(SecureStore.setItemAsync as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02409","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":40,"code":"(LocalAuthentication.authenticateAsync as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02410","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":43,"code":"(Keychain.setGenericPassword as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02411","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":44,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValue({ password: 'test-value' });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02412","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":45,"code":"(Keychain.resetGenericPassword as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02413","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":47,"code":"(SecureStore.setItemAsync as jest.Mock).mockResolvedValue(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02414","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":48,"code":"(SecureStore.getItemAsync as jest.Mock).mockResolvedValue('test-value');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02415","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":49,"code":"(SecureStore.deleteItemAsync as jest.Mock).mockResolvedValue(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02416","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":51,"code":"(LocalAuthentication.hasHardwareAsync as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02417","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":52,"code":"(LocalAuthentication.isEnrolledAsync as jest.Mock).mockResolvedValue(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02418","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":53,"code":"(LocalAuthentication.supportedAuthenticationTypesAsync as jest.Mock).mockResolvedValue([","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02419","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":56,"code":"(LocalAuthentication.authenticateAsync as jest.Mock).mockResolvedValue({ success: true });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02420","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":74,"code":"(Keychain.setGenericPassword as jest.Mock).mockRejectedValueOnce(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02421","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":87,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02422","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":126,"code":"(api.request as jest.Mock).mockResolvedValueOnce(mockAuthResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02423","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":141,"code":"(api.request as jest.Mock).mockRejectedValueOnce(new Error('Login failed'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02424","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":152,"code":"(api.request as jest.Mock).mockResolvedValueOnce(mockAuthResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02425","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":179,"code":"(api.request as jest.Mock).mockResolvedValueOnce(mockAuthResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02426","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":213,"code":"(api.request as jest.Mock).mockResolvedValueOnce({ success: true });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02427","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":225,"code":"(api.request as jest.Mock).mockRejectedValueOnce(new Error('Network error'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02428","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":249,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02429","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":253,"code":"(api.request as jest.Mock).mockResolvedValueOnce(mockRefreshResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02430","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":265,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02431","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":275,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02432","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":279,"code":"(api.request as jest.Mock).mockRejectedValueOnce(new Error('Token expired'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02433","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":297,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02434","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":316,"code":"(LocalAuthentication.hasHardwareAsync as jest.Mock).mockResolvedValueOnce(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02435","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":336,"code":"(Keychain.getGenericPassword as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02436","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":345,"code":"(api.request as jest.Mock).mockResolvedValueOnce(mockAuthResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02437","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":367,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02438","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":387,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02439","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":392,"code":"const authService2 = authService as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02440","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":392,"code":"const authService2 = authService as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02441","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":400,"code":"(Keychain.getGenericPassword as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02442","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":404,"code":"const authService2 = authService as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02443","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":404,"code":"const authService2 = authService as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02444","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":422,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02445","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":441,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02446","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":451,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02447","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":463,"code":"(api.request as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02448","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":478,"code":"(api.request as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02449","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":512,"code":"(Keychain.getGenericPassword as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02450","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":531,"code":"(Keychain.getGenericPassword as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02451","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":543,"code":"(api.request as jest.Mock).mockRejectedValueOnce(new Error('Network error'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02452","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":554,"code":"(Keychain.getGenericPassword as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02453","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/AuthService.test.ts","line":564,"code":"(Keychain.getGenericPassword as jest.Mock).mockRejectedValueOnce(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02454","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/BiometricService.test.ts","line":14,"code":"import * as LocalAuthentication from 'expo-local-authentication';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02455","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/BiometricService.test.ts","line":15,"code":"import * as SecureStore from 'expo-secure-store';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02456","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/BiometricService.test.ts","line":28,"code":"const mockLocalAuth = LocalAuthentication as jest.Mocked<typeof LocalAuthentication>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02457","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/BiometricService.test.ts","line":29,"code":"const mockSecureStore = SecureStore as jest.Mocked<typeof SecureStore>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02458","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/BiometricService.test.ts","line":37,"code":"it('should check if device has hardware support', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02459","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/ImageCompressionService.test.ts","line":17,"code":"import * as ImageManipulator from 'expo-image-manipulator';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02460","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/ImageCompressionService.test.ts","line":18,"code":"import * as FileSystem from 'expo-file-system';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02461","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/ImageCompressionService.test.ts","line":45,"code":"const mockImageManipulator = ImageManipulator as jest.Mocked<typeof ImageManipulator>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02462","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/ImageCompressionService.test.ts","line":46,"code":"const mockFileSystem = FileSystem as jest.Mocked<typeof FileSystem>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02463","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/ImageCompressionService.test.ts","line":386,"code":"const formatMethod = (service as any).formatFileSize.bind(service);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02464","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/ImageCompressionService.test.ts","line":386,"code":"const formatMethod = (service as any).formatFileSize.bind(service);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02465","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":37,"code":"const mockAuthService = authService as jest.Mocked<typeof authService>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02466","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":55,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02467","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":55,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02468","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":68,"code":"expect((testService as any).baseUrl).toBe('https://test-api.com');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02469","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":68,"code":"expect((testService as any).baseUrl).toBe('https://test-api.com');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02470","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":78,"code":"expect((testService as any).baseUrl).toBe('https://api.pawfectmatch.com');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02471","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":78,"code":"expect((testService as any).baseUrl).toBe('https://api.pawfectmatch.com');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02472","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":169,"code":"(service as any).cacheExpiration = 1; // 1ms","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02473","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":169,"code":"(service as any).cacheExpiration = 1; // 1ms","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02474","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":431,"code":"(service as any).setCachedData('leaderboard-test-1-20', {});","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02475","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":431,"code":"(service as any).setCachedData('leaderboard-test-1-20', {});","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02476","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":432,"code":"(service as any).setCachedData('user-rank-matches', {});","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02477","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":432,"code":"(service as any).setCachedData('user-rank-matches', {});","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02478","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":433,"code":"(service as any).setCachedData('pet-stats-pet123', {});","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02479","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":433,"code":"(service as any).setCachedData('pet-stats-pet123', {});","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02480","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":437,"code":"// Check cache was cleared","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02481","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":438,"code":"expect((service as any).getCachedData('leaderboard-test-1-20')).toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02482","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":438,"code":"expect((service as any).getCachedData('leaderboard-test-1-20')).toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02483","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":439,"code":"expect((service as any).getCachedData('user-rank-matches')).toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02484","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":439,"code":"expect((service as any).getCachedData('user-rank-matches')).toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02485","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":440,"code":"expect((service as any).getCachedData('pet-stats-pet123')).toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02486","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":440,"code":"expect((service as any).getCachedData('pet-stats-pet123')).toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02487","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":691,"code":"(service as any).setCachedData('test-key', 'test-data');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02488","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":691,"code":"(service as any).setCachedData('test-key', 'test-data');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02489","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":692,"code":"expect((service as any).getCachedData('test-key')).not.toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02490","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":692,"code":"expect((service as any).getCachedData('test-key')).not.toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02491","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":696,"code":"expect((service as any).cache.size).toBe(0);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02492","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":696,"code":"expect((service as any).cache.size).toBe(0);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02493","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":700,"code":"(service as any).setCachedData('leaderboard-weekly', 'data1');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02494","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":700,"code":"(service as any).setCachedData('leaderboard-weekly', 'data1');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02495","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":701,"code":"(service as any).setCachedData('user-rank-weekly', 'data2');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02496","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":701,"code":"(service as any).setCachedData('user-rank-weekly', 'data2');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02497","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":702,"code":"(service as any).setCachedData('other-data', 'data3');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02498","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":702,"code":"(service as any).setCachedData('other-data', 'data3');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02499","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":704,"code":"(service as any).clearCacheByPattern('weekly');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02500","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":704,"code":"(service as any).clearCacheByPattern('weekly');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02501","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":706,"code":"expect((service as any).getCachedData('leaderboard-weekly')).toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02502","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":706,"code":"expect((service as any).getCachedData('leaderboard-weekly')).toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02503","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":707,"code":"expect((service as any).getCachedData('user-rank-weekly')).toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02504","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":707,"code":"expect((service as any).getCachedData('user-rank-weekly')).toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02505","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":708,"code":"expect((service as any).getCachedData('other-data')).not.toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02506","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":708,"code":"expect((service as any).getCachedData('other-data')).not.toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02507","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":712,"code":"(service as any).cacheExpiration = 1; // 1ms","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02508","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":712,"code":"(service as any).cacheExpiration = 1; // 1ms","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02509","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":714,"code":"(service as any).setCachedData('test-key', 'test-data');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02510","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":714,"code":"(service as any).setCachedData('test-key', 'test-data');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02511","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":715,"code":"expect((service as any).getCachedData('test-key')).not.toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02512","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":715,"code":"expect((service as any).getCachedData('test-key')).not.toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02513","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":719,"code":"expect((service as any).getCachedData('test-key')).toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02514","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/LeaderboardService.test.ts","line":719,"code":"expect((service as any).getCachedData('test-key')).toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02515","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/MatchingService.test.ts","line":18,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02516","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":54,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02517","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":55,"code":"const mockNetInfo = NetInfo as jest.Mocked<typeof NetInfo>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02518","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":56,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02519","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":71,"code":"(OfflineSyncService as any).instance = undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02520","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":71,"code":"(OfflineSyncService as any).instance = undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02521","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":83,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02522","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":135,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02523","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":135,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02524","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":136,"code":"expect((service as any).isInitialized).toBe(true);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02525","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":136,"code":"expect((service as any).isInitialized).toBe(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02526","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":144,"code":"expect((service as any).isInitialized).toBe(true);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02527","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":144,"code":"expect((service as any).isInitialized).toBe(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02528","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":145,"code":"expect((service as any).queue).toEqual([]);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02529","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":145,"code":"expect((service as any).queue).toEqual([]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02530","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":149,"code":"(service as any).isInitialized = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02531","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":149,"code":"(service as any).isInitialized = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02532","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":175,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02533","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":175,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02534","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":177,"code":"const queuedItem = (service as any).queue[0];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02535","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":177,"code":"const queuedItem = (service as any).queue[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02536","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":206,"code":"const queuedItem = (service as any).queue[0];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02537","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":206,"code":"const queuedItem = (service as any).queue[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02538","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":214,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02539","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":214,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02540","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":223,"code":"expect((service as any).queue).toHaveLength(0);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02541","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":223,"code":"expect((service as any).queue).toHaveLength(0);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02542","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":227,"code":"(service as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02543","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":227,"code":"(service as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02544","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":232,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02545","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":232,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02546","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":245,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02547","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":245,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02548","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":247,"code":"const queuedItem = (service as any).queue[0];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02549","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":247,"code":"const queuedItem = (service as any).queue[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02550","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":262,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02551","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":262,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02552","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":263,"code":"(service as any).syncInProgress = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02553","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":263,"code":"(service as any).syncInProgress = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02554","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":264,"code":"(service as any).queue = [","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02555","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":264,"code":"(service as any).queue = [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02556","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":288,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02557","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":288,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02558","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":289,"code":"(service as any).queue = [","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02559","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":289,"code":"(service as any).queue = [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02560","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":308,"code":"expect((service as any).queue).toHaveLength(0);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02561","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":308,"code":"expect((service as any).queue).toHaveLength(0);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02562","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":312,"code":"(service as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02563","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":312,"code":"(service as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02564","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":324,"code":"(service as any).queue = [","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02565","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":324,"code":"(service as any).queue = [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02566","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":332,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02567","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":332,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02568","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":333,"code":"expect((service as any).queue[0].id).toBe('item1');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02569","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":333,"code":"expect((service as any).queue[0].id).toBe('item1');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02570","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":344,"code":"(service as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02571","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":344,"code":"(service as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02572","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":352,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02573","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":354,"code":"expect((service as any).isOnline).toBe(true);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02574","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":354,"code":"expect((service as any).isOnline).toBe(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02575","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":358,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02576","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":358,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02577","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":365,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02578","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":367,"code":"expect((service as any).isOnline).toBe(false);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02579","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":367,"code":"expect((service as any).isOnline).toBe(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02580","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":371,"code":"(service as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02581","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":371,"code":"(service as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02582","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":372,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02583","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":372,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02584","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":379,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02585","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":388,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02586","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":388,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02587","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":392,"code":"(service as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02588","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":392,"code":"(service as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02589","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":393,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02590","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":393,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02591","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":395,"code":"await (service as any).processQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02592","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":395,"code":"await (service as any).processQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02593","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":401,"code":"(service as any).syncInProgress = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02594","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":401,"code":"(service as any).syncInProgress = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02595","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":402,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02596","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":402,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02597","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":404,"code":"await (service as any).processQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02598","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":404,"code":"await (service as any).processQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02599","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":410,"code":"(service as any).queue = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02600","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":410,"code":"(service as any).queue = [];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02601","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":412,"code":"await (service as any).processQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02602","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":412,"code":"await (service as any).processQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02603","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":418,"code":"(service as any).queue = [","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02604","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":418,"code":"(service as any).queue = [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02605","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":426,"code":"await (service as any).processQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02606","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":426,"code":"await (service as any).processQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02607","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":434,"code":"(service as any).queue = [","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02608","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":434,"code":"(service as any).queue = [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02609","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":440,"code":"await (service as any).processQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02610","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":440,"code":"await (service as any).processQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02611","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":442,"code":"expect((service as any).queue).toHaveLength(0);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02612","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":442,"code":"expect((service as any).queue).toHaveLength(0);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02613","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":450,"code":"(service as any).queue = [","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02614","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":450,"code":"(service as any).queue = [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02615","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":456,"code":"await (service as any).processQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02616","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":456,"code":"await (service as any).processQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02617","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":458,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02618","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":458,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02619","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":459,"code":"expect((service as any).queue[0].retryCount).toBe(1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02620","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":459,"code":"expect((service as any).queue[0].retryCount).toBe(1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02621","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":463,"code":"(service as any).queue = [","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02622","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":463,"code":"(service as any).queue = [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02623","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":469,"code":"await (service as any).processQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02624","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":469,"code":"await (service as any).processQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02625","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":471,"code":"expect((service as any).queue).toHaveLength(0);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02626","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":471,"code":"expect((service as any).queue).toHaveLength(0);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02627","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":491,"code":"await (service as any).processQueueItem(item);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02628","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":491,"code":"await (service as any).processQueueItem(item);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02629","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":511,"code":"await (service as any).processQueueItem(item);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02630","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":511,"code":"await (service as any).processQueueItem(item);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02631","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":546,"code":"await (service as any).processQueueItem(putItem);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02632","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":546,"code":"await (service as any).processQueueItem(putItem);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02633","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":552,"code":"await (service as any).processQueueItem(deleteItem);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02634","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":552,"code":"await (service as any).processQueueItem(deleteItem);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02635","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":563,"code":"method: 'PATCH' as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02636","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":563,"code":"method: 'PATCH' as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02637","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":571,"code":"await expect((service as any).processQueueItem(item)).rejects.toThrow(","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02638","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":571,"code":"await expect((service as any).processQueueItem(item)).rejects.toThrow(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02639","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":587,"code":"expect((service as any).syncListeners).toContain(listener);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02640","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":587,"code":"expect((service as any).syncListeners).toContain(listener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02641","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":591,"code":"expect((service as any).syncListeners).not.toContain(listener);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02642","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":591,"code":"expect((service as any).syncListeners).not.toContain(listener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02643","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":599,"code":"(service as any).notifyListeners();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02644","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":599,"code":"(service as any).notifyListeners();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02645","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":613,"code":"(service as any).notifyListeners();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02646","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":613,"code":"(service as any).notifyListeners();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02647","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":625,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02648","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":625,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02649","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":626,"code":"(service as any).syncInProgress = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02650","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":626,"code":"(service as any).syncInProgress = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02651","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":627,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02652","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":627,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02653","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":638,"code":"(service as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02654","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":638,"code":"(service as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02655","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":639,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02656","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":639,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02657","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":647,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02658","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":647,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02659","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":648,"code":"(service as any).syncInProgress = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02660","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":648,"code":"(service as any).syncInProgress = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02661","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":649,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02662","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":649,"code":"(service as any).queue = [{ id: 'test', type: 'api', endpoint: '/test', method: 'GET', data: {}, timestamp: Date.now(), retryCount: 0, priority: 'normal', onConflict: 'overwrite' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02663","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":675,"code":"await (service as any).loadQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02664","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":675,"code":"await (service as any).loadQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02665","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":677,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02666","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":677,"code":"expect((service as any).queue).toHaveLength(1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02667","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":678,"code":"expect((service as any).queue[0].id).toBe('stored-item');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02668","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":678,"code":"expect((service as any).queue[0].id).toBe('stored-item');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02669","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":684,"code":"await (service as any).loadQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02670","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":684,"code":"await (service as any).loadQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02671","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":686,"code":"expect((service as any).queue).toEqual([]);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02672","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":686,"code":"expect((service as any).queue).toEqual([]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02673","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":690,"code":"(service as any).queue = [","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02674","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":690,"code":"(service as any).queue = [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02675","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":704,"code":"await (service as any).persistQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02676","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":704,"code":"await (service as any).persistQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02677","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":715,"code":"await (service as any).persistQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02678","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":715,"code":"await (service as any).persistQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02679","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":740,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02680","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":740,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02681","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":741,"code":"(service as any).queue = [","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02682","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":741,"code":"(service as any).queue = [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02683","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":747,"code":"await (service as any).processQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02684","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":747,"code":"await (service as any).processQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02685","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":775,"code":"await expect((service as any).processQueueItem(item)).rejects.toThrow();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02686","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":775,"code":"await expect((service as any).processQueueItem(item)).rejects.toThrow();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02687","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":790,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02688","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":790,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02689","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":791,"code":"(service as any).queue = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02690","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":791,"code":"(service as any).queue = [];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02691","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":793,"code":"await (service as any).processQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02692","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":793,"code":"await (service as any).processQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02693","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":795,"code":"expect((service as any).syncInProgress).toBe(false);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02694","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":795,"code":"expect((service as any).syncInProgress).toBe(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02695","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":799,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02696","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":799,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02697","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":800,"code":"(service as any).queue = [","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02698","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":800,"code":"(service as any).queue = [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02699","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":806,"code":"(service as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02700","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":806,"code":"(service as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02701","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":810,"code":"await (service as any).processQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02702","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":810,"code":"await (service as any).processQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02703","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":812,"code":"expect((service as any).syncInProgress).toBe(false);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02704","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":812,"code":"expect((service as any).syncInProgress).toBe(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02705","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":816,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02706","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":816,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02707","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":831,"code":"(service as any).queue = largeQueue;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02708","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":831,"code":"(service as any).queue = largeQueue;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02709","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":834,"code":"await (service as any).processQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02710","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":834,"code":"await (service as any).processQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02711","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":837,"code":"expect((service as any).queue).toHaveLength(0);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02712","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":837,"code":"expect((service as any).queue).toHaveLength(0);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02713","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":843,"code":"await (service as any).loadQueue();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02714","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":843,"code":"await (service as any).loadQueue();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02715","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":845,"code":"expect((service as any).queue).toEqual([]);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02716","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":845,"code":"expect((service as any).queue).toEqual([]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02717","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":849,"code":"(service as any).isOnline = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02718","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":849,"code":"(service as any).isOnline = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02719","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":861,"code":"expect((service as any).queue).toHaveLength(4);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02720","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/OfflineSyncService.test.ts","line":861,"code":"expect((service as any).queue).toHaveLength(4);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02721","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/PremiumService.test.ts","line":26,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02722","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/PremiumService.test.ts","line":34,"code":"it('should check if user has active subscription successfully', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02723","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":30,"code":"const mockSslFetch = sslFetch as jest.MockedFunction<typeof sslFetch>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02724","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":45,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02725","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":45,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02726","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":89,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02727","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":89,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02728","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":118,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02729","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":118,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02730","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":137,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02731","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":137,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02732","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":156,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02733","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":156,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02734","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":183,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02735","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":183,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02736","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":226,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02737","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":226,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02738","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":254,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02739","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":254,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02740","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":269,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02741","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":269,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02742","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":282,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02743","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":282,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02744","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":332,"code":"json: async () => ({ id: '123', name: 'test' } as ResponseType),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02745","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":334,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02746","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":334,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02747","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":349,"code":"expect((error as SecureAPIError).message).toBe('Wrapper error');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02748","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/SecureAPIService.test.ts","line":350,"code":"expect((error as SecureAPIError).originalError).toBe(originalError);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02749","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.basic.test.ts","line":49,"code":"const mockInCallManager = InCallManager as jest.Mocked<typeof InCallManager>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02750","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.basic.test.ts","line":50,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02751","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.basic.test.ts","line":106,"code":"(WebRTCService as any).localStream = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02752","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.basic.test.ts","line":106,"code":"(WebRTCService as any).localStream = {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02753","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.basic.test.ts","line":116,"code":"(WebRTCService as any).callState = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02754","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.basic.test.ts","line":116,"code":"(WebRTCService as any).callState = {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02755","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.simple.test.ts","line":16,"code":"const mockInCallManager = InCallManager as jest.Mocked<typeof InCallManager>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02756","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.simple.test.ts","line":17,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02757","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":96,"code":"(RTCPeerConnection as jest.Mock).mockImplementation(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02758","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":99,"code":"(mediaDevices.getUserMedia as jest.Mock).mockResolvedValue(mockMediaStream);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02759","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":151,"code":"mockMediaStream.getTracks.mockReturnValue([mockAudioTrack as any]);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02760","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":151,"code":"mockMediaStream.getTracks.mockReturnValue([mockAudioTrack as any]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02761","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":175,"code":"mockAudioTrack as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02762","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":175,"code":"mockAudioTrack as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02763","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":176,"code":"mockVideoTrack as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02764","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":176,"code":"mockVideoTrack as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02765","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":195,"code":"(mediaDevices.getUserMedia as jest.Mock).mockRejectedValue(error);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02766","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":268,"code":"mockMediaStream.getAudioTracks.mockReturnValue([mockAudioTrack as any]);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02767","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":268,"code":"mockMediaStream.getAudioTracks.mockReturnValue([mockAudioTrack as any]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02768","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":279,"code":"mockMediaStream.getVideoTracks.mockReturnValue([mockVideoTrack as any]);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02769","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":279,"code":"mockMediaStream.getVideoTracks.mockReturnValue([mockVideoTrack as any]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02770","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":293,"code":"mockMediaStream.getVideoTracks.mockReturnValue([mockVideoTrack as any]);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02771","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":293,"code":"mockMediaStream.getVideoTracks.mockReturnValue([mockVideoTrack as any]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02772","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":319,"code":"mockMediaStream.getTracks.mockReturnValue([mockTrack as any]);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02773","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/WebRTCService.test.ts","line":319,"code":"mockMediaStream.getTracks.mockReturnValue([mockTrack as any]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02774","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminAPI.test.ts","line":45,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02775","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminAPI.test.ts","line":45,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02776","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":41,"code":"import { _adminAPI as adminAPI } from '../adminAPI';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02777","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":44,"code":"const mockAdminAPI = adminAPI as jest.Mocked<typeof adminAPI>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02778","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":45,"code":"const mockLogger = logger as jest.Mocked<typeof logger>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02779","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":61,"code":"const createCacheKey = (global as any).createCacheKey;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02780","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":61,"code":"const createCacheKey = (global as any).createCacheKey;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02781","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":77,"code":"const createCacheKey = (global as any).createCacheKey;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02782","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":77,"code":"const createCacheKey = (global as any).createCacheKey;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02783","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":97,"code":"const createCacheKey = (global as any).createCacheKey;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02784","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":97,"code":"const createCacheKey = (global as any).createCacheKey;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02785","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":110,"code":"const isCacheValid = (global as any).isCacheValid;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02786","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":110,"code":"const isCacheValid = (global as any).isCacheValid;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02787","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":123,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02788","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":123,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02789","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":151,"code":"const mapUser = (global as any).mapUser;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02790","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":151,"code":"const mapUser = (global as any).mapUser;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02791","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":186,"code":"const mapUser = (global as any).mapUser;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02792","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":186,"code":"const mapUser = (global as any).mapUser;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02793","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":221,"code":"const mapUser = (global as any).mapUser;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02794","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":221,"code":"const mapUser = (global as any).mapUser;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02795","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":256,"code":"const mapResponse = (global as any).mapResponse;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02796","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":256,"code":"const mapResponse = (global as any).mapResponse;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02797","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":275,"code":"const mapResponse = (global as any).mapResponse;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02798","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":275,"code":"const mapResponse = (global as any).mapResponse;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02799","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":331,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02800","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":331,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02801","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":337,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02802","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":337,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02803","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":368,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02804","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":368,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02805","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":423,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02806","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":423,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02807","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":453,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02808","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":453,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02809","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":472,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02810","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":472,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02811","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":502,"code":"it('should handle unban action (same as activate)', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02812","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":567,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02813","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":567,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02814","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":578,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02815","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":578,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02816","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":619,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02817","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":619,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02818","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":777,"code":"mockAdminAPI.getUsers.mockResolvedValueOnce(response as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02819","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":777,"code":"mockAdminAPI.getUsers.mockResolvedValueOnce(response as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02820","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":789,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02821","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":789,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02822","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":799,"code":"const isCacheValid = (global as any).isCacheValid;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02823","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":799,"code":"const isCacheValid = (global as any).isCacheValid;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02824","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":808,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02825","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":808,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02826","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":841,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02827","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":841,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02828","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":853,"code":"const cache = (global as any).cache;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02829","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":853,"code":"const cache = (global as any).cache;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02830","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":861,"code":"expect((global as any).cache.size).toBe(0);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02831","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/adminUsersService.test.ts","line":861,"code":"expect((global as any).cache.size).toBe(0);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02832","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/ai-api.test.ts","line":277,"code":"(serviceError as any).response = { status: 503 };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02833","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/ai-api.test.ts","line":277,"code":"(serviceError as any).response = { status: 503 };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02834","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.simple.test.ts","line":22,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02835","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":32,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02836","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":133,"code":"} as any)).rejects.toThrow();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02837","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":133,"code":"} as any)).rejects.toThrow();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02838","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":139,"code":"} as any)).rejects.toThrow();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02839","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":139,"code":"} as any)).rejects.toThrow();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02840","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":145,"code":"} as any)).rejects.toThrow();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02841","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":145,"code":"} as any)).rejects.toThrow();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02842","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":608,"code":"expect((results[0] as any).value).toBe('Success bio');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02843","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":608,"code":"expect((results[0] as any).value).toBe('Success bio');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02844","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":611,"code":"expect((results[1] as any).reason.message).toBe('AI failed');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02845","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":611,"code":"expect((results[1] as any).reason.message).toBe('AI failed');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02846","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":614,"code":"expect((results[2] as any).value).toBe('Success2 bio');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02847","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":614,"code":"expect((results[2] as any).value).toBe('Success2 bio');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02848","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":674,"code":"const petA: any = { id: 'pet1', name: 'Buddy' };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02849","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":675,"code":"const petB: any = { id: 'pet2', name: 'Luna' };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02850","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":770,"code":"} as BioGenerationParams & { customField: string; extraData: any };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02851","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/aiService.test.ts","line":770,"code":"} as BioGenerationParams & { customField: string; extraData: any };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02852","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/analyticsService.test.ts","line":31,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02853","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/analyticsService.test.ts","line":156,"code":"await track('null_event', null as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02854","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/analyticsService.test.ts","line":156,"code":"await track('null_event', null as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02855","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/analyticsService.test.ts","line":210,"code":"trackScreenView(undefined as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02856","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/analyticsService.test.ts","line":210,"code":"trackScreenView(undefined as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02857","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":37,"code":"(apiClient.get as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02858","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":53,"code":"(apiClient.post as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02859","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":79,"code":"(apiClient.put as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02860","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":105,"code":"(apiClient.delete as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02861","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":118,"code":"(apiClient.get as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02862","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":137,"code":"(apiClient.post as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02863","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":155,"code":"(apiClient.get as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02864","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":162,"code":"it('should throw error when response has no data', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02865","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":168,"code":"(apiClient.get as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02866","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":200,"code":"(apiClient.post as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02867","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":207,"code":"// Verify sanitized body was sent (truncated)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02868","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":213,"code":"(apiClient.post as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02869","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":236,"code":"(apiClient.get as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02870","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":251,"code":"(apiClient.get as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02871","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":266,"code":"(apiClient.post as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02872","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":283,"code":"(apiClient.post as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02873","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":299,"code":"(apiClient.delete as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02874","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":313,"code":"(apiClient.delete as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02875","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":328,"code":"(apiClient.get as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02876","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":345,"code":"(apiClient.get as jest.Mock).mockRejectedValueOnce(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02877","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":355,"code":"(apiClient.get as jest.Mock).mockRejectedValueOnce(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02878","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":366,"code":"(error as any).response = { status: 401 };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02879","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":366,"code":"(error as any).response = { status: 401 };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02880","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/api.test.ts","line":367,"code":"(apiClient.get as jest.Mock).mockRejectedValueOnce(error);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02881","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":36,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02882","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":37,"code":"const mockAxios = axios as jest.Mocked<typeof axios>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02883","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":38,"code":"const mockNetInfo = NetInfo as jest.Mocked<typeof NetInfo>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02884","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":39,"code":"const mockUnifiedAPIClient = UnifiedAPIClient as jest.Mocked<typeof UnifiedAPIClient>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02885","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":58,"code":"mockAxios.create.mockReturnValue(mockAxiosInstance as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02886","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":58,"code":"mockAxios.create.mockReturnValue(mockAxiosInstance as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02887","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":77,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02888","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":84,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02889","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":84,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02890","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":165,"code":"expect((client as any).token).toBe(token);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02891","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":165,"code":"expect((client as any).token).toBe(token);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02892","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":172,"code":"expect((client as any).token).toBe('token'); // Still sets in memory","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02893","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":172,"code":"expect((client as any).token).toBe('token'); // Still sets in memory","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02894","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":178,"code":"expect((client as any).token).toBe('test-token');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02895","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":178,"code":"expect((client as any).token).toBe('test-token');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02896","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":183,"code":"expect((client as any).token).toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02897","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":183,"code":"expect((client as any).token).toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02898","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":191,"code":"expect((client as any).token).toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02899","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":191,"code":"expect((client as any).token).toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02900","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":283,"code":"let responseInterceptor: (error: any) => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02901","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":306,"code":"expect((client as any).token).toBeNull();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02902","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":306,"code":"expect((client as any).token).toBeNull();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02903","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":358,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02904","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":370,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02905","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":380,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02906","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":426,"code":"(client as any).networkUnsubscribe = mockUnsubscribe;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02907","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":426,"code":"(client as any).networkUnsubscribe = mockUnsubscribe;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02908","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":435,"code":"(client as any).networkUnsubscribe = undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02909","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/apiClient.test.ts","line":435,"code":"(client as any).networkUnsubscribe = undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02910","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":8,"code":"import * as FileSystem from 'expo-file-system';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02911","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":42,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02912","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":58,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Failed to send reaction'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02913","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":75,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02914","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":92,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02915","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":116,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02916","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":136,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02917","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":151,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Upload failed'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02918","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":170,"code":"(request as jest.Mock).mockResolvedValueOnce(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02919","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":184,"code":"(request as jest.Mock).mockResolvedValueOnce(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02920","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":198,"code":"(request as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02921","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":219,"code":"chatService.sendVoiceNote('match-123', {} as FormData, 5)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02922","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":226,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Upload failed'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02923","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":241,"code":"(request as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02924","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":246,"code":"(FileSystem.uploadAsync as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02925","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":282,"code":"(request as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02926","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":287,"code":"(FileSystem.uploadAsync as jest.Mock).mockRejectedValueOnce(new Error('S3 upload failed'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02927","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":298,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Presign failed'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02928","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":321,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02929","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":333,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Network error'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02930","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":341,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Match not found'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02931","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":355,"code":"(request as jest.Mock).mockResolvedValue(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02932","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/chatService.test.ts","line":375,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02933","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/communityAPI.test.ts","line":37,"code":"const mockApiClient = apiClient as jest.Mocked<typeof apiClient>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02934","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/communityAPI.test.ts","line":38,"code":"const mockLogger = logger as jest.Mocked<typeof logger>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02935","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":19,"code":"import * as FileSystem from 'expo-file-system';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02936","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":49,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02937","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":50,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02938","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":51,"code":"const mockProcessImageForUpload = processImageForUpload as jest.MockedFunction<typeof processImageForUpload>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02939","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":52,"code":"const mockCheckUploadQuota = checkUploadQuota as jest.MockedFunction<typeof checkUploadQuota>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02940","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":53,"code":"const mockUploadWithRetry = uploadWithRetry as jest.MockedFunction<typeof uploadWithRetry>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02941","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":54,"code":"const mockPickAndProcessImage = pickAndProcessImage as jest.MockedFunction<typeof pickAndProcessImage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02942","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":55,"code":"const mockCaptureAndProcessImage = captureAndProcessImage as jest.MockedFunction<typeof captureAndProcessImage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02943","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":56,"code":"const mockFileSystem = FileSystem as jest.Mocked<typeof FileSystem>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02944","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":71,"code":"(EnhancedUploadService as any).instance = undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02945","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":71,"code":"(EnhancedUploadService as any).instance = undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02946","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":99,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02947","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":99,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02948","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":227,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02949","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":227,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02950","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":542,"code":"mockFetch.mockResolvedValueOnce({ ok: true } as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02951","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":542,"code":"mockFetch.mockResolvedValueOnce({ ok: true } as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02952","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":545,"code":"mockFetch.mockResolvedValueOnce({ ok: false } as any); // Second upload fails","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02953","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":545,"code":"mockFetch.mockResolvedValueOnce({ ok: false } as any); // Second upload fails","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02954","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":547,"code":"mockFetch.mockResolvedValueOnce({ ok: true } as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02955","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":547,"code":"mockFetch.mockResolvedValueOnce({ ok: true } as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02956","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":630,"code":"const blob = await (service as any).fileUriToBlob(uri);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02957","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":630,"code":"const blob = await (service as any).fileUriToBlob(uri);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02958","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":640,"code":"await expect((service as any).fileUriToBlob('invalid-uri')).rejects.toThrow('File read failed');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02959","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":640,"code":"await expect((service as any).fileUriToBlob('invalid-uri')).rejects.toThrow('File read failed');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02960","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":646,"code":"const blob = await (service as any).fileUriToBlob('empty-file');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02961","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":646,"code":"const blob = await (service as any).fileUriToBlob('empty-file');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02962","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":763,"code":"} as ProcessedImage;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02963","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":815,"code":"mockFetch.mockResolvedValue({ ok: false } as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02964","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":815,"code":"mockFetch.mockResolvedValue({ ok: false } as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02965","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":838,"code":"await expect(service.retryUpload(mockProcessedImage, 'invalid' as any)).rejects.toThrow('Invalid retry params');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02966","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/enhancedUploadService.test.ts","line":838,"code":"await expect(service.retryUpload(mockProcessedImage, 'invalid' as any)).rejects.toThrow('Invalid retry params');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02967","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":37,"code":"const mockAlert = Alert.alert as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02968","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":233,"code":"const message = (errorHandler as any).getUserFriendlyMessage(error);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02969","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":233,"code":"const message = (errorHandler as any).getUserFriendlyMessage(error);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02970","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":246,"code":"const message = (errorHandler as any).getUserFriendlyMessage(error);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02971","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":246,"code":"const message = (errorHandler as any).getUserFriendlyMessage(error);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02972","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":247,"code":"expect(message).toBe('Your session has expired. Please log in again.');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02973","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":259,"code":"const message = (errorHandler as any).getUserFriendlyMessage(error);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02974","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":259,"code":"const message = (errorHandler as any).getUserFriendlyMessage(error);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02975","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":272,"code":"const message = (errorHandler as any).getUserFriendlyMessage(error);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02976","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":272,"code":"const message = (errorHandler as any).getUserFriendlyMessage(error);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02977","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":285,"code":"const message = (errorHandler as any).getUserFriendlyMessage(error);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02978","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":285,"code":"const message = (errorHandler as any).getUserFriendlyMessage(error);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02979","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":286,"code":"expect(message).toBe('The requested resource was not found.');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02980","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":293,"code":"const message = (errorHandler as any).getUserFriendlyMessage(userFriendlyError);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02981","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":293,"code":"const message = (errorHandler as any).getUserFriendlyMessage(userFriendlyError);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02982","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":301,"code":"const message = (errorHandler as any).getUserFriendlyMessage(unknownError);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02983","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":301,"code":"const message = (errorHandler as any).getUserFriendlyMessage(unknownError);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02984","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":309,"code":"const message = (errorHandler as any).getUserFriendlyMessage(longError);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02985","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":309,"code":"const message = (errorHandler as any).getUserFriendlyMessage(longError);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02986","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":317,"code":"const message = (errorHandler as any).getUserFriendlyMessage(errorWithoutMessage);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02987","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":317,"code":"const message = (errorHandler as any).getUserFriendlyMessage(errorWithoutMessage);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02988","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":335,"code":"expect((error as any).code).toBe('VALIDATION_ERROR');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02989","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":335,"code":"expect((error as any).code).toBe('VALIDATION_ERROR');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02990","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":342,"code":"expect((error as any).code).toBeUndefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02991","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":342,"code":"expect((error as any).code).toBeUndefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02992","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":412,"code":"(errorHandler as any).showUserNotification('Test Title', 'Test Message');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02993","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":412,"code":"(errorHandler as any).showUserNotification('Test Title', 'Test Message');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02994","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":423,"code":"(errorHandler as any).showUserNotification(longTitle, longMessage);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02995","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":423,"code":"(errorHandler as any).showUserNotification(longTitle, longMessage);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02996","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":431,"code":"(errorHandler as any).showUserNotification('', '');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02997","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":431,"code":"(errorHandler as any).showUserNotification('', '');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-02998","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":447,"code":"(errorHandler as any).logError(error, context);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-02999","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":447,"code":"(errorHandler as any).logError(error, context);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03000","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":465,"code":"(errorHandler as any).logError(error, context);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03001","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":465,"code":"(errorHandler as any).logError(error, context);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03002","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":488,"code":"circular: {} as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03003","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":488,"code":"circular: {} as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03004","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":495,"code":"(errorHandler as any).logError(error, context);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03005","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":495,"code":"(errorHandler as any).logError(error, context);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03006","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":530,"code":"metadata: null as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03007","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":530,"code":"metadata: null as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03008","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":590,"code":"expect(mockAlert).toHaveBeenCalledWith('Error', 'The requested resource was not found.');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03009","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":644,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03010","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":644,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03011","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":739,"code":"errorHandler.handleError(null as any, context);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03012","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":739,"code":"errorHandler.handleError(null as any, context);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03013","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":740,"code":"errorHandler.handleError(undefined as any, context);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03014","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/errorHandler.test.ts","line":740,"code":"errorHandler.handleError(undefined as any, context);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03015","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":44,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03016","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":64,"code":"(request as jest.Mock).mockRejectedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03017","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":78,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Server error'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03018","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":89,"code":"(request as jest.Mock).mockRejectedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03019","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":103,"code":"(request as jest.Mock).mockRejectedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03020","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":124,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03021","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":135,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Network error'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03022","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":144,"code":"(request as jest.Mock).mockRejectedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03023","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":166,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03024","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":182,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03025","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":190,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Network error'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03026","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":205,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03027","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":219,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03028","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":240,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03029","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":268,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03030","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":292,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Export failed'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03031","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":309,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03032","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":328,"code":"(request as jest.Mock).mockResolvedValueOnce(mockExportStatus);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03033","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":345,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Download failed'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03034","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":351,"code":"(request as jest.Mock).mockRejectedValueOnce(new Error('Export not found'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03035","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":362,"code":"(request as jest.Mock).mockRejectedValueOnce(timeoutError);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03036","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":378,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03037","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":393,"code":"(request as jest.Mock).mockResolvedValue(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03038","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/gdprService.test.ts","line":414,"code":"(request as jest.Mock).mockResolvedValueOnce(mockResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03039","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":17,"code":"const mockFetch = fetch as jest.MockedFunction<typeof fetch>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03040","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":38,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03041","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":50,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03042","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":68,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03043","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":91,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03044","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":103,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03045","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":121,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03046","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":148,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03047","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":158,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03048","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":169,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03049","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":191,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03050","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":208,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03051","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":225,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03052","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":236,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03053","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":254,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03054","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":268,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03055","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":282,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03056","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":294,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03057","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":307,"code":"} as Response)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03058","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":311,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03059","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":326,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03060","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":341,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03061","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/homeAPI.test.ts","line":356,"code":"} as Response);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03062","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/mapActivityService.simple.test.ts","line":44,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03063","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/mapActivityService.simple.test.ts","line":218,"code":"activity: activity as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03064","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/mapActivityService.simple.test.ts","line":218,"code":"activity: activity as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03065","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/mapActivityService.test.ts","line":17,"code":"import * as Location from 'expo-location';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03066","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/mapActivityService.test.ts","line":36,"code":"const mockLocation = Location as jest.Mocked<typeof Location>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03067","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/mapActivityService.test.ts","line":37,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03068","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/mapActivityService.test.ts","line":541,"code":"expect((results[1] as any).reason.message).toBe('Activity 2 failed');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03069","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/mapActivityService.test.ts","line":541,"code":"expect((results[1] as any).reason.message).toBe('Activity 2 failed');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03070","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":19,"code":"import * as Device from 'expo-device';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03071","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":20,"code":"import * as Notifications from 'expo-notifications';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03072","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":75,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03073","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":76,"code":"const mockDevice = Device as jest.Mocked<typeof Device>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03074","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":77,"code":"const mockNotifications = Notifications as jest.Mocked<typeof Notifications>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03075","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":78,"code":"const mockApi = require('../api').api as jest.Mocked<typeof require('../api').api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03076","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":543,"code":"expect((service as any).getSoundForType('match')).toBe('match_sound.wav');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03077","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":543,"code":"expect((service as any).getSoundForType('match')).toBe('match_sound.wav');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03078","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":544,"code":"expect((service as any).getSoundForType('message')).toBe('message_sound.wav');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03079","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":544,"code":"expect((service as any).getSoundForType('message')).toBe('message_sound.wav');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03080","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":545,"code":"expect((service as any).getSoundForType('like')).toBe('like_sound.wav');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03081","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":545,"code":"expect((service as any).getSoundForType('like')).toBe('like_sound.wav');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03082","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":546,"code":"expect((service as any).getSoundForType('super_like')).toBe('like_sound.wav');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03083","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":546,"code":"expect((service as any).getSoundForType('super_like')).toBe('like_sound.wav');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03084","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":547,"code":"expect((service as any).getSoundForType('unknown')).toBe('default_sound.wav');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03085","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":547,"code":"expect((service as any).getSoundForType('unknown')).toBe('default_sound.wav');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03086","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":555,"code":"const deviceId = await (service as any).getDeviceId();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03087","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":555,"code":"const deviceId = await (service as any).getDeviceId();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03088","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":565,"code":"const deviceId = await (service as any).getDeviceId();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03089","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":565,"code":"const deviceId = await (service as any).getDeviceId();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03090","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":572,"code":"await (service as any).registerTokenWithBackend('test-token', 'device-123');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03091","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":572,"code":"await (service as any).registerTokenWithBackend('test-token', 'device-123');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03092","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":616,"code":"(service as any).expoPushToken = 'test-token';","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03093","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":616,"code":"(service as any).expoPushToken = 'test-token';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03094","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":617,"code":"(service as any).notificationListener = { remove: jest.fn() };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03095","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":617,"code":"(service as any).notificationListener = { remove: jest.fn() };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03096","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":618,"code":"(service as any).responseListener = { remove: jest.fn() };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03097","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":618,"code":"(service as any).responseListener = { remove: jest.fn() };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03098","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":626,"code":"expect((service as any).notificationListener.remove).toHaveBeenCalled();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03099","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":626,"code":"expect((service as any).notificationListener.remove).toHaveBeenCalled();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03100","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":627,"code":"expect((service as any).responseListener.remove).toHaveBeenCalled();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03101","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":627,"code":"expect((service as any).responseListener.remove).toHaveBeenCalled();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03102","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":631,"code":"(service as any).expoPushToken = 'test-token';","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03103","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/notifications.test.ts","line":631,"code":"(service as any).expoPushToken = 'test-token';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03104","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":22,"code":"import * as Sentry from '@sentry/react-native';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03105","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":53,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03106","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":54,"code":"const mockSentry = Sentry as jest.Mocked<typeof Sentry>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03107","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":55,"code":"const mockNetInfo = NetInfo as jest.Mocked<typeof NetInfo>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03108","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":56,"code":"const mockLogger = logger as jest.Mocked<typeof logger>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03109","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":57,"code":"const mockPerformanceMonitor = performanceMonitor as jest.Mocked<typeof performanceMonitor>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03110","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":66,"code":"(ObservabilityService as any).instance = undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03111","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":66,"code":"(ObservabilityService as any).instance = undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03112","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":75,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03113","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":94,"code":"const config = (service as any).config;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03114","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":94,"code":"const config = (service as any).config;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03115","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":122,"code":"(service as any).config.enableErrorTracking = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03116","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":122,"code":"(service as any).config.enableErrorTracking = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03117","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":182,"code":"(service as any).config.enablePerformanceTracking = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03118","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":182,"code":"(service as any).config.enablePerformanceTracking = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03119","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":302,"code":"(service as any).config.enableErrorTracking = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03120","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":302,"code":"(service as any).config.enableErrorTracking = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03121","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":389,"code":"(service as any).config.enableSecurityMonitoring = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03122","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":389,"code":"(service as any).config.enableSecurityMonitoring = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03123","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":450,"code":"(service as any).config.enableAnalytics = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03124","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":450,"code":"(service as any).config.enableAnalytics = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03125","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":711,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03126","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":727,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03127","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":794,"code":"(service as any).networkUnsubscribe = mockUnsubscribe;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03128","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":794,"code":"(service as any).networkUnsubscribe = mockUnsubscribe;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03129","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":814,"code":"(service as any).config = { ...(service as any).config, ...newConfig };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03130","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":814,"code":"(service as any).config = { ...(service as any).config, ...newConfig };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03131","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":816,"code":"expect((service as any).config.enablePerformanceTracking).toBe(false);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03132","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":816,"code":"expect((service as any).config.enablePerformanceTracking).toBe(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03133","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":817,"code":"expect((service as any).config.enableAnalytics).toBe(false);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03134","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":817,"code":"expect((service as any).config.enableAnalytics).toBe(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03135","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":818,"code":"expect((service as any).config.sampleRate).toBe(0.5);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03136","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":818,"code":"expect((service as any).config.sampleRate).toBe(0.5);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03137","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":822,"code":"(service as any).config.enablePerformanceTracking = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03138","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":822,"code":"(service as any).config.enablePerformanceTracking = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03139","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":823,"code":"(service as any).config.enableAnalytics = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03140","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":823,"code":"(service as any).config.enableAnalytics = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03141","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":824,"code":"(service as any).config.enableErrorTracking = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03142","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":824,"code":"(service as any).config.enableErrorTracking = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03143","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":825,"code":"(service as any).config.enableSecurityMonitoring = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03144","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":825,"code":"(service as any).config.enableSecurityMonitoring = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03145","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":854,"code":"expect((service as any).config.environment).toBe('development');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03146","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":854,"code":"expect((service as any).config.environment).toBe('development');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03147","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":858,"code":"expect((service as any).config.sampleRate).toBe(1.0); // 100% sampling in dev","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03148","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":858,"code":"expect((service as any).config.sampleRate).toBe(1.0); // 100% sampling in dev","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03149","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":863,"code":"(global as any).__DEV__ = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03150","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":863,"code":"(global as any).__DEV__ = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03151","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":866,"code":"expect((prodService as any).config.environment).toBe('production');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03152","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":866,"code":"expect((prodService as any).config.environment).toBe('production');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03153","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":868,"code":"(global as any).__DEV__ = true; // Reset","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03154","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":868,"code":"(global as any).__DEV__ = true; // Reset","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03155","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":909,"code":"networkListener(null as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03156","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":909,"code":"networkListener(null as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03157","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":910,"code":"networkListener(undefined as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03158","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":910,"code":"networkListener(undefined as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03159","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":948,"code":"service.trackAnalytics('', null as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03160","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":948,"code":"service.trackAnalytics('', null as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03161","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":949,"code":"service.trackInteraction('', '', '', null as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03162","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":949,"code":"service.trackInteraction('', '', '', null as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03163","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":950,"code":"service.trackSecurity(null as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03164","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/observability.test.ts","line":950,"code":"service.trackSecurity(null as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03165","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":25,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03166","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":26,"code":"const mockNetInfo = NetInfo as jest.Mocked<typeof NetInfo>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03167","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":27,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03168","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":43,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03169","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":43,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03170","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":60,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03171","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":60,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03172","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":93,"code":"const offlineData = (newService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03173","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":93,"code":"const offlineData = (newService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03174","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":103,"code":"(offlineService as any).offlineData.pets = pets;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03175","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":103,"code":"(offlineService as any).offlineData.pets = pets;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03176","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":111,"code":"(offlineService as any).offlineData.user = user;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03177","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":111,"code":"(offlineService as any).offlineData.user = user;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03178","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":131,"code":"(offlineService as any).offlineData.user = offlineUser;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03179","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":131,"code":"(offlineService as any).offlineData.user = offlineUser;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03180","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":142,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03181","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":142,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03182","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":159,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03183","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":159,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03184","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":177,"code":"(offlineService as any).isSyncing = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03185","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":177,"code":"(offlineService as any).isSyncing = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03186","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":178,"code":"(offlineService as any).offlineData.lastSync = '2024-01-01T00:00:00Z';","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03187","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":178,"code":"(offlineService as any).offlineData.lastSync = '2024-01-01T00:00:00Z';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03188","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":192,"code":"(offlineService as any).offlineData.pets = [{ id: 'pet1' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03189","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":192,"code":"(offlineService as any).offlineData.pets = [{ id: 'pet1' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03190","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":193,"code":"(offlineService as any).offlineData.user = { id: 'user1' };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03191","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":193,"code":"(offlineService as any).offlineData.user = { id: 'user1' };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03192","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":198,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03193","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.simple.test.ts","line":198,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03194","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":54,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03195","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":55,"code":"const mockNetInfo = NetInfo as jest.Mocked<typeof NetInfo>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03196","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":56,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03197","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":57,"code":"const mockLogger = logger as jest.Mocked<typeof logger>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03198","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":73,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03199","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":85,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03200","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":85,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03201","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":110,"code":"const offlineData = (newService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03202","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":110,"code":"const offlineData = (newService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03203","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":122,"code":"const offlineData = (newService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03204","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":122,"code":"const offlineData = (newService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03205","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":137,"code":"(offlineService as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03206","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":137,"code":"(offlineService as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03207","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":144,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03208","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":146,"code":"expect((offlineService as any).isOnline).toBe(true);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03209","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":146,"code":"expect((offlineService as any).isOnline).toBe(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03210","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":158,"code":"} as NetInfoState);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03211","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":160,"code":"expect((offlineService as any).isOnline).toBe(false);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03212","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":160,"code":"expect((offlineService as any).isOnline).toBe(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03213","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":176,"code":"expect((offlineService as any).isOnline).toBe(state.isConnected === true);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03214","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":176,"code":"expect((offlineService as any).isOnline).toBe(state.isConnected === true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03215","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":195,"code":"(offlineService as any).isSyncing = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03216","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":195,"code":"(offlineService as any).isSyncing = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03217","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":196,"code":"(offlineService as any).offlineData.pendingActions = [{ id: 'action1' }, { id: 'action2' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03218","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":196,"code":"(offlineService as any).offlineData.pendingActions = [{ id: 'action1' }, { id: 'action2' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03219","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":213,"code":"(offlineService as any).notifyListeners();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03220","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":213,"code":"(offlineService as any).notifyListeners();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03221","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":220,"code":"(offlineService as any).notifyListeners();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03222","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":220,"code":"(offlineService as any).notifyListeners();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03223","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":231,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03224","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":231,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03225","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":246,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03226","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":246,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03227","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":259,"code":"const executeActionSpy = jest.spyOn(offlineService as any, 'executePendingAction');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03228","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":259,"code":"const executeActionSpy = jest.spyOn(offlineService as any, 'executePendingAction');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03229","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":262,"code":"await (offlineService as any).syncPendingActions();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03230","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":262,"code":"await (offlineService as any).syncPendingActions();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03231","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":265,"code":"expect((offlineService as any).offlineData.pendingActions).toHaveLength(0); // Actions cleared","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03232","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":265,"code":"expect((offlineService as any).offlineData.pendingActions).toHaveLength(0); // Actions cleared","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03233","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":272,"code":"const executeActionSpy = jest.spyOn(offlineService as any, 'executePendingAction');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03234","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":272,"code":"const executeActionSpy = jest.spyOn(offlineService as any, 'executePendingAction');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03235","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":280,"code":"await (offlineService as any).syncPendingActions();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03236","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":280,"code":"await (offlineService as any).syncPendingActions();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03237","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":282,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03238","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":282,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03239","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":290,"code":"const executeActionSpy = jest.spyOn(offlineService as any, 'executePendingAction');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03240","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":290,"code":"const executeActionSpy = jest.spyOn(offlineService as any, 'executePendingAction');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03241","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":297,"code":"await (offlineService as any).syncPendingActions();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03242","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":297,"code":"await (offlineService as any).syncPendingActions();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03243","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":300,"code":"expect((offlineService as any).offlineData.pendingActions).toHaveLength(0); // Action removed","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03244","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":300,"code":"expect((offlineService as any).offlineData.pendingActions).toHaveLength(0); // Action removed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03245","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":313,"code":"expect((offlineService as any).offlineData.pets).toEqual(onlinePets); // Should cache","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03246","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":313,"code":"expect((offlineService as any).offlineData.pets).toEqual(onlinePets); // Should cache","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03247","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":318,"code":"(offlineService as any).offlineData.pets = offlinePets;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03248","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":318,"code":"(offlineService as any).offlineData.pets = offlinePets;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03249","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":332,"code":"(offlineService as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03250","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":332,"code":"(offlineService as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03251","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":334,"code":"(offlineService as any).offlineData.pets = offlinePets;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03252","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":334,"code":"(offlineService as any).offlineData.pets = offlinePets;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03253","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":344,"code":"(offlineService as any).offlineData.user = user;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03254","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":344,"code":"(offlineService as any).offlineData.user = user;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03255","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":358,"code":"expect((offlineService as any).offlineData.matches).toEqual(onlineMatches);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03256","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":358,"code":"expect((offlineService as any).offlineData.matches).toEqual(onlineMatches);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03257","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":367,"code":"(offlineService as any).offlineData.messages = messages;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03258","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":367,"code":"(offlineService as any).offlineData.messages = messages;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03259","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":385,"code":"expect((offlineService as any).offlineData.messages).toEqual(onlineMessages);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03260","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":385,"code":"expect((offlineService as any).offlineData.messages).toEqual(onlineMessages);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03261","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":393,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03262","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":393,"code":"const offlineData = (offlineService as any).offlineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03263","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":406,"code":"(offlineService as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03264","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":406,"code":"(offlineService as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03265","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":411,"code":"expect((offlineService as any).offlineData.pendingActions[0].type).toBe('message');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03266","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":411,"code":"expect((offlineService as any).offlineData.pendingActions[0].type).toBe('message');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03267","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":419,"code":"expect((offlineService as any).offlineData.pendingActions[0].type).toBe('message');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03268","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":419,"code":"expect((offlineService as any).offlineData.pendingActions[0].type).toBe('message');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03269","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":435,"code":"(offlineService as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03270","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":435,"code":"(offlineService as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03271","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":441,"code":"expect((offlineService as any).offlineData.pendingActions[0].type).toBe('profile_update');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03272","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":441,"code":"expect((offlineService as any).offlineData.pendingActions[0].type).toBe('profile_update');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03273","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":447,"code":"expect((offlineService as any).offlineData.pendingActions[0].type).toBe('match_action');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03274","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":447,"code":"expect((offlineService as any).offlineData.pendingActions[0].type).toBe('match_action');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03275","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":448,"code":"expect((offlineService as any).offlineData.pendingActions[0].data).toEqual({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03276","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":448,"code":"expect((offlineService as any).offlineData.pendingActions[0].data).toEqual({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03277","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":457,"code":"const syncPendingActionsSpy = jest.spyOn(offlineService as any, 'syncPendingActions');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03278","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":457,"code":"const syncPendingActionsSpy = jest.spyOn(offlineService as any, 'syncPendingActions');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03279","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":458,"code":"const syncFromServerSpy = jest.spyOn(offlineService as any, 'syncFromServer');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03280","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":458,"code":"const syncFromServerSpy = jest.spyOn(offlineService as any, 'syncFromServer');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03281","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":467,"code":"expect((offlineService as any).offlineData.lastSync).toBeDefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03282","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":467,"code":"expect((offlineService as any).offlineData.lastSync).toBeDefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03283","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":471,"code":"(offlineService as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03284","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":471,"code":"(offlineService as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03285","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":475,"code":"expect((offlineService as any).isSyncing).toBe(false);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03286","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":475,"code":"expect((offlineService as any).isSyncing).toBe(false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03287","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":479,"code":"(offlineService as any).isSyncing = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03288","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":479,"code":"(offlineService as any).isSyncing = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03289","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":483,"code":"expect((offlineService as any).isSyncing).toBe(true); // Still syncing","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03290","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":483,"code":"expect((offlineService as any).isSyncing).toBe(true); // Still syncing","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03291","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":487,"code":"const syncPendingActionsSpy = jest.spyOn(offlineService as any, 'syncPendingActions');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03292","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":487,"code":"const syncPendingActionsSpy = jest.spyOn(offlineService as any, 'syncPendingActions');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03293","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":492,"code":"expect((offlineService as any).isSyncing).toBe(false); // Should reset sync state","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03294","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":492,"code":"expect((offlineService as any).isSyncing).toBe(false); // Should reset sync state","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03295","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":497,"code":"const syncPendingActionsSpy = jest.spyOn(offlineService as any, 'syncPendingActions');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03296","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":497,"code":"const syncPendingActionsSpy = jest.spyOn(offlineService as any, 'syncPendingActions');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03297","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":517,"code":"(offlineService as any).offlineData.pets = [{ id: 'pet1' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03298","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":517,"code":"(offlineService as any).offlineData.pets = [{ id: 'pet1' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03299","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":518,"code":"(offlineService as any).offlineData.user = { id: 'user1' };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03300","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":518,"code":"(offlineService as any).offlineData.user = { id: 'user1' };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03301","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":520,"code":"await (offlineService as any).saveOfflineData();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03302","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":520,"code":"await (offlineService as any).saveOfflineData();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03303","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":535,"code":"await (offlineService as any).saveOfflineData();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03304","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":535,"code":"await (offlineService as any).saveOfflineData();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03305","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":546,"code":"(offlineService as any).offlineData.pets = [{ id: 'pet1' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03306","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":546,"code":"(offlineService as any).offlineData.pets = [{ id: 'pet1' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03307","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":547,"code":"(offlineService as any).offlineData.pendingActions = [{ id: 'action1' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03308","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":547,"code":"(offlineService as any).offlineData.pendingActions = [{ id: 'action1' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03309","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":552,"code":"expect((offlineService as any).offlineData.pets).toEqual([]);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03310","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":552,"code":"expect((offlineService as any).offlineData.pets).toEqual([]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03311","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":553,"code":"expect((offlineService as any).offlineData.pendingActions).toEqual([]);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03312","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":553,"code":"expect((offlineService as any).offlineData.pendingActions).toEqual([]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03313","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":634,"code":"expect((offlineService as any).isOnline).toBe(true);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03314","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":634,"code":"expect((offlineService as any).isOnline).toBe(true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03315","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":643,"code":"networkListener(null as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03316","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":643,"code":"networkListener(null as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03317","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":644,"code":"networkListener(undefined as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03318","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":644,"code":"networkListener(undefined as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03319","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":647,"code":"expect((offlineService as any).isOnline).toBeDefined();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03320","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":647,"code":"expect((offlineService as any).isOnline).toBeDefined();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03321","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":657,"code":"(offlineService as any).offlineData.pets = largePets;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03322","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":657,"code":"(offlineService as any).offlineData.pets = largePets;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03323","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":682,"code":"expect((offlineService as any).offlineData.pendingActions).toHaveLength(100);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03324","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":682,"code":"expect((offlineService as any).offlineData.pendingActions).toHaveLength(100);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03325","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":689,"code":"expect((offlineService as any).syncListeners).toContain(listener);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03326","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":689,"code":"expect((offlineService as any).syncListeners).toContain(listener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03327","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":693,"code":"expect((offlineService as any).syncListeners).not.toContain(listener);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03328","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":693,"code":"expect((offlineService as any).syncListeners).not.toContain(listener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03329","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":703,"code":"(offlineService as any).notifyListeners();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03330","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":703,"code":"(offlineService as any).notifyListeners();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03331","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":712,"code":"expect((offlineService as any).syncListeners).toHaveLength(0);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03332","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":712,"code":"expect((offlineService as any).syncListeners).toHaveLength(0);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03333","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":716,"code":"const data: any = { id: 'test' };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03334","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":719,"code":"(offlineService as any).offlineData.user = data;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03335","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":719,"code":"(offlineService as any).offlineData.user = data;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03336","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":736,"code":"(offlineService as any).offlineData.pendingActions = [action];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03337","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":736,"code":"(offlineService as any).offlineData.pendingActions = [action];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03338","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":753,"code":"expect(() => offlineService.addPendingAction('swipe', invalidAction as any)).not.toThrow();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03339","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/offlineService.test.ts","line":753,"code":"expect(() => offlineService.addPendingAction('swipe', invalidAction as any)).not.toThrow();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03340","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":17,"code":"import * as Location from 'expo-location';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03341","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":53,"code":"const mockLocation = Location as jest.Mocked<typeof Location>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03342","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":54,"code":"const mockLogger = logger as jest.Mocked<typeof logger>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03343","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":55,"code":"const mockSocketClient = socketClient as jest.Mocked<typeof socketClient>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03344","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":86,"code":"const location = await (global as any).getCurrentLocation();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03345","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":86,"code":"const location = await (global as any).getCurrentLocation();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03346","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":106,"code":"await expect((global as any).getCurrentLocation()).rejects.toThrow('Location permission not granted');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03347","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":106,"code":"await expect((global as any).getCurrentLocation()).rejects.toThrow('Location permission not granted');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03348","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":114,"code":"await expect((global as any).getCurrentLocation()).rejects.toThrow('Location services are disabled');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03349","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":114,"code":"await expect((global as any).getCurrentLocation()).rejects.toThrow('Location services are disabled');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03350","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":124,"code":"await expect((global as any).getCurrentLocation()).rejects.toThrow('Location permission not granted');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03351","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":124,"code":"await expect((global as any).getCurrentLocation()).rejects.toThrow('Location permission not granted');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03352","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":859,"code":"expect((results[0] as any).value.petId).toBe('success-pet');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03353","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":859,"code":"expect((results[0] as any).value.petId).toBe('success-pet');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03354","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":860,"code":"expect((results[1] as any).reason.message).toContain('startPetActivity failed: 400');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03355","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/petActivityService.test.ts","line":860,"code":"expect((results[1] as any).reason.message).toContain('startPetActivity failed: 400');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03356","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":14,"code":"import * as FileSystem from 'expo-file-system';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03357","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":22,"code":"const mockApi = api as jest.Mocked<typeof api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03358","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":23,"code":"const mockFileSystem = FileSystem as jest.Mocked<typeof FileSystem>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03359","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":42,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03360","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":42,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03361","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":72,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03362","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":72,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03363","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":96,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03364","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":96,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03365","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":114,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03366","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":114,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03367","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":153,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03368","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":153,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03369","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":179,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03370","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":179,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03371","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":199,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03372","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":199,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03373","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":217,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03374","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":217,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03375","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":237,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03376","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":237,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03377","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":265,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03378","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":265,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03379","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":286,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03380","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":286,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03381","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":313,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03382","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":313,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03383","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":332,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03384","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/photoUpload.test.ts","line":332,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03385","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/settingsService.test.ts","line":25,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03386","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/settingsService.test.ts","line":232,"code":"matches: 'invalid' as any, // Invalid boolean","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03387","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/settingsService.test.ts","line":232,"code":"matches: 'invalid' as any, // Invalid boolean","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03388","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/settingsService.test.ts","line":599,"code":"expect((results[1] as any).reason.message).toBe('Second operation failed');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03389","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/settingsService.test.ts","line":599,"code":"expect((results[1] as any).reason.message).toBe('Second operation failed');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03390","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/settingsService.test.ts","line":712,"code":"const circularSettings: any = { settings: {} };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03391","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":20,"code":"const mockIo = io as jest.MockedFunction<typeof io>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03392","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":42,"code":"io: {} as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03393","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":42,"code":"io: {} as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03394","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":73,"code":"} as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03395","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":73,"code":"} as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03396","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":75,"code":"mockIo.mockReturnValue(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03397","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":75,"code":"mockIo.mockReturnValue(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03398","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":84,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03399","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":84,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03400","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":93,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03401","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":93,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03402","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":103,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03403","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":103,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03404","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":128,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03405","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":128,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03406","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":137,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03407","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":137,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03408","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":147,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03409","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":147,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03410","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":158,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03411","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":158,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03412","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":169,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03413","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":169,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03414","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":182,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03415","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":182,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03416","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":191,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03417","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":191,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03418","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":203,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03419","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":203,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03420","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":213,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03421","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":213,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03422","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":223,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03423","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":223,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03424","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":237,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03425","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":237,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03426","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":246,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03427","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":246,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03428","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":255,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03429","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":255,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03430","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":269,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03431","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":269,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03432","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":279,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03433","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":279,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03434","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":291,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03435","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":291,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03436","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":306,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03437","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":306,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03438","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":316,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03439","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":316,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03440","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":328,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03441","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/socket.test.ts","line":328,"code":"mockIo.mockReturnValueOnce(mockSocket as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03442","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/storage.test.ts","line":21,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03443","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/storage.test.ts","line":122,"code":"expect(JSON.parse(callArgs[1] as string)).toEqual(complexData);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03444","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/storage.test.ts","line":132,"code":"expect(JSON.parse(callArgs[1] as string)).toEqual(arrayData);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03445","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/storage.test.ts","line":314,"code":"const written = JSON.parse(callArgs[1] as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03446","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/swipeService.test.ts","line":21,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03447","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/swipeService.test.ts","line":245,"code":"} as Pet;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03448","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":7,"code":"import * as ImagePicker from 'expo-image-picker';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03449","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":8,"code":"import * as ImageManipulator from 'expo-image-manipulator';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03450","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":9,"code":"import * as FileSystem from 'expo-file-system';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03451","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":38,"code":"const mockImagePicker = ImagePicker as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03452","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":38,"code":"const mockImagePicker = ImagePicker as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03453","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":39,"code":"const mockImageManipulator = ImageManipulator as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03454","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":39,"code":"const mockImageManipulator = ImageManipulator as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03455","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":40,"code":"const mockFileSystem = FileSystem as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03456","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":40,"code":"const mockFileSystem = FileSystem as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03457","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":63,"code":"status: 'granted' as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03458","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":63,"code":"status: 'granted' as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03459","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":66,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03460","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":66,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03461","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":69,"code":"status: 'granted' as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03462","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":69,"code":"status: 'granted' as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03463","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":72,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03464","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":72,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03465","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":86,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03466","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":86,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03467","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":100,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03468","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":100,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03469","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":140,"code":"status: 'denied' as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03470","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":140,"code":"status: 'denied' as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03471","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":143,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03472","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":143,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03473","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":152,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03474","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":152,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03475","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":172,"code":"status: 'denied' as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03476","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":172,"code":"status: 'denied' as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03477","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":175,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03478","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":175,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03479","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":196,"code":"type UploadFn = (...args: any[]) => Promise<string>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03480","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":207,"code":"type UploadFn = (...args: any[]) => Promise<string>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03481","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.simple.test.ts","line":209,"code":"(uploadFn as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03482","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":21,"code":"import * as ImagePicker from 'expo-image-picker';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03483","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":22,"code":"import * as ImageManipulator from 'expo-image-manipulator';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03484","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":23,"code":"import * as FileSystem from 'expo-file-system';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03485","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":54,"code":"const mockImagePicker = ImagePicker as jest.Mocked<typeof ImagePicker>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03486","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":55,"code":"const mockImageManipulator = ImageManipulator as jest.Mocked<typeof ImageManipulator>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03487","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":56,"code":"const mockFileSystem = FileSystem as jest.Mocked<typeof FileSystem>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03488","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":133,"code":"const result = await (global as any).validateMimeType('test.jpg');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03489","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":133,"code":"const result = await (global as any).validateMimeType('test.jpg');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03490","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":148,"code":"const result = await (global as any).validateMimeType('test.png');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03491","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":148,"code":"const result = await (global as any).validateMimeType('test.png');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03492","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":163,"code":"const result = await (global as any).validateMimeType('test.webp');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03493","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":163,"code":"const result = await (global as any).validateMimeType('test.webp');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03494","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":178,"code":"const result = await (global as any).validateMimeType('test.txt');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03495","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":178,"code":"const result = await (global as any).validateMimeType('test.txt');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03496","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":187,"code":"const result = await (global as any).validateMimeType('nonexistent.jpg');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03497","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":187,"code":"const result = await (global as any).validateMimeType('nonexistent.jpg');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03498","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":203,"code":"const result = await (global as any).validateMimeType('image_without_extension');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03499","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":203,"code":"const result = await (global as any).validateMimeType('image_without_extension');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03500","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":222,"code":"const result = await (global as any).fixOrientation(inputUri);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03501","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":222,"code":"const result = await (global as any).fixOrientation(inputUri);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03502","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":237,"code":"const result = await (global as any).fixOrientation(inputUri);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03503","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":237,"code":"const result = await (global as any).fixOrientation(inputUri);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03504","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":265,"code":"const result = await (global as any).resizeImage(inputUri, maxDimension);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03505","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":265,"code":"const result = await (global as any).resizeImage(inputUri, maxDimension);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03506","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":285,"code":"const result = await (global as any).resizeImage(inputUri, maxDimension);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03507","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":285,"code":"const result = await (global as any).resizeImage(inputUri, maxDimension);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03508","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":306,"code":"const result = await (global as any).resizeImage('landscape.jpg', 1536);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03509","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":306,"code":"const result = await (global as any).resizeImage('landscape.jpg', 1536);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03510","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":327,"code":"const result = await (global as any).resizeImage('portrait.jpg', 1536);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03511","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":327,"code":"const result = await (global as any).resizeImage('portrait.jpg', 1536);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03512","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":336,"code":"await expect((global as any).resizeImage('test.jpg', 1024)).rejects.toThrow('Resize failed');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03513","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":336,"code":"await expect((global as any).resizeImage('test.jpg', 1024)).rejects.toThrow('Resize failed');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03514","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":355,"code":"const result = await (global as any).cropToAspectRatio(imageUri, aspectRatio, width, height);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03515","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":355,"code":"const result = await (global as any).cropToAspectRatio(imageUri, aspectRatio, width, height);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03516","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":385,"code":"const result = await (global as any).cropToAspectRatio(imageUri, aspectRatio, width, height);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03517","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":385,"code":"const result = await (global as any).cropToAspectRatio(imageUri, aspectRatio, width, height);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03518","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":414,"code":"const result = await (global as any).cropToAspectRatio(imageUri, aspectRatio, width, height);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03519","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":414,"code":"const result = await (global as any).cropToAspectRatio(imageUri, aspectRatio, width, height);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03520","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":428,"code":"await expect((global as any).cropToAspectRatio('test.jpg', [4, 3], 1000, 800)).rejects.toThrow('Crop failed');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03521","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":428,"code":"await expect((global as any).cropToAspectRatio('test.jpg', [4, 3], 1000, 800)).rejects.toThrow('Crop failed');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03522","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":445,"code":"const result = await (global as any).compressImage(imageUri, quality);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03523","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":445,"code":"const result = await (global as any).compressImage(imageUri, quality);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03524","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":469,"code":"const result = await (global as any).compressImage('input.jpg', quality);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03525","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":469,"code":"const result = await (global as any).compressImage('input.jpg', quality);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03526","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":483,"code":"await expect((global as any).compressImage('test.jpg', 0.8)).rejects.toThrow('Compression failed');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03527","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":483,"code":"await expect((global as any).compressImage('test.jpg', 0.8)).rejects.toThrow('Compression failed');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03528","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":501,"code":"const result = await (global as any).getFileInfo(uri);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03529","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":501,"code":"const result = await (global as any).getFileInfo(uri);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03530","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":515,"code":"const result = await (global as any).getFileInfo('missing.jpg');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03531","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":515,"code":"const result = await (global as any).getFileInfo('missing.jpg');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03532","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":524,"code":"const result = await (global as any).getFileInfo('error.jpg');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03533","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":524,"code":"const result = await (global as any).getFileInfo('error.jpg');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03534","severity":"P3","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":613,"code":"expect(console.log).toHaveBeenCalledWith('Starting upload hygiene processing...');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03535","severity":"P3","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":614,"code":"expect(console.log).toHaveBeenCalledWith('✓ MIME type validated:', 'image/jpeg');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03536","severity":"P3","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":615,"code":"expect(console.log).toHaveBeenCalledWith('✓ Orientation fixed');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03537","severity":"P3","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":616,"code":"expect(console.log).toHaveBeenCalledWith('Original dimensions: 2048x1536');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03538","severity":"P3","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":617,"code":"expect(console.log).toHaveBeenCalledWith('✓ Resized to: 1024x768');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03539","severity":"P3","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":618,"code":"expect(console.log).toHaveBeenCalledWith('✓ Cropped to 4:3');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03540","severity":"P3","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":619,"code":"expect(console.log).toHaveBeenCalledWith('✓ Compressed with quality: 0.85');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03541","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":867,"code":"(global as any).checkUploadQuota = jest.fn().mockRejectedValue(new Error('Quota check failed'));","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03542","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":867,"code":"(global as any).checkUploadQuota = jest.fn().mockRejectedValue(new Error('Quota check failed'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03543","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":869,"code":"await expect((global as any).checkUploadQuota('user123')).rejects.toThrow('Quota check failed');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03544","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":869,"code":"await expect((global as any).checkUploadQuota('user123')).rejects.toThrow('Quota check failed');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03545","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":872,"code":"(global as any).checkUploadQuota = originalCheckUploadQuota;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03546","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":872,"code":"(global as any).checkUploadQuota = originalCheckUploadQuota;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03547","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":1048,"code":"const result = await (global as any).cropToAspectRatio('square.jpg', [4, 3], 1000, 1000);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03548","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":1048,"code":"const result = await (global as any).cropToAspectRatio('square.jpg', [4, 3], 1000, 1000);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03549","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":1066,"code":"const result1 = await (global as any).cropToAspectRatio('wide.jpg', [1, 1], 2000, 1000);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03550","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":1066,"code":"const result1 = await (global as any).cropToAspectRatio('wide.jpg', [1, 1], 2000, 1000);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03551","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":1068,"code":"const result2 = await (global as any).cropToAspectRatio('tall.jpg', [1, 1], 1000, 2000);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03552","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":1068,"code":"const result2 = await (global as any).cropToAspectRatio('tall.jpg', [1, 1], 1000, 2000);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03553","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":1081,"code":"const result = await (global as any).resizeImage('zero.jpg', 1024);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03554","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":1081,"code":"const result = await (global as any).resizeImage('zero.jpg', 1024);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03555","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":1095,"code":"const result = await (global as any).compressImage('test.jpg', -0.5);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03556","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/uploadHygiene.test.ts","line":1095,"code":"const result = await (global as any).compressImage('test.jpg', -0.5);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03557","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":65,"code":"const mockAsyncStorage = AsyncStorage as jest.Mocked<typeof AsyncStorage>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03558","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":66,"code":"const mockDimensions = Dimensions as jest.Mocked<typeof Dimensions>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03559","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":67,"code":"const mockApi = require('../api').api as jest.Mocked<typeof require('../api').api>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03560","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":81,"code":"(AnalyticsService as any).instance = undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03561","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":81,"code":"(AnalyticsService as any).instance = undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03562","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":112,"code":"expect((service as any).sessionId).toMatch(/^[\\d_]+$/);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03563","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":112,"code":"expect((service as any).sessionId).toMatch(/^[\\d_]+$/);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03564","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":124,"code":"expect((service as any).eventQueue).toHaveLength(1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03565","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":124,"code":"expect((service as any).eventQueue).toHaveLength(1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03566","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":126,"code":"const queuedEvent = (service as any).eventQueue[0];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03567","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":126,"code":"const queuedEvent = (service as any).eventQueue[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03568","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":146,"code":"const queuedEvent = (service as any).eventQueue[0];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03569","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":146,"code":"const queuedEvent = (service as any).eventQueue[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03570","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":152,"code":"(service as any).batchSize = 2;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03571","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":152,"code":"(service as any).batchSize = 2;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03572","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":176,"code":"expect((service as any).eventQueue).toHaveLength(1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03573","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":176,"code":"expect((service as any).eventQueue).toHaveLength(1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03574","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":178,"code":"const event = (service as any).eventQueue[0];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03575","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":178,"code":"const event = (service as any).eventQueue[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03576","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":190,"code":"const event = (service as any).eventQueue[0];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03577","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":190,"code":"const event = (service as any).eventQueue[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03578","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":210,"code":"const event = (service as any).eventQueue[0];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03579","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":210,"code":"const event = (service as any).eventQueue[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03580","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":224,"code":"const event = (service as any).eventQueue[0];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03581","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":224,"code":"const event = (service as any).eventQueue[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03582","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":241,"code":"const event = (service as any).eventQueue[0];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03583","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":241,"code":"const event = (service as any).eventQueue[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03584","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":383,"code":"(service as any).batchSize = 3;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03585","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":383,"code":"(service as any).batchSize = 3;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03586","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":395,"code":"expect((service as any).eventQueue).toHaveLength(0);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03587","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":395,"code":"expect((service as any).eventQueue).toHaveLength(0);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03588","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":399,"code":"(service as any).isOnline = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03589","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":399,"code":"(service as any).isOnline = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03590","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":402,"code":"await (service as any).flushEvents();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03591","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":402,"code":"await (service as any).flushEvents();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03592","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":415,"code":"await (service as any).flushEvents();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03593","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":415,"code":"await (service as any).flushEvents();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03594","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":418,"code":"expect((service as any).eventQueue).toHaveLength(1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03595","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":418,"code":"expect((service as any).eventQueue).toHaveLength(1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03596","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":446,"code":"await (service as any).flushEvents();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03597","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":446,"code":"await (service as any).flushEvents();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03598","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":458,"code":"await (service as any).flushEvents();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03599","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":458,"code":"await (service as any).flushEvents();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03600","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":467,"code":"const sessionId = (service as any).generateSessionId();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03601","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":467,"code":"const sessionId = (service as any).generateSessionId();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03602","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":473,"code":"expect((service as any).getPlatform()).toBe('ios');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03603","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":473,"code":"expect((service as any).getPlatform()).toBe('ios');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03604","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":476,"code":"expect((service as any).getPlatform()).toBe('android');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03605","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":476,"code":"expect((service as any).getPlatform()).toBe('android');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03606","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":482,"code":"const deviceInfo = (service as any).getDeviceInfo();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03607","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":482,"code":"const deviceInfo = (service as any).getDeviceInfo();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03608","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":494,"code":"const deviceInfo = (service as any).getDeviceInfo();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03609","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":494,"code":"const deviceInfo = (service as any).getDeviceInfo();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03610","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":517,"code":"(service as any).eventQueue = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03611","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":517,"code":"(service as any).eventQueue = [];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03612","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":519,"code":"await expect((service as any).flushEvents()).resolves.not.toThrow();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03613","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":519,"code":"await expect((service as any).flushEvents()).resolves.not.toThrow();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03614","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":524,"code":"(service as any).eventQueue = [{ invalid: 'data' }];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03615","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":524,"code":"(service as any).eventQueue = [{ invalid: 'data' }];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03616","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":526,"code":"await expect((service as any).flushEvents()).resolves.not.toThrow();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03617","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":526,"code":"await expect((service as any).flushEvents()).resolves.not.toThrow();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03618","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":539,"code":"expect((service as any).eventQueue).toHaveLength(4);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03619","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":539,"code":"expect((service as any).eventQueue).toHaveLength(4);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03620","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":566,"code":"const event = (service as any).eventQueue[0];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03621","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":566,"code":"const event = (service as any).eventQueue[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03622","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":573,"code":"(global as any).__DEV__ = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03623","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":573,"code":"(global as any).__DEV__ = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03624","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":587,"code":"(global as any).__DEV__ = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03625","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":587,"code":"(global as any).__DEV__ = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03626","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":596,"code":"(Constants.expoConfig as any) = undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03627","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/usageTracking.test.ts","line":596,"code":"(Constants.expoConfig as any) = undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03628","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.simple.test.ts","line":15,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03629","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.simple.test.ts","line":110,"code":"it('should check if user has specific tier', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03630","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.test.ts","line":36,"code":"const mockRequest = request as jest.MockedFunction<typeof request>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03631","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.test.ts","line":575,"code":"verificationService.submitIdentityVerification({} as any)","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03632","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.test.ts","line":575,"code":"verificationService.submitIdentityVerification({} as any)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03633","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.test.ts","line":680,"code":"status = await verificationService.submitIdentityVerification({} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03634","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.test.ts","line":680,"code":"status = await verificationService.submitIdentityVerification({} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03635","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.test.ts","line":694,"code":"const status = await verificationService.submitIdentityVerification({} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03636","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.test.ts","line":694,"code":"const status = await verificationService.submitIdentityVerification({} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03637","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.test.ts","line":710,"code":"const status = await verificationService.submitPetOwnershipVerification({} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03638","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.test.ts","line":710,"code":"const status = await verificationService.submitPetOwnershipVerification({} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03639","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.test.ts","line":738,"code":"status = await verificationService.submitIdentityVerification({} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03640","severity":"P2","category":"Type","file":"apps/mobile/src/services/__tests__/verificationService.test.ts","line":738,"code":"status = await verificationService.submitIdentityVerification({} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03641","severity":"P2","category":"Type","file":"apps/mobile/src/services/adminAPI.ts","line":138,"code":"return (await response.json()) as AdminAPIResponse<T>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03642","severity":"P2","category":"Type","file":"apps/mobile/src/services/adminUsersService.ts","line":2,"code":"import { _adminAPI as adminAPI } from \"./adminAPI\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03643","severity":"P2","category":"Type","file":"apps/mobile/src/services/adminUsersService.ts","line":70,"code":"user[\"status\"] as AdminUserStatus,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03644","severity":"P2","category":"Type","file":"apps/mobile/src/services/adminUsersService.ts","line":72,"code":"? (user[\"status\"] as AdminUserStatus)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03645","severity":"P2","category":"Type","file":"apps/mobile/src/services/adminUsersService.ts","line":90,"code":"const data = response[\"data\"] as Record<string, unknown> | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03646","severity":"P2","category":"Type","file":"apps/mobile/src/services/adminUsersService.ts","line":92,"code":"? (data[\"users\"] as Record<string, unknown>[]).map(mapUser)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03647","severity":"P1","category":"Type","file":"apps/mobile/src/services/aiCompatService.ts","line":25,"code":").then(result => result.data);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03648","severity":"P2","category":"Type","file":"apps/mobile/src/services/aiPhotoService.ts","line":1,"code":"import * as FileSystem from \"expo-file-system\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03649","severity":"P2","category":"Type","file":"apps/mobile/src/services/api.ts","line":134,"code":"const normalizedMethod = method.toUpperCase() as HttpMethod;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03650","severity":"P2","category":"Type","file":"apps/mobile/src/services/api.ts","line":295,"code":"// Mark messages as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03651","severity":"P2","category":"Type","file":"apps/mobile/src/services/api.ts","line":302,"code":"\"Failed to mark messages as read\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03652","severity":"P2","category":"Type","file":"apps/mobile/src/services/api.ts","line":335,"code":"? `?${new URLSearchParams(filters as Record<string, string>).toString()}`","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03653","severity":"P2","category":"Type","file":"apps/mobile/src/services/api.ts","line":533,"code":"// Mark notification as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03654","severity":"P2","category":"Type","file":"apps/mobile/src/services/api.ts","line":537,"code":"\"Failed to mark notification as read\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03655","severity":"P2","category":"Type","file":"apps/mobile/src/services/api.ts","line":598,"code":"...(filters !== undefined ? (filters as Record<string, string>) : {}),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03656","severity":"P2","category":"Type","file":"apps/mobile/src/services/api.ts","line":914,"code":"return request<T>(url, { method: \"GET\", headers: config as Record<string, string> });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03657","severity":"P2","category":"Type","file":"apps/mobile/src/services/api.ts","line":917,"code":"return request<T>(url, { method: \"POST\", body: data, headers: config as Record<string, string> });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03658","severity":"P2","category":"Type","file":"apps/mobile/src/services/api.ts","line":923,"code":"export { api as _petAPI };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03659","severity":"P1","category":"Type","file":"apps/mobile/src/services/apiClient.ts","line":129,"code":"void NetInfo.fetch().then((state) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03660","severity":"P2","category":"Type","file":"apps/mobile/src/services/chatService.ts","line":9,"code":"import * as FileSystem from \"expo-file-system\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03661","severity":"P2","category":"Type","file":"apps/mobile/src/services/chatService.ts","line":163,"code":"// Native: FormData already has the file wrapped","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03662","severity":"P2","category":"Type","file":"apps/mobile/src/services/errorHandler.ts","line":52,"code":"return \"Your session has expired. Please log in again.\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03663","severity":"P2","category":"Type","file":"apps/mobile/src/services/errorHandler.ts","line":60,"code":"return \"The requested resource was not found.\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03664","severity":"P2","category":"Type","file":"apps/mobile/src/services/errorHandler.ts","line":187,"code":"(error as Error & { code?: string }).code = code;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03665","severity":"P2","category":"Type","file":"apps/mobile/src/services/gdprService.ts","line":90,"code":"const errorObj = error as { code?: string; message?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03666","severity":"P2","category":"Type","file":"apps/mobile/src/services/livekitService.ts","line":192,"code":"listeners.add(callback as (data: LiveKitEventData) => void);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03667","severity":"P2","category":"Type","file":"apps/mobile/src/services/livekitService.ts","line":201,"code":"listeners.delete(callback as (data: LiveKitEventData) => void);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03668","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":6,"code":"import * as Sentry from \"@sentry/react-native\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03669","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":7,"code":"import * as Keychain from \"react-native-keychain\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03670","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":8,"code":"import * as Aes from \"react-native-aes-crypto\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03671","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":12,"code":"const sentry = Sentry as {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03672","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":574,"code":"code: (value as Error & { code?: string }).code ?? \"UNKNOWN\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03673","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":578,"code":"value as Record<string, unknown>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03674","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":642,"code":"// Reset if interval has passed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03675","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":674,"code":"// Reset backoff if enough time has passed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03676","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":803,"code":"const parsedItem = JSON.parse(encrypted) as EncryptedLogStorageItem;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03677","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":819,"code":"const entry = JSON.parse(decrypted) as StructuredLogEntry;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03678","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":1012,"code":"errorCode: (metadata.error as Error & { code?: string }).code,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03679","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":1156,"code":"} as LogMetadata);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03680","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":1306,"code":"(metadata.error as Error & { code?: string }).code ?? \"UNKNOWN\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03681","severity":"P2","category":"Type","file":"apps/mobile/src/services/logger.ts","line":1415,"code":"} as AuditLogFilters,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03682","severity":"P2","category":"Type","file":"apps/mobile/src/services/mapActivityService.ts","line":2,"code":"import * as Location from 'expo-location';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03683","severity":"P2","category":"Type","file":"apps/mobile/src/services/mapActivityService.ts","line":78,"code":"params: params as Record<string, string | number | boolean | null | undefined>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03684","severity":"P2","category":"Type","file":"apps/mobile/src/services/multipartUpload.ts","line":17,"code":"// @ts-expect-error - react-native-fs is a runtime dependency","problem":"TypeScript suppression comment","evidence":"TypeScript suppressions hide type errors and should be avoided","fix":"Fix the underlying type issue instead of suppressing it","autofix":{"type":"manual","snippet":"Remove suppression and fix the type error"},"blast_radius":"Local","confidence":0.8,"tags":["typescript","suppression"],"owner":"mobile"}
{"id":"AUD-TYP-03685","severity":"P2","category":"Type","file":"apps/mobile/src/services/notifications.ts","line":8,"code":"import * as Device from \"expo-device\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03686","severity":"P2","category":"Type","file":"apps/mobile/src/services/notifications.ts","line":9,"code":"import * as Notifications from \"expo-notifications\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03687","severity":"P2","category":"Type","file":"apps/mobile/src/services/notifications.ts","line":155,"code":"this.handleNotificationResponse(data as Record<string, unknown>);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03688","severity":"P2","category":"Type","file":"apps/mobile/src/services/observability.ts","line":8,"code":"import * as Sentry from \"@sentry/react-native\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03689","severity":"P2","category":"Type","file":"apps/mobile/src/services/observability.ts","line":138,"code":"screen: (metadata.screen as string) || \"unknown\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03690","severity":"P2","category":"Type","file":"apps/mobile/src/services/observability.ts","line":139,"code":"component: (metadata.component as string) || \"unknown\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03691","severity":"P2","category":"Type","file":"apps/mobile/src/services/observability.ts","line":373,"code":"const sentryEvent = event as Record<string, unknown>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03692","severity":"P2","category":"Type","file":"apps/mobile/src/services/observability.ts","line":375,"code":"const request = sentryEvent.request as { data?: Record<string, unknown> };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03693","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":120,"code":"this.offlineData = parsed as OfflineData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03694","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":210,"code":"// const actionData = action.data as Record<string, unknown>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03695","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":213,"code":"// await api.swipePet(String(actionData['petId']), String(actionData['direction']) as 'like' | 'pass' | 'superlike');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03696","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":219,"code":"// await api.updateUserProfile(actionData as Record<string, unknown>);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03697","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":237,"code":"//   this.offlineData.user = userData as User;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03698","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":242,"code":"//   this.offlineData.pets = petsData as Pet[];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03699","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":247,"code":"//   this.offlineData.matches = matchesData as Match[];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03700","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":252,"code":"//     allMessages.push(...(messages as Message[]));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03701","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":314,"code":"//   this.offlineData.user = user as User;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03702","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":317,"code":"// return user as User | null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03703","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":361,"code":"(m) => (m as MessageWithMatchId).matchId !== matchId,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03704","severity":"P2","category":"Type","file":"apps/mobile/src/services/offlineService.ts","line":377,"code":"(m) => (m as MessageWithMatchId).matchId === matchId,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03705","severity":"P2","category":"Type","file":"apps/mobile/src/services/petActivityService.ts","line":1,"code":"import * as Location from \"expo-location\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03706","severity":"P2","category":"Type","file":"apps/mobile/src/services/petActivityService.ts","line":104,"code":"return result.data as ActivityRecord[];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03707","severity":"P2","category":"Type","file":"apps/mobile/src/services/photoUpload.ts","line":1,"code":"import * as FileSystem from \"expo-file-system\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03708","severity":"P2","category":"Type","file":"apps/mobile/src/services/photoUploadService.ts","line":1,"code":"import * as ImagePicker from 'expo-image-picker';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03709","severity":"P2","category":"Type","file":"apps/mobile/src/services/reelsService.ts","line":14,"code":"jsonSpec: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03710","severity":"P2","category":"Type","file":"apps/mobile/src/services/reelsService.ts","line":23,"code":"waveformJson?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03711","severity":"P2","category":"Type","file":"apps/mobile/src/services/reelsService.ts","line":52,"code":"caption_json?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03712","severity":"P2","category":"Type","file":"apps/mobile/src/services/reelsService.ts","line":53,"code":"captionJson?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03713","severity":"P2","category":"Type","file":"apps/mobile/src/services/socket.ts","line":23,"code":"// Export as socketService for test compatibility","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03714","severity":"P2","category":"Type","file":"apps/mobile/src/services/storage.ts","line":6,"code":"try { return JSON.parse(v) as T; } catch { return fallback; }","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03715","severity":"P2","category":"Type","file":"apps/mobile/src/services/upload.ts","line":1,"code":"import * as ImagePicker from 'expo-image-picker';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03716","severity":"P2","category":"Type","file":"apps/mobile/src/services/uploadHygiene.ts","line":4,"code":"* Implements professional-grade upload hygiene as per blueprint:","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03717","severity":"P2","category":"Type","file":"apps/mobile/src/services/uploadHygiene.ts","line":14,"code":"import * as ImagePicker from 'expo-image-picker';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03718","severity":"P2","category":"Type","file":"apps/mobile/src/services/uploadHygiene.ts","line":15,"code":"import * as ImageManipulator from 'expo-image-manipulator';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03719","severity":"P2","category":"Type","file":"apps/mobile/src/services/uploadHygiene.ts","line":16,"code":"import * as FileSystem from 'expo-file-system';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03720","severity":"P2","category":"Type","file":"apps/mobile/src/services/uploadHygiene.ts","line":75,"code":"if ((validExtensions as readonly string[]).includes(normalizedExt)) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03721","severity":"P2","category":"Type","file":"apps/mobile/src/services/uploadHygiene.ts","line":76,"code":"return { valid: true, mimeType: mimeTypes[normalizedExt as (typeof validExtensions)[number]] };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03722","severity":"P2","category":"Type","file":"apps/mobile/src/services/uploadService.ts","line":14,"code":"// Read the file as blob","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03723","severity":"P2","category":"Type","file":"apps/mobile/src/services/uploadService.ts","line":25,"code":"return presign.publicUrl as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03724","severity":"P2","category":"Type","file":"apps/mobile/src/services/usageTracking.ts","line":24,"code":"const isDevelopment = (globalThis as { __DEV__?: boolean }).__DEV__ === true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03725","severity":"P2","category":"Type","file":"apps/mobile/src/services/usageTracking.ts","line":387,"code":"stored !== null ? (JSON.parse(stored) as AnalyticsEvent[]) : [];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03726","severity":"P2","category":"Type","file":"apps/mobile/src/services/usageTracking.ts","line":450,"code":"// Back-compat named export alias if needed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03727","severity":"P2","category":"Type","file":"apps/mobile/src/services/usageTracking.ts","line":451,"code":"export { AnalyticsService as UsageTrackingService };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03728","severity":"P2","category":"Type","file":"apps/mobile/src/services/userSettingsService.ts","line":24,"code":"return JSON.parse(cached) as UserSettings;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03729","severity":"P2","category":"Type","file":"apps/mobile/src/services/userSettingsService.ts","line":32,"code":"const data = res.ok ? (await res.json() as UserSettings) : {};","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03730","severity":"P2","category":"Type","file":"apps/mobile/src/services/userSettingsService.ts","line":53,"code":"const updated = { ...current, ...patch } as UserSettings;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03731","severity":"P2","category":"Type","file":"apps/mobile/src/services/verificationService.ts","line":205,"code":"* Check if user has required tier","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03732","severity":"P2","category":"Type","file":"apps/mobile/src/stores/useAuthStore.ts","line":103,"code":"storage: createSecureStorage() as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03733","severity":"P2","category":"Type","file":"apps/mobile/src/stores/useAuthStore.ts","line":103,"code":"storage: createSecureStorage() as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03734","severity":"P2","category":"Type","file":"apps/mobile/src/stories/mocks/bioMocks.ts","line":29,"code":"bio: \"Meet 🎾 Max, the most playful pup you'll ever encounter! This energetic 2-year-old Golden Retriever has more personality than a pack of dogs twice his size. Max lives for adventure - whether it's chasing squirrels, playing fetch until your arm falls off, or making friends with literally everyone at the dog park.\\n\\nHe's got that infectious Golden Retriever smile and a tail that wags so hard it could power a small generator. Max is the friend who's always ready for your next adventure, bringing joy and endless cuddles wherever he goes. His favorite activities include swimming, hiking, and convincing you to share your snacks with those irresistible puppy eyes!\\n\\nIf you're looking for a furry best friend who will keep you active and laughing every single day, Max is your guy! 🐾💕\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03735","severity":"P2","category":"Type","file":"apps/mobile/src/stories/mocks/bioMocks.ts","line":43,"code":"bio: \"Max is a well-mannered 2-year-old Golden Retriever with an impressive pedigree and impeccable temperament. He has undergone professional training and demonstrates excellent obedience skills. Max exhibits a calm, composed demeanor suitable for various professional environments.\\n\\nHis balanced personality makes him an ideal companion for individuals seeking a reliable, disciplined pet. Max maintains a consistent daily routine and responds well to structured activities. His health records are maintained with the utmost care, and he has received all standard vaccinations and regular veterinary check-ups.\\n\\nMax represents the ideal combination of loyalty, discipline, and companionship - perfect for those who appreciate the refined qualities of a well-trained companion animal.\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03736","severity":"P2","category":"Type","file":"apps/mobile/src/stories/mocks/bioMocks.ts","line":85,"code":"bio: \"Beneath the surface lies a story waiting to be discovered... 🕵️‍♂️ Max is not your ordinary Golden Retriever. At 2 years old, he carries an air of mystery that draws you in, challenging you to uncover his true nature.\\n\\nHis eyes hold secrets of adventures yet to be written. There's something intriguing about the way he watches the world, as if he sees beyond the ordinary. Those who take the time to know Max discover layers of complexity, unexpected intelligence, and a unique perspective on life.\\n\\nFor those who appreciate the enigmatic, who are drawn to stories yet untold, Max offers the promise of a journey unlike any other. Will you dare to explore the depths of this mysterious companion's soul? The choice is yours...\",","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03737","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":37,"code":"colors: [\"#ec4899\", \"#db2777\"] as ColorValue[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03738","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":43,"code":"colors: [\"#0ea5e9\", \"#9333ea\"] as ColorValue[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03739","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":49,"code":"colors: [\"#ec4899\", \"#0ea5e9\", \"#3b82f6\"] as ColorValue[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03740","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":63,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03741","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":71,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03742","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":79,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03743","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":93,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03744","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":100,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03745","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":107,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03746","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":114,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03747","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":121,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03748","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":130,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03749","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":137,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03750","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":144,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03751","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":151,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03752","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":158,"code":"} as ViewStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03753","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":207,"code":"} as TextStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03754","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":212,"code":"} as TextStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03755","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":217,"code":"} as TextStyle,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03756","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":246,"code":"<LinearGradient colors={g.colors as string[]} start={g.start} end={g.end}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03757","severity":"P2","category":"Type","file":"apps/mobile/src/styles/EnhancedDesignTokens.tsx","line":256,"code":"/** MotionSystem — timings, easings (as Easing functions), and spring presets */","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03758","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/index.tsx","line":102,"code":"export { customRender as render };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03759","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/index.tsx","line":139,"code":"mockApiResponse: (data: any) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03760","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":13,"code":"const body = await request.json() as { email: string; password: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03761","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":117,"code":"...(body as Record<string, unknown>),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03762","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":126,"code":"...(body as Record<string, unknown>),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03763","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":163,"code":"const body = await request.json() as { petId: string; targetPetId: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03764","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":173,"code":"const body = await request.json() as { petId: string; likedPetId: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03765","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":217,"code":"const body = await request.json() as { pet1Id: string; pet2Id: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03766","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":256,"code":"...(body as Record<string, unknown>),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03767","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":266,"code":"...(body as Record<string, unknown>),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03768","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":267,"code":"reactions: [{ type: (body as any).reactionType, count: 1 }],","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03769","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":267,"code":"reactions: [{ type: (body as any).reactionType, count: 1 }],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03770","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":279,"code":"type: (body as any).type,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03771","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":279,"code":"type: (body as any).type,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03772","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":290,"code":"duration: (body as any).duration,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03773","severity":"P2","category":"Type","file":"apps/mobile/src/test-utils/msw/handlers.ts","line":290,"code":"duration: (body as any).duration,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03774","severity":"P1","category":"Type","file":"apps/mobile/src/theme/ThemeProvider.tsx","line":14,"code":"void import(\"../services/logger\").then(({ logger }) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03775","severity":"P2","category":"Type","file":"apps/mobile/src/theme/UnifiedThemeProvider.tsx","line":19,"code":"import { createTheme as createNewTheme } from \"./rnTokens\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03776","severity":"P1","category":"Type","file":"apps/mobile/src/theme/UnifiedThemeProvider.tsx","line":24,"code":"void import(\"../services/logger\").then(({ logger }) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03777","severity":"P2","category":"Type","file":"apps/mobile/src/theme/__tests__/theme.integration.test.ts","line":5,"code":"test('has ergonomic keys', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03778","severity":"P2","category":"Type","file":"apps/mobile/src/theme/__tests__/useTheme.test.ts","line":53,"code":"expect(typeof theme.colors[color as keyof typeof theme.colors]).toBe('string');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03779","severity":"P2","category":"Type","file":"apps/mobile/src/theme/__tests__/useTheme.test.ts","line":106,"code":"expect(typeof theme.spacing[size as keyof typeof theme.spacing]).toBe('number');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03780","severity":"P2","category":"Type","file":"apps/mobile/src/theme/__tests__/useTheme.test.ts","line":151,"code":"expect(typeof theme.radius[size as keyof typeof theme.radius]).toBe('number');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03781","severity":"P2","category":"Type","file":"apps/mobile/src/theme/adapters.ts","line":95,"code":"} as ExtendedColors;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03782","severity":"P2","category":"Type","file":"apps/mobile/src/theme/hooks.ts","line":21,"code":"useColors as useColorsFromProvider,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03783","severity":"P2","category":"Type","file":"apps/mobile/src/theme/hooks.ts","line":22,"code":"useSpacing as useSpacingFromProvider,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03784","severity":"P2","category":"Type","file":"apps/mobile/src/theme/hooks.ts","line":55,"code":"} as ColorPalette;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03785","severity":"P2","category":"Type","file":"apps/mobile/src/theme/hooks.ts","line":87,"code":"return {} as TypographyScale; // Not implemented in new theme","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03786","severity":"P2","category":"Type","file":"apps/mobile/src/theme/hooks.ts","line":94,"code":"return { transparent: 0, visible: 1 } as Record<string, number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03787","severity":"P2","category":"Type","file":"apps/mobile/src/theme/hooks.ts","line":101,"code":"return { none: 0, thin: 1, medium: 2, thick: 3 } as Record<string, number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03788","severity":"P2","category":"Type","file":"apps/mobile/src/theme/hooks.ts","line":108,"code":"return { sm: 16, md: 24, lg: 32, xl: 48 } as Record<string, number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03789","severity":"P2","category":"Type","file":"apps/mobile/src/theme/hooks.ts","line":115,"code":"return { fast: 150, normal: 250, slow: 400 } as Record<string, number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03790","severity":"P2","category":"Type","file":"apps/mobile/src/theme/hooks.ts","line":122,"code":"return { base: 0, elevated: 1, overlay: 1000, modal: 2000 } as Record<string, number>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03791","severity":"P2","category":"Type","file":"apps/mobile/src/theme/hooks.ts","line":136,"code":"styles: {} as Record<string, unknown>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03792","severity":"P2","category":"Type","file":"apps/mobile/src/theme/resolve.ts","line":2,"code":"import { Theme as BaseLight, DarkTheme as BaseDark } from './unified-theme';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03793","severity":"P2","category":"Type","file":"apps/mobile/src/theme/resolve.ts","line":59,"code":"[key: string]: any; // allows any additional color properties","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03794","severity":"P2","category":"Type","file":"apps/mobile/src/theme/resolve.ts","line":61,"code":"/** alias expected by refactored screens */","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03795","severity":"P2","category":"Type","file":"apps/mobile/src/theme/resolve.ts","line":122,"code":"export type { AppTheme as ThemeLike };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03796","severity":"P2","category":"Type","file":"apps/mobile/src/theme/tokens.ts","line":9,"code":"COLORS as DESIGN_COLORS,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03797","severity":"P2","category":"Type","file":"apps/mobile/src/theme/tokens.ts","line":10,"code":"SPACING as DESIGN_SPACING,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03798","severity":"P2","category":"Type","file":"apps/mobile/src/theme/tokens.ts","line":11,"code":"RADIUS as DESIGN_RADIUS,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03799","severity":"P2","category":"Type","file":"apps/mobile/src/theme/tokens.ts","line":12,"code":"TYPOGRAPHY as DESIGN_TYPOGRAPHY,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03800","severity":"P2","category":"Type","file":"apps/mobile/src/theme/tokens.ts","line":13,"code":"TRANSITIONS as DESIGN_TRANSITIONS,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03801","severity":"P2","category":"Type","file":"apps/mobile/src/theme/tokens.ts","line":14,"code":"Z_INDEX as DESIGN_Z_INDEX,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03802","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":116,"code":"xs: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03803","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":117,"code":"sm: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03804","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":118,"code":"md: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03805","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":119,"code":"lg: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03806","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":120,"code":"xl: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03807","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":123,"code":"sm: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03808","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":124,"code":"md: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03809","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":125,"code":"lg: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03810","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":173,"code":"colors: SemanticColors & { primary: PrimaryScale; secondary?: any; semantic?: any };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03811","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":179,"code":"breakpoints?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03812","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":180,"code":"gradients?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03813","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":181,"code":"glass?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03814","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":182,"code":"glow?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03815","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":183,"code":"shadow?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03816","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":184,"code":"zIndex?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03817","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":504,"code":"// Shadow effects (alias for shadows.depth)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03818","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":580,"code":"export type { DynamicColors as TDynamicColors };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03819","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":581,"code":"export type { EnhancedShadows as TEnhancedShadows };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03820","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":582,"code":"export type { SemanticColors as TSemanticColors };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03821","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":583,"code":"export type { EnhancedTypography as TEnhancedTypography };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03822","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":584,"code":"export type { UnifiedTheme as TUnifiedTheme };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03823","severity":"P2","category":"Type","file":"apps/mobile/src/theme/unified-theme.ts","line":585,"code":"// PrimaryScale and NeutralScale are already exported above as types","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03824","severity":"P2","category":"Type","file":"apps/mobile/src/types/ionicons.d.ts","line":1,"code":"import * as React from 'react';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03825","severity":"P2","category":"Type","file":"apps/mobile/src/types/ionicons.d.ts","line":6,"code":"name: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03826","severity":"P2","category":"Type","file":"apps/mobile/src/types/ionicons.d.ts","line":14,"code":"glyphMap: any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03827","severity":"P2","category":"Type","file":"apps/mobile/src/types/ionicons.d.ts","line":17,"code":"options?: any","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03828","severity":"P2","category":"Type","file":"apps/mobile/src/types/native-webrtc.d.ts","line":28,"code":"* Type guard to check if a MediaStreamTrack has native methods","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03829","severity":"P2","category":"Type","file":"apps/mobile/src/types/native-webrtc.d.ts","line":31,"code":"return '_switchCamera' in track && typeof (track as MediaStreamTrackWithNativeMethods)._switchCamera === 'function';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03830","severity":"P2","category":"Type","file":"apps/mobile/src/types/native-webrtc.ts","line":29,"code":"* Type guard to check if a MediaStreamTrack has native methods","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03831","severity":"P2","category":"Type","file":"apps/mobile/src/types/native-webrtc.ts","line":32,"code":"return track !== null && '_switchCamera' in track && typeof (track as MediaStreamTrackWithNativeMethods)._switchCamera === 'function';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03832","severity":"P2","category":"Type","file":"apps/mobile/src/types/navigation.d.ts","line":8,"code":"import type * as React from 'react';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03833","severity":"P2","category":"Type","file":"apps/mobile/src/ui/haptics.ts","line":7,"code":"import * as Haptics from 'expo-haptics';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03834","severity":"P1","category":"Type","file":"apps/mobile/src/ui/haptics.ts","line":16,"code":"tap: () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light).catch(() => {}),","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03835","severity":"P1","category":"Type","file":"apps/mobile/src/ui/haptics.ts","line":19,"code":"confirm: () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium).catch(() => {}),","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03836","severity":"P1","category":"Type","file":"apps/mobile/src/ui/haptics.ts","line":22,"code":"super: () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy).catch(() => {}),","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03837","severity":"P1","category":"Type","file":"apps/mobile/src/ui/haptics.ts","line":25,"code":"error: () => Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error).catch(() => {}),","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03838","severity":"P1","category":"Type","file":"apps/mobile/src/ui/haptics.ts","line":28,"code":"success: () => Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success).catch(() => {}),","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03839","severity":"P1","category":"Type","file":"apps/mobile/src/ui/haptics.ts","line":31,"code":"selection: () => Haptics.selectionAsync().catch(() => {}),","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03840","severity":"P2","category":"Type","file":"apps/mobile/src/ui/layout/ScreenShell.tsx","line":48,"code":"const makeStyles = (theme: any) => StyleSheet.create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03841","severity":"P2","category":"Type","file":"apps/mobile/src/utils/A11yHelpers.ts","line":29,"code":"Promise.resolve(\"light\" as ColorScheme), // Would need native module for actual scheme","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03842","severity":"P1","category":"Type","file":"apps/mobile/src/utils/A11yHelpers.ts","line":149,"code":"AccessibilityInfo.isReduceMotionEnabled().then((enabled) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03843","severity":"P1","category":"Type","file":"apps/mobile/src/utils/A11yHelpers.ts","line":180,"code":"AccessibilityInfo.isScreenReaderEnabled().then((enabled) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03844","severity":"P2","category":"Type","file":"apps/mobile/src/utils/AbortableWorker.ts","line":37,"code":"return Promise.reject(new Error(\"Worker has been aborted\"));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03845","severity":"P2","category":"Type","file":"apps/mobile/src/utils/AutoCropEngine.ts","line":2,"code":"import { Image as RNImage } from \"react-native\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03846","severity":"P2","category":"Type","file":"apps/mobile/src/utils/AutoCropEngine.ts","line":3,"code":"import * as ImageManipulator from \"expo-image-manipulator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03847","severity":"P2","category":"Type","file":"apps/mobile/src/utils/AutoCropEngine.ts","line":15,"code":"eyeWeight?: number;       // 0..1 (how much to bias toward eyes)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03848","severity":"P2","category":"Type","file":"apps/mobile/src/utils/AutoCropEngine.ts","line":24,"code":"let FaceDetector: any = null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03849","severity":"P2","category":"Type","file":"apps/mobile/src/utils/AutoCropEngine.ts","line":110,"code":"function buildEyeWeightedFocus(faces: any[], imgW: number, imgH: number, eyeWeight = 0.55): { rect: Rect; method: \"eyes\" | \"face\" } {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03850","severity":"P2","category":"Type","file":"apps/mobile/src/utils/AutoCropEngine.ts","line":111,"code":"const faceRects: Rect[] = faces.map((f: any) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03851","severity":"P2","category":"Type","file":"apps/mobile/src/utils/AutoCropEngine.ts","line":155,"code":"// Bias slightly upward (forehead/ears for pets)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03852","severity":"P2","category":"Type","file":"apps/mobile/src/utils/AutoCropEngine.ts","line":156,"code":"const upwardBias = Math.max(8, base.height * 0.08);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03853","severity":"P2","category":"Type","file":"apps/mobile/src/utils/BatchAutoCrop.ts","line":29,"code":"} catch (e: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03854","severity":"P2","category":"Type","file":"apps/mobile/src/utils/CropGuides.ts","line":99,"code":"* Expands canvas to protect edges (paws, ears) from cropping","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03855","severity":"P2","category":"Type","file":"apps/mobile/src/utils/PerformanceMonitor.ts","line":127,"code":"logger.warn(\"Interaction was not started\", { interactionName: name });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03856","severity":"P2","category":"Type","file":"apps/mobile/src/utils/PerformanceMonitor.ts","line":323,"code":"const originalMethod = descriptor.value as (...args: unknown[]) => unknown;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03857","severity":"P2","category":"Type","file":"apps/mobile/src/utils/QualityScore.ts","line":7,"code":"import * as FileSystem from \"expo-file-system\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03858","severity":"P2","category":"Type","file":"apps/mobile/src/utils/QualityScore.ts","line":8,"code":"import * as ImageManipulator from \"expo-image-manipulator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03859","severity":"P2","category":"Type","file":"apps/mobile/src/utils/QualityScore.ts","line":40,"code":"return (info.exists && typeof (info as any).size === 'number') ? (info as any).size : 0;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03860","severity":"P2","category":"Type","file":"apps/mobile/src/utils/QualityScore.ts","line":40,"code":"return (info.exists && typeof (info as any).size === 'number') ? (info as any).size : 0;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03861","severity":"P2","category":"Type","file":"apps/mobile/src/utils/QualityTargets.ts","line":25,"code":"return QualityTargets[ratio as KnownRatio] || null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03862","severity":"P2","category":"Type","file":"apps/mobile/src/utils/SuperRes.ts","line":6,"code":"import * as ImageManipulator from \"expo-image-manipulator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03863","severity":"P2","category":"Type","file":"apps/mobile/src/utils/SuperRes.ts","line":158,"code":"* Always resolves (Bicubic adapter is always available as fallback)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03864","severity":"P2","category":"Type","file":"apps/mobile/src/utils/TiledUpscaler.ts","line":7,"code":"import * as ImageManipulator from \"expo-image-manipulator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03865","severity":"P2","category":"Type","file":"apps/mobile/src/utils/TiledUpscaler.ts","line":8,"code":"import * as FileSystem from \"expo-file-system\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03866","severity":"P2","category":"Type","file":"apps/mobile/src/utils/TiledUpscaler.ts","line":15,"code":"async function loadSkia(): Promise<any> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03867","severity":"P2","category":"Type","file":"apps/mobile/src/utils/TiledUpscaler.ts","line":151,"code":"const canvas = surface.getCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03868","severity":"P1","category":"Type","file":"apps/mobile/src/utils/TiledUpscaler.ts","line":208,"code":".then(resolve)","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03869","severity":"P1","category":"Type","file":"apps/mobile/src/utils/TiledUpscaler.ts","line":209,"code":".catch(reject);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-03870","severity":"P2","category":"Type","file":"apps/mobile/src/utils/UltraBatch.ts","line":56,"code":"} catch (e: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03871","severity":"P2","category":"Type","file":"apps/mobile/src/utils/UltraBatch.ts","line":106,"code":"} catch (e: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03872","severity":"P2","category":"Type","file":"apps/mobile/src/utils/UltraPublish.ts","line":13,"code":"import * as ImageManipulator from \"expo-image-manipulator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03873","severity":"P2","category":"Type","file":"apps/mobile/src/utils/UltraPublish.ts","line":45,"code":"// This function was removed and replaced with generateTrioCrops which has cleaner implementation","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03874","severity":"P2","category":"Type","file":"apps/mobile/src/utils/UltraPublish.ts","line":125,"code":"for (const kind of [\"tight\", \"medium\", \"loose\"] as TrioKind[]) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03875","severity":"P2","category":"Type","file":"apps/mobile/src/utils/Unsharp.ts","line":7,"code":"import * as FileSystem from \"expo-file-system\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03876","severity":"P2","category":"Type","file":"apps/mobile/src/utils/Unsharp.ts","line":14,"code":"async function loadSkia(): Promise<any> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03877","severity":"P2","category":"Type","file":"apps/mobile/src/utils/Unsharp.ts","line":81,"code":"const canvas = surface.getCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03878","severity":"P2","category":"Type","file":"apps/mobile/src/utils/Unsharp.ts","line":90,"code":"const blurCanvas = blurSurface.getCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03879","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/A11yHelpers.test.ts","line":28,"code":"(AccessibilityInfo.isScreenReaderEnabled as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03880","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/A11yHelpers.test.ts","line":38,"code":"(AccessibilityInfo.isScreenReaderEnabled as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03881","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/A11yHelpers.test.ts","line":50,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03882","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/A11yHelpers.test.ts","line":60,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03883","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/A11yHelpers.test.ts","line":72,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03884","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/A11yHelpers.test.ts","line":82,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03885","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/A11yHelpers.test.ts","line":94,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03886","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/A11yHelpers.test.ts","line":104,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03887","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/A11yHelpers.test.ts","line":114,"code":"(AccessibilityInfo.isReduceMotionEnabled as jest.Mock).mockResolvedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03888","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AbortableWorker.test.ts","line":62,"code":"\"Worker has been aborted\"","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03889","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AutoCropEngine.test.ts","line":2,"code":"import * as ImageManipulator from \"expo-image-manipulator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03890","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AutoCropEngine.test.ts","line":3,"code":"import { Image as RNImage } from \"react-native\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03891","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AutoCropEngine.test.ts","line":43,"code":"(RNImage.getSize as jest.Mock).mockImplementation((uri, callback) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03892","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AutoCropEngine.test.ts","line":83,"code":"(RNImage.getSize as jest.Mock).mockImplementation((uri, callback) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03893","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AutoCropEngine.test.ts","line":118,"code":"(RNImage.getSize as jest.Mock).mockImplementation((uri, callback) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03894","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AutoCropEngine.test.ts","line":148,"code":"(ImageManipulator.manipulateAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03895","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AutoCropEngine.test.ts","line":191,"code":"(ImageManipulator.manipulateAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03896","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AutoCropEngine.test.ts","line":253,"code":"(RNImage.getSize as jest.Mock).mockImplementation((uri, callback) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03897","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AutoCropEngine.test.ts","line":264,"code":"(RNImage.getSize as jest.Mock).mockImplementation((uri, callback) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03898","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AutoCropEngine.test.ts","line":274,"code":"(RNImage.getSize as jest.Mock).mockImplementation((uri, callback) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03899","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/AutoCropEngine.test.ts","line":284,"code":"(RNImage.getSize as jest.Mock).mockImplementation((uri, callback) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03900","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/BatchAutoCrop.test.ts","line":16,"code":"(AutoCropEngine.suggestCrops as jest.Mock).mockResolvedValue([","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03901","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/BatchAutoCrop.test.ts","line":24,"code":"(AutoCropEngine.applyCrop as jest.Mock).mockImplementation(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03902","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/BatchAutoCrop.test.ts","line":75,"code":"const calls: any[] = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03903","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/BatchAutoCrop.test.ts","line":76,"code":"(AutoCropEngine.suggestCrops as jest.Mock).mockImplementation(async (uri) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03904","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/BatchAutoCrop.test.ts","line":101,"code":"(AutoCropEngine.suggestCrops as jest.Mock).mockImplementation(async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03905","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/BatchAutoCrop.test.ts","line":127,"code":"const progressCalls: any[] = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03906","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/BatchAutoCrop.test.ts","line":143,"code":"(AutoCropEngine.suggestCrops as jest.Mock).mockRejectedValueOnce(new Error(\"Processing failed\"));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03907","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/BatchAutoCrop.test.ts","line":145,"code":"const progressCalls: any[] = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03908","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/BatchAutoCrop.test.ts","line":165,"code":"(AutoCropEngine.suggestCrops as jest.Mock).mockImplementation(async (uri) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03909","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/BatchAutoCrop.test.ts","line":181,"code":"(AutoCropEngine.suggestCrops as jest.Mock).mockResolvedValueOnce([]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03910","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/BatchAutoCrop.test.ts","line":191,"code":"(AutoCropEngine.suggestCrops as jest.Mock).mockRejectedValue(new Error(\"All failed\"));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03911","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":2,"code":"import * as ImageManipulator from \"expo-image-manipulator\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03912","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":3,"code":"import * as FileSystem from \"expo-file-system\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03913","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":26,"code":"(ImageManipulator.manipulateAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03914","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":30,"code":"(FileSystem.getInfoAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03915","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":34,"code":"(FileSystem.deleteAsync as jest.Mock).mockResolvedValue(undefined);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03916","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":61,"code":"(ImageManipulator.manipulateAsync as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03917","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":71,"code":"(FileSystem.deleteAsync as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03918","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":81,"code":"(FileSystem.getInfoAsync as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03919","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":100,"code":"(FileSystem.getInfoAsync as jest.Mock).mockImplementation(() => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03920","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":114,"code":"it(\"should return only URI when array has one element\", async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03921","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":128,"code":"(ImageManipulator.manipulateAsync as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03922","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":140,"code":"(FileSystem.getInfoAsync as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03923","severity":"P2","category":"Type","file":"apps/mobile/src/utils/__tests__/QualityScore.test.ts","line":152,"code":"(FileSystem.getInfoAsync as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03924","severity":"P2","category":"Type","file":"apps/mobile/src/utils/audio/upload-helpers.ts","line":6,"code":"import * as FileSystem from \"expo-file-system\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03925","severity":"P2","category":"Type","file":"apps/mobile/src/utils/audio/web-processing.ts","line":7,"code":"return typeof window !== \"undefined\" && !!(window.AudioContext || (window as any).webkitAudioContext);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03926","severity":"P2","category":"Type","file":"apps/mobile/src/utils/audio/web-processing.ts","line":7,"code":"return typeof window !== \"undefined\" && !!(window.AudioContext || (window as any).webkitAudioContext);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03927","severity":"P2","category":"Type","file":"apps/mobile/src/utils/audio/web-processing.ts","line":28,"code":"const AC = (window.AudioContext || (window as any).webkitAudioContext);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03928","severity":"P2","category":"Type","file":"apps/mobile/src/utils/audio/web-processing.ts","line":28,"code":"const AC = (window.AudioContext || (window as any).webkitAudioContext);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03929","severity":"P2","category":"Type","file":"apps/mobile/src/utils/deepLinking.ts","line":32,"code":"? (pathSegments[0] as DeepLinkData[\"type\"])","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03930","severity":"P2","category":"Type","file":"apps/mobile/src/utils/deepLinking.ts","line":87,"code":"// Handle initial URL if app was opened from a link","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03931","severity":"P2","category":"Type","file":"apps/mobile/src/utils/deepLinking.ts","line":169,"code":"const type = parts[0] as DeepLinkData[\"type\"];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03932","severity":"P2","category":"Type","file":"apps/mobile/src/utils/deepLinking.ts","line":374,"code":"// as the addEventListener returns a subscription that should be removed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03933","severity":"P2","category":"Type","file":"apps/mobile/src/utils/hapticFeedback.ts","line":1,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03934","severity":"P2","category":"Type","file":"apps/mobile/src/utils/hapticFeedback.ts","line":196,"code":"config.type as Haptics.NotificationFeedbackType,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03935","severity":"P2","category":"Type","file":"apps/mobile/src/utils/hapticFeedback.ts","line":199,"code":"await Haptics.impactAsync(config.type as Haptics.ImpactFeedbackStyle);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03936","severity":"P2","category":"Type","file":"apps/mobile/src/utils/haptics.ts","line":6,"code":"import * as Haptics from \"expo-haptics\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03937","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":13,"code":"import { estimateHorizonAngle, rotateCanvas } from \"../horizon\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03938","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":25,"code":"* Helper: Create test canvas with gradient or pattern","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03939","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":28,"code":"const canvas = document.createElement(\"canvas\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03940","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":45,"code":"* Helper: Create high-contrast canvas for sharpness tests","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03941","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":48,"code":"const canvas = document.createElement(\"canvas\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03942","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":68,"code":"const canvas = createTestCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03943","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":79,"code":"const canvas = createHighContrastCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03944","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":86,"code":"const canvas = createTestCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03945","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":92,"code":"const canvas = createTestCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03946","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":102,"code":"const canvas = createTestCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03947","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":109,"code":"const canvas = createTestCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03948","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":118,"code":"const canvas = createTestCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03949","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":124,"code":"test(\"rotateCanvas preserves dimensions\", () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03950","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":125,"code":"const canvas = createTestCanvas(200, 150);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03951","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":135,"code":"const canvas = createHighContrastCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03952","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":143,"code":"const canvas = createHighContrastCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03953","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":150,"code":"const canvas = createHighContrastCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03954","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":158,"code":"const canvas = createTestCanvas(200, 200);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03955","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":168,"code":"const canvas = createTestCanvas(400, 500);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03956","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":186,"code":"const canvas = createHighContrastCanvas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03957","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/__tests__/pro-modules.test.ts","line":198,"code":"const canvas = createTestCanvas(300, 400);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03958","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/auto_crop.ts","line":14,"code":"* @param canvas - Source canvas","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03959","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/auto_crop.ts","line":50,"code":"* @param canvas - Source canvas","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03960","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/auto_crop.ts","line":77,"code":"* Clamp rectangle to canvas bounds","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03961","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/crop_scorer.ts","line":104,"code":"* @param canvas - Source canvas","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03962","severity":"P3","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":24,"code":"console.log(\"Processed:\", blob.size, \"bytes\");","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03963","severity":"P3","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":25,"code":"console.log(\"Report:\", report);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03964","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":31,"code":"const baselineCanvas = await loadImageToCanvas(fileBlob);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03965","severity":"P3","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":46,"code":"console.log(\"Quality found:\", report.export.quality);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03966","severity":"P3","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":47,"code":"console.log(\"SSIM achieved:\", report.export.ssim);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03967","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":53,"code":"const canvas = await loadImageToCanvas(originalBlob);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03968","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":56,"code":"const thumbCanvas = document.createElement(\"canvas\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03969","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":99,"code":"async function getCachedProcessed(originalUri: string, opts: any): Promise<Blob> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03970","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":117,"code":"const originalCanvas = await loadImageToCanvas(fileBlob);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03971","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":136,"code":"const thumbCanvas = document.createElement(\"canvas\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03972","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":174,"code":"const { blob, report, canvas } = await processImageUltraPro(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03973","severity":"P3","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":214,"code":"console.log(\"PRO Report:\", {","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03974","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":229,"code":"const { estimateHorizonAngle, rotateCanvas } = await import('./horizon');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03975","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":232,"code":"let canvas = await loadImageToCanvas(fileBlob);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03976","severity":"P3","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":236,"code":"console.log(\"Clipped pixels:\", (clipFrac * 100).toFixed(1) + \"%\");","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03977","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":241,"code":"canvas = rotateCanvas(canvas, -angle);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03978","severity":"P3","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":242,"code":"console.log(\"Rotated:\", angle.toFixed(1) + \"°\");","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03979","severity":"P3","category":"Type","file":"apps/mobile/src/utils/image-ultra/example-usage.ts","line":260,"code":"console.log(\"Best crop:\", best.key, \"score:\", best.score.toFixed(3));","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"mobile"}
{"id":"AUD-TYP-03980","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/filters.ts","line":2,"code":"* Canvas Image Filters","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03981","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/filters.ts","line":12,"code":"* @param canvas - Canvas to denoise (mutated)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03982","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/filters.ts","line":66,"code":"* @param canvas - Canvas to sharpen (mutated)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03983","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/filters.ts","line":79,"code":"// Blur pass using canvas filter -> offscreen copy","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03984","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/filters_extras.ts","line":10,"code":"* @param canvas - Canvas to process (mutated)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03985","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/filters_extras.ts","line":49,"code":"* @param canvas - Canvas to process (mutated)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03986","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/filters_extras.ts","line":93,"code":"* @param canvas - Canvas to process (mutated)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03987","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/filters_extras.ts","line":129,"code":"* @param canvas - Canvas to process (mutated)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03988","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/histogram.ts","line":30,"code":"* @param canvas - Source canvas","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03989","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/horizon.ts","line":9,"code":"* @param canvas - Source canvas","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03990","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/horizon.ts","line":88,"code":"* Rotate canvas by specified angle and crop to fit","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03991","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/horizon.ts","line":92,"code":"* @returns New rotated canvas with proper dimensions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03992","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline.ts","line":35,"code":"* Load image blob to canvas with EXIF orientation correction","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03993","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline.ts","line":106,"code":"): Promise<{ blob: Blob; report: any; canvas: HTMLCanvasElement }> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03994","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline.ts","line":107,"code":"let canvas = await loadImageToCanvas(input);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03995","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline.ts","line":108,"code":"const report: any = {};","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-03996","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline.ts","line":112,"code":"canvas = tileUpscaleCanvas(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03997","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline.ts","line":146,"code":"return { blob, report, canvas };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03998","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline.ts","line":165,"code":"const compCanvas = await loadImageToCanvas(candidate);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-03999","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline.ts","line":193,"code":"return { blob, report, canvas };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04000","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline.ts","line":213,"code":"return { blob, report, canvas };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04001","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline_pro.ts","line":19,"code":"import { estimateHorizonAngle, rotateCanvas } from \"./horizon\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04002","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline_pro.ts","line":42,"code":"report: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-04003","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline_pro.ts","line":46,"code":"const baselineCanvas = await loadImageToCanvas(input);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04004","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline_pro.ts","line":102,"code":"// Cut canvas to cropRect","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04005","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/pipeline_pro.ts","line":125,"code":"export: baseOpts.export, // adaptive/fixed as you passed in","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04006","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/queue.ts","line":14,"code":"run: Task<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-04007","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/queue.ts","line":15,"code":"resolve: (v: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-04008","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/queue.ts","line":16,"code":"reject: (e: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-04009","severity":"P1","category":"Type","file":"apps/mobile/src/utils/image-ultra/queue.ts","line":41,"code":".then((v) => { job.resolve(v); })","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-04010","severity":"P1","category":"Type","file":"apps/mobile/src/utils/image-ultra/queue.ts","line":42,"code":".catch((e) => { job.reject(e); })","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-04011","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/ssim.ts","line":13,"code":"* @param a - First canvas (baseline)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04012","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/ssim.ts","line":14,"code":"* @param b - Second canvas (comparison)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04013","severity":"P2","category":"Type","file":"apps/mobile/src/utils/image-ultra/ssim.ts","line":100,"code":"* Downscale canvas using high-quality interpolation","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04014","severity":"P2","category":"Type","file":"apps/mobile/src/utils/premium.tsx","line":6,"code":"return function PremiumGuard(props: P & { navigation: any }) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-04015","severity":"P2","category":"Type","file":"apps/mobile/src/utils/premium.tsx","line":13,"code":"setAllowed(!!(response as any)?.active);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-04016","severity":"P2","category":"Type","file":"apps/mobile/src/utils/premium.tsx","line":13,"code":"setAllowed(!!(response as any)?.active);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04017","severity":"P2","category":"Type","file":"apps/mobile/src/utils/secureStorage.ts","line":3,"code":"import * as SecureStore from \"expo-secure-store\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04018","severity":"P2","category":"Type","file":"apps/mobile/src/utils/security.ts","line":17,"code":"// Input Validation Schemas (Zod)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04019","severity":"P2","category":"Type","file":"apps/mobile/src/utils/security.ts","line":18,"code":"export const UserInputSchemas = {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04020","severity":"P2","category":"Type","file":"apps/mobile/src/utils/security.ts","line":312,"code":"data as Record<string, unknown>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04021","severity":"P2","category":"Type","file":"apps/mobile/src/utils/security.ts","line":378,"code":"value as Record<string, unknown>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04022","severity":"P2","category":"Type","file":"apps/mobile/src/utils/withPremiumGate.tsx","line":31,"code":"const typedResponse = response as ApiResponse<PremiumStatus>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04023","severity":"P2","category":"Type","file":"apps/mobile/src/utils/withPremiumGate.tsx","line":32,"code":"return typedResponse.data ?? (response as PremiumStatus);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04024","severity":"P2","category":"Type","file":"apps/mobile/src/utils/withPremiumGate.tsx","line":45,"code":"return <Component {...(props as P)} />;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-04025","severity":"P2","category":"Type","file":"apps/web/src/Router.tsx","line":2,"code":"import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04026","severity":"P2","category":"Type","file":"apps/web/src/Router.tsx","line":14,"code":"{/* Add more routes as needed */}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04027","severity":"P2","category":"Type","file":"apps/web/src/__mocks__/framer-motion.ts","line":9,"code":"return React.forwardRef((props: Record<string, unknown>, ref: React.ForwardedRef<unknown>) => React.createElement(prop as string, { ...props, ref }));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04028","severity":"P2","category":"Type","file":"apps/web/src/__mocks__/service-worker.d.ts","line":48,"code":"options: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04029","severity":"P2","category":"Type","file":"apps/web/src/__mocks__/service-worker.ts","line":123,"code":"options: (_options || {}) as PushSubscriptionOptions,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04030","severity":"P2","category":"Type","file":"apps/web/src/__mocks__/webrtc.ts","line":194,"code":"return Promise.resolve({} as RTCStatsReport);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04031","severity":"P2","category":"Type","file":"apps/web/src/__mocks__/webrtc.ts","line":278,"code":"kind: 'videoinput' as MediaDeviceKind,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04032","severity":"P2","category":"Type","file":"apps/web/src/__mocks__/webrtc.ts","line":284,"code":"kind: 'audioinput' as MediaDeviceKind,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04033","severity":"P2","category":"Type","file":"apps/web/src/__mocks__/webrtc.ts","line":290,"code":"kind: 'audiooutput' as MediaDeviceKind,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04034","severity":"P2","category":"Type","file":"apps/web/src/__mocks__/webrtc.ts","line":294,"code":"] as MediaDeviceInfo[]),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04035","severity":"P2","category":"Type","file":"apps/web/src/__tests__/accessibility-premium.test.tsx","line":39,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04036","severity":"P2","category":"Type","file":"apps/web/src/__tests__/accessibility-premium.test.tsx","line":44,"code":"(api.subscription.getUsageStats as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04037","severity":"P2","category":"Type","file":"apps/web/src/__tests__/accessibility-premium.test.tsx","line":187,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04038","severity":"P2","category":"Type","file":"apps/web/src/__tests__/accessibility-premium.test.tsx","line":209,"code":"// Check if button has appropriate padding/size classes","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04039","severity":"P2","category":"Type","file":"apps/web/src/__tests__/accessibility-premium.test.tsx","line":237,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04040","severity":"P2","category":"Type","file":"apps/web/src/__tests__/accessibility-premium.test.tsx","line":268,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04041","severity":"P2","category":"Type","file":"apps/web/src/__tests__/accessibility-premium.test.tsx","line":298,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04042","severity":"P2","category":"Type","file":"apps/web/src/__tests__/accessibility.test.tsx","line":318,"code":"// Check if announcement element was created","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04043","severity":"P2","category":"Type","file":"apps/web/src/__tests__/auth.test.tsx","line":8,"code":"import { _useAuthStore as useAuthStore } from '../stores/auth-store';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04044","severity":"P2","category":"Type","file":"apps/web/src/__tests__/auth.test.tsx","line":29,"code":"it('should set tokens and mark as authenticated', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04045","severity":"P2","category":"Type","file":"apps/web/src/__tests__/auth.test.tsx","line":43,"code":"it('should set user and mark as authenticated', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04046","severity":"P2","category":"Type","file":"apps/web/src/__tests__/comprehensive.test.tsx","line":242,"code":"test('API service has all required methods', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04047","severity":"P2","category":"Type","file":"apps/web/src/__tests__/comprehensive.test.tsx","line":278,"code":"test('Weather service has all providers', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04048","severity":"P2","category":"Type","file":"apps/web/src/__tests__/comprehensive.test.tsx","line":292,"code":"test('SwipeCard has proper ARIA labels', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04049","severity":"P2","category":"Type","file":"apps/web/src/__tests__/comprehensive.test.tsx","line":300,"code":"test('LoadingSpinner has proper accessibility attributes', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04050","severity":"P2","category":"Type","file":"apps/web/src/__tests__/integration.test.ts","line":118,"code":"// Check that component has proper TypeScript interface","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04051","severity":"P2","category":"Type","file":"apps/web/src/__tests__/integration.test.ts","line":171,"code":"// Skip if preview config doesn't exist or has CSS import issues","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04052","severity":"P2","category":"Type","file":"apps/web/src/__tests__/integration.test.ts","line":202,"code":"// Check that middleware exists and has basic structure","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04053","severity":"P2","category":"Type","file":"apps/web/src/__tests__/premium-components.test.tsx","line":352,"code":"// Should show second photo indicator as active","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04054","severity":"P2","category":"Type","file":"apps/web/src/__tests__/storybook-integration.test.ts","line":170,"code":"// Check that component has proper TypeScript interfaces","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04055","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":73,"code":"(api.subscription.createCheckoutSession as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04056","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":91,"code":"(api.subscription.createCheckoutSession as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04057","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":132,"code":"const mockHandleWebhook = api.subscription.handleWebhook as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04058","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":138,"code":"const mockLoggerInfo = logger.info as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04059","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":157,"code":"(api.subscription.handleWebhook as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04060","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":168,"code":"expect(logger.info as jest.Mock).toHaveBeenCalledWith(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04061","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":188,"code":"(api.subscription.handleWebhook as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04062","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":199,"code":"expect(logger.info as jest.Mock).toHaveBeenCalledWith(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04063","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":219,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04064","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":232,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04065","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":259,"code":"(api.subscription.handleWebhook as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04066","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":270,"code":"expect(logger.warn as jest.Mock).toHaveBeenCalledWith(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04067","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":288,"code":"(api.subscription.handleWebhook as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04068","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":299,"code":"expect(logger.warn as jest.Mock).toHaveBeenCalledWith(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04069","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":320,"code":"(api.subscription.handleWebhook as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04070","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":331,"code":"expect(logger.info as jest.Mock).toHaveBeenCalledWith(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04071","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":351,"code":"(api.subscription.handleWebhook as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04072","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":362,"code":"expect(logger.info as jest.Mock).toHaveBeenCalledWith(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04073","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":377,"code":"(api.subscription.cancelSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04074","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":389,"code":"(api.subscription.reactivateSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04075","severity":"P2","category":"Type","file":"apps/web/src/__tests__/stripe-integration.test.ts","line":410,"code":"(api.subscription.updateSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04076","severity":"P2","category":"Type","file":"apps/web/src/__tests__/test-helpers.d.ts","line":99,"code":"export declare const _customRender: (ui: any, options?: {}) => any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04077","severity":"P2","category":"Type","file":"apps/web/src/__tests__/test-helpers.ts","line":113,"code":"// Use context providers as needed for tests","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04078","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":59,"code":"(logger.info as jest.Mock) = jest.fn();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04079","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":60,"code":"(logger.warn as jest.Mock) = jest.fn();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04080","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":61,"code":"(logger.error as jest.Mock) = jest.fn();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04081","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":120,"code":"// Use correct RTCSessionDescriptionInit type with 'offer' as RTCSdpType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04082","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":121,"code":"const mockOffer = { type: 'offer' as RTCSdpType, sdp: 'test-sdp-offer' };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04083","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":124,"code":"(api.videoCall.sendOffer as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04084","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":136,"code":"const mockAnswer = { type: 'answer' as RTCSdpType, sdp: 'test-sdp-answer' };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04085","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":139,"code":"(api.videoCall.getAnswer as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04086","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":159,"code":"(api.videoCall.sendIceCandidate as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04087","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":223,"code":"(api.videoCall.createCall as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04088","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":237,"code":"(api.videoCall.joinCall as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04089","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":251,"code":"(api.videoCall.endCall as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04090","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":258,"code":"// Just verify the API was called correctly","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04091","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":266,"code":"(api.videoCall.createCall as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04092","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":293,"code":"(api.videoCall.sendIceCandidate as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04093","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":313,"code":"(api.videoCall.startRecording as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04094","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":327,"code":"(api.videoCall.stopRecording as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04095","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":341,"code":"(api.videoCall.startRecording as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04096","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":365,"code":"// Check that getDisplayMedia was called","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04097","severity":"P2","category":"Type","file":"apps/web/src/__tests__/video-call-integration.test.ts","line":368,"code":"// Check that the stream was returned","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04098","severity":"P2","category":"Type","file":"apps/web/src/app/(protected)/calendar/page.tsx","line":6,"code":"import { _useAuthStore as useAuthStore } from '@/stores/auth-store';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04099","severity":"P2","category":"Type","file":"apps/web/src/app/(protected)/leaderboard/page.tsx","line":5,"code":"import { _useAuthStore as useAuthStore } from '@/stores/auth-store';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04100","severity":"P2","category":"Type","file":"apps/web/src/app/(protected)/map/page.tsx","line":4,"code":"import { _useAuthStore as useAuthStore } from '@/stores/auth-store';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04101","severity":"P2","category":"Type","file":"apps/web/src/app/(protected)/map/page.tsx","line":29,"code":"description: 'A spacious off-leash dog park with separate areas for small and large dogs, water fountains, and plenty of shade.',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04102","severity":"P2","category":"Type","file":"apps/web/src/app/(protected)/pets/[id]/page.tsx","line":5,"code":"import { _useAuthStore as useAuthStore } from '@/stores/auth-store';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04103","severity":"P2","category":"Type","file":"apps/web/src/app/(protected)/pets/page.tsx","line":2,"code":"import { _useAuthStore as useAuthStore } from '@/stores/auth-store';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04104","severity":"P2","category":"Type","file":"apps/web/src/app/(protected)/profile/page.tsx","line":9,"code":"import { _useAuthStore as useAuthStore } from '@/stores/auth-store';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04105","severity":"P2","category":"Type","file":"apps/web/src/app/(protected)/profile/page.tsx","line":47,"code":"toast.success('Photo uploaded successfully!', 'Your profile photo has been updated.');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04106","severity":"P2","category":"Type","file":"apps/web/src/app/(protected)/reminders/page.tsx","line":5,"code":"import { _useAuthStore as useAuthStore } from '@/stores/auth-store';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04107","severity":"P2","category":"Type","file":"apps/web/src/app/(protected)/reminders/page.tsx","line":177,"code":"Mark tasks as complete to track your pet care history.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04108","severity":"P2","category":"Type","file":"apps/web/src/app/(protected)/settings/page.tsx","line":11,"code":"import { _useAuthStore as useAuthStore } from '@/stores/auth-store';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04109","severity":"P2","category":"Type","file":"apps/web/src/app/animations-demo/page.tsx","line":349,"code":"ref={ref as React.RefObject<HTMLDivElement>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04110","severity":"P2","category":"Type","file":"apps/web/src/app/animations-demo/page.tsx","line":351,"code":"style={{ ['--delay' as string]: `${delay}ms` }}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04111","severity":"P2","category":"Type","file":"apps/web/src/app/api/auth/[...nextauth]/route.d.ts","line":5,"code":"declare const handler: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04112","severity":"P2","category":"Type","file":"apps/web/src/app/api/auth/[...nextauth]/route.d.ts","line":6,"code":"export { handler as GET, handler as POST };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04113","severity":"P2","category":"Type","file":"apps/web/src/app/api/auth/[...nextauth]/route.ts","line":8,"code":"export { handler as GET, handler as POST };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04114","severity":"P2","category":"Type","file":"apps/web/src/app/api/notifications/register-token/route.d.ts","line":8,"code":"message: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04115","severity":"P2","category":"Type","file":"apps/web/src/app/components/UI/LoadingSpinner.d.ts","line":4,"code":"className: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04116","severity":"P2","category":"Type","file":"apps/web/src/app/index.ts","line":1,"code":"// Re-export App component as default","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04117","severity":"P2","category":"Type","file":"apps/web/src/app/index.tsx","line":32,"code":"document.getElementById('root') as HTMLElement","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04118","severity":"P2","category":"Type","file":"apps/web/src/app/providers/AppProviders.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04119","severity":"P2","category":"Type","file":"apps/web/src/app/providers/AppProviders.tsx","line":12,"code":"gcTime: 10 * 60 * 1000, // 10 minutes (was cacheTime)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04120","severity":"P1","category":"Type","file":"apps/web/src/app/reportWebVitals.ts","line":3,"code":"import('web-vitals').then(({ onCLS, onINP, onFCP, onLCP, onTTFB }) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04121","severity":"P2","category":"Type","file":"apps/web/src/app/share/[petId]/page.d.ts","line":2,"code":"params: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04122","severity":"P2","category":"Type","file":"apps/web/src/app/share/[petId]/page.d.ts","line":16,"code":"url: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04123","severity":"P2","category":"Type","file":"apps/web/src/app/share/[petId]/page.d.ts","line":29,"code":"images: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04124","severity":"P2","category":"Type","file":"apps/web/src/app/share/[petId]/page.d.ts","line":37,"code":"params: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04125","severity":"P2","category":"Type","file":"apps/web/src/components/AI/AIBioAssistant.d.ts","line":8,"code":"onBioGenerated: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04126","severity":"P2","category":"Type","file":"apps/web/src/components/AI/CompatibilityAnalyzer.d.ts","line":2,"code":"targetPetId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04127","severity":"P2","category":"Type","file":"apps/web/src/components/AI/CompatibilityAnalyzer.d.ts","line":3,"code":"pet1: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04128","severity":"P2","category":"Type","file":"apps/web/src/components/AI/CompatibilityAnalyzer.d.ts","line":4,"code":"pet2: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04129","severity":"P2","category":"Type","file":"apps/web/src/components/Accessibility/LiveRegion.d.ts","line":2,"code":"message: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04130","severity":"P2","category":"Type","file":"apps/web/src/components/AccessibilityProvider.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04131","severity":"P2","category":"Type","file":"apps/web/src/components/Account/DeactivateAccountDialog.d.ts","line":2,"code":"open: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04132","severity":"P2","category":"Type","file":"apps/web/src/components/Account/DeactivateAccountDialog.d.ts","line":3,"code":"onOpenChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04133","severity":"P2","category":"Type","file":"apps/web/src/components/Account/DeactivateAccountDialog.d.ts","line":4,"code":"userId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04134","severity":"P2","category":"Type","file":"apps/web/src/components/Account/DeactivateAccountDialog.d.ts","line":5,"code":"onSuccess: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04135","severity":"P2","category":"Type","file":"apps/web/src/components/Account/DeleteAccountDialog.d.ts","line":2,"code":"onOpenChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04136","severity":"P2","category":"Type","file":"apps/web/src/components/Account/DeleteAccountDialog.d.ts","line":3,"code":"userEmail: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04137","severity":"P2","category":"Type","file":"apps/web/src/components/Account/DeleteAccountDialog.d.ts","line":4,"code":"userId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04138","severity":"P2","category":"Type","file":"apps/web/src/components/Account/DeleteAccountDialog.d.ts","line":5,"code":"onSuccess: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04139","severity":"P2","category":"Type","file":"apps/web/src/components/Account/__tests__/DeleteAccountDialog.test.tsx","line":104,"code":"(AccountService as jest.Mock).mockImplementation(() => ({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04140","severity":"P2","category":"Type","file":"apps/web/src/components/Account/__tests__/DeleteAccountDialog.test.tsx","line":206,"code":"(AccountService as jest.Mock).mockImplementation(() => ({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04141","severity":"P2","category":"Type","file":"apps/web/src/components/Account/__tests__/DeleteAccountDialog.test.tsx","line":239,"code":"(AccountService as jest.Mock).mockImplementation(() => ({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04142","severity":"P2","category":"Type","file":"apps/web/src/components/Account/__tests__/DeleteAccountDialog.test.tsx","line":265,"code":"(AccountService as jest.Mock).mockImplementation(() => ({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04143","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AIAdoptionAssistant.d.ts","line":2,"code":"application: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04144","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AIAdoptionAssistant.d.ts","line":3,"code":"pet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04145","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AIAdoptionAssistant.d.ts","line":4,"code":"onCompatibilityUpdate: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04146","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AIAdoptionAssistant.d.ts","line":5,"code":"onRecommendationAction: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04147","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AIAdoptionAssistant.tsx","line":66,"code":"factors.push('Applicant has prior pet ownership experience');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04148","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AIAdoptionAssistant.tsx","line":247,"code":"Areas of Concern","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04149","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AIAdoptionAssistant.tsx","line":296,"code":"{application.petExperience.hasOwnedPets ? 'Has pet experience' : 'First-time owner'}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04150","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AdoptionApplicationForm.d.ts","line":2,"code":"petId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04151","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AdoptionApplicationForm.d.ts","line":3,"code":"shelterId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04152","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AdoptionApplicationForm.d.ts","line":4,"code":"onSubmit: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04153","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AdoptionApplicationForm.d.ts","line":5,"code":"initialData: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04154","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AdoptionApplicationForm.tsx","line":18,"code":"* The actual TypeScript type is inferred from this schema as AdoptionApplicationFormData","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04155","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AdoptionStoriesGallery.d.ts","line":2,"code":"stories: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04156","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AdoptionStoriesGallery.d.ts","line":3,"code":"onLoadMore: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04157","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AdoptionStoriesGallery.tsx","line":3,"code":"import { CardComponent as Card, CardContentComponent as CardContent } from '@/components/ui/card';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04158","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AdoptionStoriesGallery.tsx","line":4,"code":"import { CarouselComponent as Carousel, CarouselContentComponent as CarouselContent, CarouselItemComponent as CarouselItem, CarouselNextComponent as CarouselNext, CarouselPreviousComponent as CarouselPrevious, } from '@/components/ui/carousel';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04159","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/AdoptionStoriesGallery.tsx","line":5,"code":"import { DialogComponent as Dialog, DialogContentComponent as DialogContent, DialogDescriptionComponent as DialogDescription, DialogHeaderComponent as DialogHeader, DialogTitleComponent as DialogTitle, } from '@/components/ui/dialog';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04160","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/RescueWorkflowManager.d.ts","line":2,"code":"applicationId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04161","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/ShelterRegistration.d.ts","line":2,"code":"onSubmit: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04162","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/ShelterRegistration.d.ts","line":3,"code":"initialData: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04163","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/ShelterRegistration.tsx","line":387,"code":"Your shelter will be listed as \"Pending Verification\" until our team reviews your","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04164","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/VirtualMeetupScheduler.d.ts","line":2,"code":"petId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04165","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/VirtualMeetupScheduler.d.ts","line":3,"code":"applicantId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04166","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/VirtualMeetupScheduler.d.ts","line":4,"code":"shelterId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04167","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/VirtualMeetupScheduler.d.ts","line":5,"code":"applicationId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04168","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/VirtualMeetupScheduler.d.ts","line":6,"code":"onSchedule: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04169","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/LifestyleSection.d.ts","line":2,"code":"form: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04170","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/LifestyleSection.d.ts","line":3,"code":"onNext: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04171","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/LifestyleSection.d.ts","line":4,"code":"onBack: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04172","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/LivingSituationSection.d.ts","line":2,"code":"form: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04173","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/LivingSituationSection.d.ts","line":3,"code":"onNext: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04174","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/LivingSituationSection.d.ts","line":4,"code":"onBack: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04175","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/LivingSituationSection.d.ts","line":5,"code":"watchedResidenceType: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04176","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/LivingSituationSection.d.ts","line":6,"code":"watchedOwnership: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04177","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/PersonalInfoSection.d.ts","line":2,"code":"form: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04178","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/PersonalInfoSection.d.ts","line":3,"code":"onNext: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04179","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/PersonalInfoSection.d.ts","line":4,"code":"watchedHasChildren: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04180","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/PetExperienceSection.d.ts","line":2,"code":"form: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04181","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/PetExperienceSection.d.ts","line":3,"code":"onNext: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04182","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/PetExperienceSection.d.ts","line":4,"code":"onBack: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04183","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/PetExperienceSection.d.ts","line":5,"code":"watchedHasOwnedPets: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04184","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/PetExperienceSection.d.ts","line":6,"code":"watchedSpeciesPrefs: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04185","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/PetExperienceSection.d.ts","line":7,"code":"watchedSizePrefs: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04186","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/PetExperienceSection.d.ts","line":8,"code":"onSpeciesToggle: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04187","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/PetExperienceSection.d.ts","line":9,"code":"onSizeToggle: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04188","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/ReviewSection.d.ts","line":2,"code":"form: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04189","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/ReviewSection.d.ts","line":3,"code":"onBack: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04190","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/ReviewSection.d.ts","line":4,"code":"onSubmit: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04191","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/ReviewSection.d.ts","line":5,"code":"isSubmitting: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04192","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/ReviewSection.tsx","line":96,"code":"<strong>Has Owned Pets:</strong> {formData.petExperience.hasOwnedPets ? 'Yes' : 'No'}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04193","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/StepIndicator.d.ts","line":2,"code":"currentStep: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04194","severity":"P2","category":"Type","file":"apps/web/src/components/Adoption/sections/StepIndicator.d.ts","line":3,"code":"totalSteps: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04195","severity":"P2","category":"Type","file":"apps/web/src/components/Analytics/withAnalytics.d.ts","line":14,"code":"export declare function withAnalytics(Component: any, componentName: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04196","severity":"P2","category":"Type","file":"apps/web/src/components/Analytics/withAnalytics.d.ts","line":15,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04197","severity":"P2","category":"Type","file":"apps/web/src/components/Analytics/withAnalytics.d.ts","line":30,"code":"export declare function useComponentTracking(componentName: any, metadata: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04198","severity":"P2","category":"Type","file":"apps/web/src/components/Animation/AnimationTests.test.tsx","line":150,"code":"it('has transform-gpu class for hardware acceleration', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04199","severity":"P2","category":"Type","file":"apps/web/src/components/AnimationTest.tsx","line":196,"code":"<PremiumInput variant=\"default\" label=\"Error State\" placeholder=\"This has an error\" error=\"This field is required\" value=\"invalid@\"/>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04200","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MagneticButton.tsx","line":77,"code":"ref={mag.ref as React.RefObject<HTMLButtonElement>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04201","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":2,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04202","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04203","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":10,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04204","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":11,"code":"disabled: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04205","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":14,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04206","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":15,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04207","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":20,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04208","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":23,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04209","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":24,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04210","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":41,"code":"progress: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04211","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":48,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04212","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":49,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04213","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":55,"code":"count: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04214","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":66,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04215","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/MicroInteractions.d.ts","line":67,"code":"content: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04216","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":137,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04217","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":140,"code":"variants: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04218","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":144,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04219","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":149,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04220","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":153,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04221","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":154,"code":"layoutId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04222","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":158,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04223","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":159,"code":"show: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04224","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":164,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04225","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":169,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04226","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":174,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04227","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":179,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04228","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/PageTransition.d.ts","line":320,"code":"export declare function getRouteTransition(pathname: any): string;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04229","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":46,"code":"// Legacy type alias for backwards compatibility","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04230","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":101,"code":"y: L.yRange ?? ([0, 0] as Range2),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04231","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":206,"code":"scrollRange: [0, 800] as Range2,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04232","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":207,"code":"yRange: [0, -140] as Range2,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04233","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":208,"code":"opacityRange: [1, 1] as Range2,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04234","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":215,"code":"scrollRange: [0, 800] as Range2,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04235","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":216,"code":"yRange: [0, -70] as Range2,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04236","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":217,"code":"xRange: [0, 40] as Range2,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04237","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":218,"code":"opacityRange: [0.7, 0.95] as Range2,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04238","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":231,"code":"scrollRange: [0, 500] as Range2,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04239","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":232,"code":"yRange: [0, -30] as Range2,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04240","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":233,"code":"scaleRange: [0.9, 1] as Range2,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04241","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/ParallaxHero.tsx","line":234,"code":"opacityRange: [0, 1] as Range2,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04242","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/Reveal.tsx","line":67,"code":"ref={ref as React.RefObject<HTMLDivElement>}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04243","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/Reveal.tsx","line":69,"code":"style={{ ['--delay' as string]: `${index * 60}ms` }}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04244","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/SoundKit.tsx","line":34,"code":"audioContext.current = new (window.AudioContext || (window as any).webkitAudioContext)();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04245","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/SoundKit.tsx","line":34,"code":"audioContext.current = new (window.AudioContext || (window as any).webkitAudioContext)();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04246","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/TiltCardV2.tsx","line":85,"code":"const target = e.currentTarget as HTMLElement;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04247","severity":"P2","category":"Type","file":"apps/web/src/components/Animations/Utilities.tsx","line":104,"code":"style={{ ['--i' as string]: i }}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04248","severity":"P2","category":"Type","file":"apps/web/src/components/Auth/BiometricAuth.d.ts","line":2,"code":"onSuccess: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04249","severity":"P2","category":"Type","file":"apps/web/src/components/Auth/BiometricAuth.d.ts","line":3,"code":"onError: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04250","severity":"P2","category":"Type","file":"apps/web/src/components/Auth/BiometricAuth.d.ts","line":4,"code":"onFallback: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04251","severity":"P2","category":"Type","file":"apps/web/src/components/Auth/TwoFactorAuth.d.ts","line":2,"code":"onVerify: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04252","severity":"P2","category":"Type","file":"apps/web/src/components/Auth/TwoFactorAuth.d.ts","line":3,"code":"onSetup: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04253","severity":"P2","category":"Type","file":"apps/web/src/components/Auth/TwoFactorAuth.d.ts","line":4,"code":"mode: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04254","severity":"P2","category":"Type","file":"apps/web/src/components/Auth/TwoFactorAuth.d.ts","line":5,"code":"onCancel: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04255","severity":"P2","category":"Type","file":"apps/web/src/components/Background/BackgroundProvider.d.ts","line":9,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04256","severity":"P1","category":"Type","file":"apps/web/src/components/Background/FluidGradient.tsx","line":25,"code":"import('three').then((THREE) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04257","severity":"P2","category":"Type","file":"apps/web/src/components/Background/FluidGradient.tsx","line":431,"code":"// Only respond if clicking on empty areas (not on interactive elements)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04258","severity":"P1","category":"Type","file":"apps/web/src/components/Background/FluidGradient.tsx","line":545,"code":"}).catch(error => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04259","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04260","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":3,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04261","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":8,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04262","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":9,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04263","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":14,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04264","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":15,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04265","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":20,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04266","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":21,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04267","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":26,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04268","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":27,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04269","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":32,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04270","severity":"P2","category":"Type","file":"apps/web/src/components/ButtonShowcase2025.d.ts","line":33,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04271","severity":"P2","category":"Type","file":"apps/web/src/components/Calendar/EventForm.d.ts","line":2,"code":"date: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04272","severity":"P2","category":"Type","file":"apps/web/src/components/Calendar/EventForm.d.ts","line":3,"code":"pets: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04273","severity":"P2","category":"Type","file":"apps/web/src/components/Calendar/EventForm.d.ts","line":4,"code":"onSave: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04274","severity":"P2","category":"Type","file":"apps/web/src/components/Calendar/EventForm.d.ts","line":5,"code":"onCancel: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04275","severity":"P2","category":"Type","file":"apps/web/src/components/Calendar/EventForm.d.ts","line":6,"code":"event: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04276","severity":"P2","category":"Type","file":"apps/web/src/components/Calendar/PetCalendar.d.ts","line":3,"code":"onEventClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04277","severity":"P2","category":"Type","file":"apps/web/src/components/Calendar/PetCalendar.d.ts","line":4,"code":"onDateClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04278","severity":"P2","category":"Type","file":"apps/web/src/components/Calendar/PetCalendar.d.ts","line":5,"code":"onAddEvent: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04279","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/ChatHeader.d.ts","line":2,"code":"otherUser: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04280","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/ChatHeader.d.ts","line":3,"code":"otherPet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04281","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/ChatHeader.d.ts","line":4,"code":"currentUserPet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04282","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/EnhancedMessageInput.d.ts","line":2,"code":"onSendMessage: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04283","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/EnhancedMessageInput.d.ts","line":3,"code":"onTyping: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04284","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/EnhancedMessageInput.d.ts","line":7,"code":"draftKey: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04285","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/FileShare.d.ts","line":2,"code":"onFileSelect: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04286","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/FileShare.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04287","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/GifPicker.d.ts","line":2,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04288","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/GifPicker.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04289","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/GifPicker.d.ts","line":4,"code":"onSelectGif: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04290","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageBubble.d.ts","line":2,"code":"message: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04291","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageBubble.d.ts","line":3,"code":"isOwnMessage: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04292","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageBubble.d.ts","line":4,"code":"currentUser: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04293","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageBubble.tsx","line":5,"code":"import { CheckIcon as CheckSolidIcon } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04294","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageInput.test.tsx","line":72,"code":"(global.navigator as { geolocation: typeof mockGeolocation }).geolocation = mockGeolocation;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04295","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageInput.test.tsx","line":118,"code":"(fileUploadService.uploadImage as jest.Mock).mockResolvedValueOnce({ url: 'https://cdn.example/pic.png' });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04296","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageInput.test.tsx","line":122,"code":"// Click the Share Image button (has title)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04297","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageInput.test.tsx","line":126,"code":"const fileInput = screen.getByRole('textbox', { hidden: true }) as HTMLInputElement | null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04298","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageInput.test.tsx","line":128,"code":"const inputEl = (fileInput ?? (document.querySelector('input[type=\"file\"]') as HTMLInputElement));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04299","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageList.d.ts","line":2,"code":"messages: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04300","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageList.d.ts","line":3,"code":"currentUser: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04301","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageList.d.ts","line":4,"code":"isLoading: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04302","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageList.d.ts","line":5,"code":"hasMoreMessages: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04303","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageList.d.ts","line":6,"code":"typingUsers: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04304","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageList.d.ts","line":7,"code":"onLoadMore: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04305","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageList.d.ts","line":8,"code":"onScroll: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04306","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageReactions.d.ts","line":2,"code":"messageId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04307","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageReactions.d.ts","line":3,"code":"reactions: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04308","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageReactions.d.ts","line":4,"code":"onReact: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04309","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/MessageReactions.d.ts","line":5,"code":"currentUserId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04310","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/SimpleMessageList.d.ts","line":6,"code":"messages: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04311","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/SimpleMessageList.d.ts","line":7,"code":"currentUserId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04312","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/SimpleMessageList.d.ts","line":8,"code":"height: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04313","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/StickerPicker.d.ts","line":2,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04314","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/StickerPicker.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04315","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/StickerPicker.d.ts","line":4,"code":"onSelectSticker: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04316","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/TypingIndicator.d.ts","line":2,"code":"chatId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04317","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/TypingIndicator.d.ts","line":8,"code":"userId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04318","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/TypingIndicator.d.ts","line":13,"code":"chatId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04319","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/TypingIndicator.d.ts","line":14,"code":"onSendMessage: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04320","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/TypingIndicator.test.tsx","line":59,"code":"it('has correct styling classes', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04321","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/VirtualizedMessageList.d.ts","line":6,"code":"messages: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04322","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/VirtualizedMessageList.d.ts","line":7,"code":"currentUserId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04323","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/VirtualizedMessageList.d.ts","line":8,"code":"height: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04324","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/VoiceRecorder.d.ts","line":2,"code":"onSend: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04325","severity":"P2","category":"Type","file":"apps/web/src/components/Chat/VoiceRecorder.d.ts","line":3,"code":"onCancel: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04326","severity":"P2","category":"Type","file":"apps/web/src/components/Community/EnhancedCommunityFeed.d.ts","line":2,"code":"userId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04327","severity":"P2","category":"Type","file":"apps/web/src/components/Community/NotificationPrompt.d.ts","line":2,"code":"onEnable: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04328","severity":"P2","category":"Type","file":"apps/web/src/components/Community/NotificationPrompt.d.ts","line":3,"code":"onDismiss: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04329","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCard.d.ts","line":2,"code":"post: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04330","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCard.d.ts","line":7,"code":"onLike: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04331","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCard.d.ts","line":8,"code":"onComment: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04332","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCard.d.ts","line":9,"code":"onShare: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04333","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCard.d.ts","line":10,"code":"onJoinActivity: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04334","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCard.d.ts","line":11,"code":"onFollow: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04335","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCard.d.ts","line":12,"code":"onUnfollow: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04336","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCard.d.ts","line":13,"code":"onReport: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04337","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCard.d.ts","line":14,"code":"onBlock: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04338","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCard.d.ts","line":15,"code":"onSelectPost: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04339","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCard.d.ts","line":16,"code":"formatTimeAgo: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04340","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCreation.d.ts","line":2,"code":"value: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04341","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCreation.d.ts","line":3,"code":"onChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04342","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCreation.d.ts","line":4,"code":"onSubmit: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04343","severity":"P2","category":"Type","file":"apps/web/src/components/Community/PostCreation.d.ts","line":5,"code":"isSubmitting: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04344","severity":"P2","category":"Type","file":"apps/web/src/components/Community/ReportDialog.d.ts","line":2,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04345","severity":"P2","category":"Type","file":"apps/web/src/components/Community/ReportDialog.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04346","severity":"P2","category":"Type","file":"apps/web/src/components/Community/ReportDialog.d.ts","line":4,"code":"onSubmit: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04347","severity":"P2","category":"Type","file":"apps/web/src/components/Community/ReportDialog.d.ts","line":5,"code":"isSubmitting: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04348","severity":"P2","category":"Type","file":"apps/web/src/components/Community/ReportDialog.d.ts","line":6,"code":"reportReasons: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04349","severity":"P2","category":"Type","file":"apps/web/src/components/Community/ReportDialog.d.ts","line":7,"code":"selectedReason: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04350","severity":"P2","category":"Type","file":"apps/web/src/components/Community/ReportDialog.d.ts","line":8,"code":"onReasonChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04351","severity":"P2","category":"Type","file":"apps/web/src/components/Community/ReportDialog.d.ts","line":9,"code":"details: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04352","severity":"P2","category":"Type","file":"apps/web/src/components/Community/ReportDialog.d.ts","line":10,"code":"onDetailsChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04353","severity":"P2","category":"Type","file":"apps/web/src/components/Community/ReportDialog.tsx","line":2,"code":"import { DialogComponent as Dialog, DialogContentComponent as DialogContent, DialogHeaderComponent as DialogHeader, DialogTitleComponent as DialogTitle, } from '@/components/ui/dialog';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04354","severity":"P1","category":"Type","file":"apps/web/src/components/DevTools.tsx","line":6,"code":"})).catch(() => ({","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04355","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/AppErrorBoundary.d.ts","line":7,"code":"constructor(props: any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04356","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/AppErrorBoundary.d.ts","line":8,"code":"static getDerivedStateFromError(error: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04357","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/AppErrorBoundary.d.ts","line":10,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04358","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/AppErrorBoundary.d.ts","line":12,"code":"componentDidCatch(error: any, errorInfo: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04359","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/AppErrorBoundary.d.ts","line":14,"code":"render(): any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04360","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/AppErrorBoundary.tsx","line":68,"code":"We&apos;re sorry for the inconvenience. The error has been logged and we&apos;ll","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04361","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/EnhancedErrorBoundary.d.ts","line":4,"code":"constructor(props: any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04362","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/EnhancedErrorBoundary.d.ts","line":5,"code":"static getDerivedStateFromError(error: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04363","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/EnhancedErrorBoundary.d.ts","line":7,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04364","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/EnhancedErrorBoundary.d.ts","line":10,"code":"componentDidCatch(error: any, errorInfo: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04365","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/EnhancedErrorBoundary.d.ts","line":11,"code":"logError: (error: any, errorInfo: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04366","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/EnhancedErrorBoundary.d.ts","line":12,"code":"sendToAnalytics: (errorData: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04367","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/EnhancedErrorBoundary.d.ts","line":13,"code":"shouldAutoRetry: (error: any) => boolean;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04368","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/EnhancedErrorBoundary.d.ts","line":19,"code":"render(): any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04369","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/EnhancedErrorBoundary.d.ts","line":25,"code":"handleError: (error: any, errorInfo: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04370","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/EnhancedErrorBoundary.d.ts","line":27,"code":"export declare function withErrorBoundary(Component: any, errorBoundaryProps: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04371","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/EnhancedErrorBoundary.d.ts","line":28,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04372","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.d.ts","line":8,"code":"constructor(props: any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04373","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.d.ts","line":9,"code":"static getDerivedStateFromError(error: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04374","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.d.ts","line":11,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04375","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.d.ts","line":14,"code":"componentDidCatch(error: any, errorInfo: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04376","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.d.ts","line":15,"code":"reportError: (error: any, errorInfo: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04377","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.d.ts","line":20,"code":"render(): any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04378","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.d.ts","line":33,"code":"export declare function withErrorBoundary(Component: any, errorBoundaryProps: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04379","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.d.ts","line":34,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04380","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.d.ts","line":41,"code":"constructor(props: any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04381","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.d.ts","line":44,"code":"handleUnhandledRejection: (event: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04382","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.d.ts","line":45,"code":"render(): any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04383","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/ErrorBoundary.tsx","line":131,"code":"We're experiencing technical difficulties. Our team has been notified and is working to fix this issue.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04384","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/GlobalErrorBoundary.d.ts","line":3,"code":"constructor(props: any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04385","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/GlobalErrorBoundary.d.ts","line":4,"code":"static getDerivedStateFromError(error: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04386","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/GlobalErrorBoundary.d.ts","line":6,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04387","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/GlobalErrorBoundary.d.ts","line":9,"code":"componentDidCatch(error: any, errorInfo: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04388","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/GlobalErrorBoundary.d.ts","line":10,"code":"logErrorToService: (error: any, errorInfo: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04389","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/GlobalErrorBoundary.d.ts","line":14,"code":"render(): any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04390","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/GlobalErrorBoundary.d.ts","line":16,"code":"export declare function useErrorHandler(): (error: any, errorInfo: any) => never;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04391","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/GlobalErrorBoundary.d.ts","line":17,"code":"export declare function withErrorBoundary(Component: any, errorBoundaryProps: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04392","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/GlobalErrorBoundary.d.ts","line":18,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04393","severity":"P1","category":"Type","file":"apps/web/src/components/ErrorBoundary/GlobalErrorBoundary.tsx","line":59,"code":"}).catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04394","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/GlobalErrorBoundary.tsx","line":96,"code":"We're sorry, but something unexpected happened. Our team has been notified.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04395","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/SectionErrorBoundary.d.ts","line":5,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04396","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/SectionErrorBoundary.d.ts","line":6,"code":"section: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04397","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/SectionErrorBoundary.d.ts","line":7,"code":"fallback: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04398","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/SectionErrorBoundary.d.ts","line":8,"code":"onError: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04399","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/SectionErrorBoundary.d.ts","line":14,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04400","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/SectionErrorBoundary.d.ts","line":20,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04401","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/SectionErrorBoundary.d.ts","line":26,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04402","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/SectionErrorBoundary.d.ts","line":32,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04403","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary/SectionErrorBoundary.d.ts","line":38,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04404","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary.d.ts","line":3,"code":"constructor(props: any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04405","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary.d.ts","line":4,"code":"static getDerivedStateFromError(error: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04406","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary.d.ts","line":6,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04407","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary.d.ts","line":8,"code":"componentDidCatch(error: any, errorInfo: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04408","severity":"P2","category":"Type","file":"apps/web/src/components/ErrorBoundary.d.ts","line":11,"code":"render(): any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04409","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/HomeFeed.d.ts","line":2,"code":"posts: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04410","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/HomeFeed.d.ts","line":3,"code":"onLoadMore: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04411","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/HomeFeed.d.ts","line":4,"code":"onLike: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04412","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/HomeFeed.d.ts","line":5,"code":"onComment: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04413","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/HomeFeed.d.ts","line":6,"code":"onShare: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04414","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/HomeFeed.d.ts","line":7,"code":"onBookmark: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04415","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/HomeFeed.d.ts","line":14,"code":"loadMorePosts: () => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04416","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/HomeFeed.tsx","line":11,"code":"import { HeartIcon as HeartSolidIcon, BookmarkIcon as BookmarkSolidIcon } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04417","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/VirtualizedFeed.d.ts","line":2,"code":"items: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04418","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/VirtualizedFeed.d.ts","line":3,"code":"itemHeight: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04419","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/VirtualizedFeed.d.ts","line":4,"code":"onLoadMore: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04420","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/VirtualizedFeed.d.ts","line":5,"code":"renderItem: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04421","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/VirtualizedFeed.d.ts","line":11,"code":"index: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04422","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/VirtualizedFeed.d.ts","line":12,"code":"style: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04423","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/VirtualizedFeed.d.ts","line":13,"code":"data: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04424","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/VirtualizedFeed.d.ts","line":15,"code":"export declare function useVirtualizedFeed(initialItems: any, loadMoreFn: any, itemHeight?: number): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04425","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/VirtualizedFeed.d.ts","line":16,"code":"items: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04426","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/VirtualizedFeed.d.ts","line":19,"code":"loadMore: () => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04427","severity":"P2","category":"Type","file":"apps/web/src/components/Feed/VirtualizedFeed.tsx","line":10,"code":"import { FixedSizeList as List, ListChildComponentProps } from 'react-window';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04428","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/AdvancedFilterPanel.d.ts","line":2,"code":"filters: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04429","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/AdvancedFilterPanel.d.ts","line":3,"code":"onFiltersChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04430","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/AdvancedFilterPanel.d.ts","line":4,"code":"onApply: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04431","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/AdvancedFilterPanel.d.ts","line":5,"code":"onReset: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04432","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/AdvancedFilterPanel.d.ts","line":6,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04433","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/AdvancedFilterPanel.d.ts","line":7,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04434","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/BreedSearchInput.d.ts","line":2,"code":"value: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04435","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/BreedSearchInput.d.ts","line":3,"code":"onChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04436","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/BreedSearchInput.d.ts","line":4,"code":"onSelect: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04437","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/BreedSearchInput.d.ts","line":5,"code":"species: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04438","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/UltraPremiumFilterPanel.d.ts","line":2,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04439","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/UltraPremiumFilterPanel.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04440","severity":"P2","category":"Type","file":"apps/web/src/components/Filter/UltraPremiumFilterPanel.d.ts","line":4,"code":"onApply: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04441","severity":"P2","category":"Type","file":"apps/web/src/components/Filters/AdvancedPetFilters.d.ts","line":2,"code":"value: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04442","severity":"P2","category":"Type","file":"apps/web/src/components/Filters/AdvancedPetFilters.d.ts","line":3,"code":"onChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04443","severity":"P2","category":"Type","file":"apps/web/src/components/Filters/AdvancedPetFilters.d.ts","line":4,"code":"onReset: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04444","severity":"P2","category":"Type","file":"apps/web/src/components/Filters/AdvancedPetFilters.d.ts","line":5,"code":"onApply: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04445","severity":"P2","category":"Type","file":"apps/web/src/components/Filters/__tests__/AdvancedPetFilters.test.tsx","line":481,"code":"it('has proper ARIA labels and descriptions', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04446","severity":"P2","category":"Type","file":"apps/web/src/components/Filters/__tests__/AdvancedPetFilters.test.tsx","line":498,"code":"it('has proper group labeling for personality tags', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04447","severity":"P2","category":"Type","file":"apps/web/src/components/Gamification/AchievementBadges.d.ts","line":2,"code":"achievements: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04448","severity":"P2","category":"Type","file":"apps/web/src/components/Gamification/AchievementBadges.d.ts","line":3,"code":"onBadgeClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04449","severity":"P2","category":"Type","file":"apps/web/src/components/Gamification/DailyStreak.d.ts","line":2,"code":"currentStreak: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04450","severity":"P2","category":"Type","file":"apps/web/src/components/Gamification/DailyStreak.d.ts","line":3,"code":"longestStreak: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04451","severity":"P2","category":"Type","file":"apps/web/src/components/Gamification/DailyStreak.d.ts","line":4,"code":"lastCheckIn: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04452","severity":"P2","category":"Type","file":"apps/web/src/components/Gamification/Leaderboard.d.ts","line":2,"code":"entries: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04453","severity":"P2","category":"Type","file":"apps/web/src/components/Gamification/Leaderboard.d.ts","line":3,"code":"category: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04454","severity":"P2","category":"Type","file":"apps/web/src/components/Gamification/Leaderboard.d.ts","line":4,"code":"timeframe: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04455","severity":"P2","category":"Type","file":"apps/web/src/components/Gamification/Leaderboard.d.ts","line":5,"code":"onCategoryChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04456","severity":"P2","category":"Type","file":"apps/web/src/components/Gamification/Leaderboard.d.ts","line":6,"code":"onTimeframeChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04457","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04458","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":3,"code":"onRefresh: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04459","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":10,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04460","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":11,"code":"onSwipeLeft: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04461","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":12,"code":"onSwipeRight: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04462","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":13,"code":"onSwipeUp: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04463","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":14,"code":"onSwipeDown: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04464","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":21,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04465","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":22,"code":"onLongPress: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04466","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":28,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04467","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":35,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04468","severity":"P2","category":"Type","file":"apps/web/src/components/GestureEnabledComponents.d.ts","line":36,"code":"onPan: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04469","severity":"P2","category":"Type","file":"apps/web/src/components/HydrationBoundary.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04470","severity":"P3","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":188,"code":"onClick={() => { console.log(`View ${pet.name}`); }}","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-04471","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":226,"code":"scrollRange: [0, 800] as [number, number],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04472","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":227,"code":"yRange: [0, -140] as [number, number],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04473","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":228,"code":"opacityRange: [1, 1] as [number, number],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04474","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":235,"code":"scrollRange: [0, 800] as [number, number],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04475","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":236,"code":"yRange: [0, -70] as [number, number],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04476","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":237,"code":"xRange: [0, 40] as [number, number],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04477","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":238,"code":"opacityRange: [0.7, 0.95] as [number, number],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04478","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":245,"code":"scrollRange: [0, 500] as [number, number],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04479","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":246,"code":"yRange: [0, -30] as [number, number],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04480","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":247,"code":"scaleRange: [0.9, 1] as [number, number],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04481","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/LandingPage.tsx","line":248,"code":"opacityRange: [0, 1] as [number, number],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04482","severity":"P2","category":"Type","file":"apps/web/src/components/Landing/index.ts","line":6,"code":"export { default as LandingPage } from './LandingPage';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04483","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/DashboardBackdrop.d.ts","line":3,"code":"* Placed as the *first* child inside a page component so all content layers over it.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04484","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/DashboardBackdrop.tsx","line":8,"code":"* Extend as desired. Gradients use TailwindCSS utilities.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04485","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/DashboardBackdrop.tsx","line":23,"code":"* Placed as the *first* child inside a page component so all content layers over it.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04486","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/Header.tsx","line":4,"code":"import { ChatBubbleLeftRightIcon as ChatSolid, HeartIcon as HeartSolid, MapPinIcon as MapPinSolid, UserIcon as UserSolid, } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04487","severity":"P1","category":"Type","file":"apps/web/src/components/Layout/Header.tsx","line":46,"code":"logout().then(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04488","severity":"P1","category":"Type","file":"apps/web/src/components/Layout/Header.tsx","line":48,"code":"}).catch((error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04489","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/Header.tsx","line":171,"code":"</div>)} tooltip={`Logged in as ${typedUser?.firstName || 'User'}`} aria-label={`User menu for ${typedUser?.firstName || 'User'}`} apiOperation=\"user-logout\">","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04490","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/PageTransition.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04491","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/PageTransition.test.tsx","line":49,"code":"it('has proper animation variants structure', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04492","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/PremiumLayout.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04493","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/ProtectedLayout.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04494","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":40,"code":"const altText = (props as { alt?: string }).alt || '';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04495","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":73,"code":"(useAuth as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04496","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":123,"code":"(useAuth as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04497","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":134,"code":"(useAuth as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04498","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":146,"code":"(useAuth as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04499","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":153,"code":"// Only one \"Premium\" text should exist (in context, not as button)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04500","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":196,"code":"fireEvent.click(logoutButton as HTMLElement);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04501","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":263,"code":"fireEvent.click(mobileDiscoverLink as HTMLElement);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04502","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":277,"code":"fireEvent.click(addPetLinks[1] as HTMLElement); // Mobile version","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04503","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":292,"code":"fireEvent.click(logoutButtons[1] as HTMLElement); // Mobile version","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04504","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":316,"code":"it('has proper ARIA labels for buttons', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04505","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":323,"code":"it('has proper ARIA labels for billing toggles', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04506","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":435,"code":"(useAuth as jest.Mock).mockReturnValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04507","severity":"P2","category":"Type","file":"apps/web/src/components/Layout/__tests__/Header.test.tsx","line":452,"code":"fireEvent.click(logoutButton as HTMLElement);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04508","severity":"P2","category":"Type","file":"apps/web/src/components/LazyLoadWrapper.d.ts","line":2,"code":"export declare function LazyLoadWrapper(importFunc: any, options?: {}): React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04509","severity":"P2","category":"Type","file":"apps/web/src/components/LazyLoadWrapper.d.ts","line":11,"code":"export declare function preloadComponent(importFunc: any): () => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04510","severity":"P2","category":"Type","file":"apps/web/src/components/LazyLoadWrapper.d.ts","line":13,"code":"setLoading: (componentName: any, loading: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04511","severity":"P2","category":"Type","file":"apps/web/src/components/LazyLoadWrapper.d.ts","line":14,"code":"isComponentLoading: (componentName: any) => any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04512","severity":"P2","category":"Type","file":"apps/web/src/components/LazyLoadWrapper.tsx","line":7,"code":"import { ComponentType as CommonComponentType } from '@/types/common';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04513","severity":"P2","category":"Type","file":"apps/web/src/components/Location/LocationPrivacy.d.ts","line":2,"code":"currentSettings: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04514","severity":"P2","category":"Type","file":"apps/web/src/components/Location/LocationPrivacy.d.ts","line":3,"code":"onSettingsChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04515","severity":"P2","category":"Type","file":"apps/web/src/components/Location/NearbyEvents.d.ts","line":2,"code":"userLocation: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04516","severity":"P2","category":"Type","file":"apps/web/src/components/Location/NearbyEvents.d.ts","line":3,"code":"onEventSelect: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04517","severity":"P2","category":"Type","file":"apps/web/src/components/Location/TravelMode.d.ts","line":2,"code":"isActive: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04518","severity":"P2","category":"Type","file":"apps/web/src/components/Location/TravelMode.d.ts","line":3,"code":"onToggle: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04519","severity":"P2","category":"Type","file":"apps/web/src/components/Location/TravelMode.d.ts","line":4,"code":"onLocationChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04520","severity":"P2","category":"Type","file":"apps/web/src/components/Map/AIMapFeatures.d.ts","line":2,"code":"pins: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04521","severity":"P2","category":"Type","file":"apps/web/src/components/Map/AIMapFeatures.d.ts","line":3,"code":"userLocation: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04522","severity":"P2","category":"Type","file":"apps/web/src/components/Map/AIMapFeatures.d.ts","line":4,"code":"onInsightClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04523","severity":"P2","category":"Type","file":"apps/web/src/components/Map/AIMapFeatures.tsx","line":161,"code":"const crowdedAreas = pins.filter(pin => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04524","severity":"P2","category":"Type","file":"apps/web/src/components/Map/AIMapFeatures.tsx","line":170,"code":"description: 'This area has high pet traffic. Ensure your pet is comfortable with crowds.',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04525","severity":"P2","category":"Type","file":"apps/web/src/components/Map/MapView.d.ts","line":3,"code":"filters: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04526","severity":"P2","category":"Type","file":"apps/web/src/components/Map/PlaygroundMap.d.ts","line":8,"code":"onPlaygroundSelect: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04527","severity":"P2","category":"Type","file":"apps/web/src/components/Map/PlaygroundMap.d.ts","line":9,"code":"onMyLocationClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04528","severity":"P2","category":"Type","file":"apps/web/src/components/Map/PlaygroundMap.d.ts","line":10,"code":"onFilterChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04529","severity":"P2","category":"Type","file":"apps/web/src/components/MemoryWeave/ConversationTimeline.d.ts","line":2,"code":"messages: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04530","severity":"P2","category":"Type","file":"apps/web/src/components/MemoryWeave/ConversationTimeline.tsx","line":164,"code":"How your conversation has progressed through different stages of connection","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04531","severity":"P2","category":"Type","file":"apps/web/src/components/MemoryWeave/MemoryWeave.d.ts","line":3,"code":"onMemoryClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04532","severity":"P2","category":"Type","file":"apps/web/src/components/MemoryWeave/MemoryWeave3D.d.ts","line":2,"code":"matchId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04533","severity":"P2","category":"Type","file":"apps/web/src/components/MemoryWeave/MemoryWeave3D.d.ts","line":3,"code":"userId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04534","severity":"P2","category":"Type","file":"apps/web/src/components/MemoryWeave/MemoryWeave3D.d.ts","line":4,"code":"partnerId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04535","severity":"P2","category":"Type","file":"apps/web/src/components/MemoryWeave/MemoryWeave3D.d.ts","line":5,"code":"messages: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04536","severity":"P2","category":"Type","file":"apps/web/src/components/MemoryWeave/MemoryWeave3D.d.ts","line":6,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04537","severity":"P2","category":"Type","file":"apps/web/src/components/MemoryWeave/index.d.ts","line":1,"code":"export { default as MemoryWeave } from './MemoryWeave';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04538","severity":"P2","category":"Type","file":"apps/web/src/components/MemoryWeave/index.ts","line":1,"code":"export { default as MemoryWeave } from './MemoryWeave';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04539","severity":"P2","category":"Type","file":"apps/web/src/components/Notifications/SmartNotifications.d.ts","line":2,"code":"preferences: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04540","severity":"P2","category":"Type","file":"apps/web/src/components/Notifications/SmartNotifications.d.ts","line":3,"code":"onUpdate: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04541","severity":"P2","category":"Type","file":"apps/web/src/components/PWA/InstallPrompt.tsx","line":178,"code":"Install as a desktop app for better performance","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04542","severity":"P2","category":"Type","file":"apps/web/src/components/PWA/PWAManager.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04543","severity":"P2","category":"Type","file":"apps/web/src/components/PWA/PWAManager.d.ts","line":16,"code":"showNotification: (title: any, options: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04544","severity":"P2","category":"Type","file":"apps/web/src/components/PWA/PWAManager.d.ts","line":17,"code":"vibrate: (pattern: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04545","severity":"P2","category":"Type","file":"apps/web/src/components/PWA/PWAManager.d.ts","line":18,"code":"share: (data: any) => Promise<boolean>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04546","severity":"P1","category":"Type","file":"apps/web/src/components/PWA/PWAManager.tsx","line":37,"code":".then((registration) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04547","severity":"P1","category":"Type","file":"apps/web/src/components/PWA/PWAManager.tsx","line":51,"code":".catch((error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04548","severity":"P2","category":"Type","file":"apps/web/src/components/PWA/PWAManager.tsx","line":124,"code":"// Check if running as PWA","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04549","severity":"P2","category":"Type","file":"apps/web/src/components/PWA/SplashScreen.d.ts","line":2,"code":"onComplete: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04550","severity":"P2","category":"Type","file":"apps/web/src/components/PWA/SplashScreen.d.ts","line":6,"code":"onComplete: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04551","severity":"P2","category":"Type","file":"apps/web/src/components/PWA/SplashScreen.d.ts","line":9,"code":"onComplete: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04552","severity":"P2","category":"Type","file":"apps/web/src/components/PWA/SplashScreen.d.ts","line":12,"code":"onComplete: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04553","severity":"P2","category":"Type","file":"apps/web/src/components/PWAProvider.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04554","severity":"P1","category":"Type","file":"apps/web/src/components/PWAProvider.tsx","line":229,"code":"getCacheUsage().then(setCacheUsage);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04555","severity":"P1","category":"Type","file":"apps/web/src/components/PWAProvider.tsx","line":246,"code":"getCacheUsage().then(setCacheUsage);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04556","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/CodeSplitter.d.ts","line":1,"code":"export declare function withCodeSplit(importFunc: any, options?: {}): (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04557","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/CodeSplitter.d.ts","line":2,"code":"export declare function usePreloadComponent(importFunc: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04558","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/CodeSplitter.d.ts","line":8,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04559","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/CodeSplitter.d.ts","line":13,"code":"export declare function createLazyComponent(importFunc: any, displayName: any): (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04560","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/CodeSplitter.d.ts","line":21,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04561","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/CodeSplitter.d.ts","line":36,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04562","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/CodeSplitter.tsx","line":145,"code":"// Named export alias for backward compatibility","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04563","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/LazyImage.d.ts","line":2,"code":"src: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04564","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/LazyImage.d.ts","line":3,"code":"alt: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04565","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/LazyImage.d.ts","line":5,"code":"placeholder: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04566","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/LazyImage.d.ts","line":6,"code":"blurDataURL: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04567","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/LazyImage.d.ts","line":7,"code":"width: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04568","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/LazyImage.d.ts","line":8,"code":"height: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04569","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/LazyImage.d.ts","line":10,"code":"onLoad: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04570","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/LazyImage.d.ts","line":11,"code":"onError: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04571","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/VirtualScroll.d.ts","line":3,"code":"items: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04572","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/VirtualScroll.d.ts","line":4,"code":"itemHeight: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04573","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/VirtualScroll.d.ts","line":5,"code":"containerHeight: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04574","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/VirtualScroll.d.ts","line":6,"code":"renderItem: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04575","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/VirtualScroll.d.ts","line":10,"code":"export declare function useVirtualScroll(items: any, containerHeight: any, estimatedItemHeight?: number): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04576","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/VirtualScroll.d.ts","line":16,"code":"updateItemHeight: (index: any, height: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04577","severity":"P2","category":"Type","file":"apps/web/src/components/Performance/VirtualScroll.d.ts","line":17,"code":"getItemOffset: (index: any) => number;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04578","severity":"P2","category":"Type","file":"apps/web/src/components/Personality/CompatibilityMatrix.d.ts","line":2,"code":"pet1: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04579","severity":"P2","category":"Type","file":"apps/web/src/components/Personality/CompatibilityMatrix.d.ts","line":3,"code":"pet2: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04580","severity":"P2","category":"Type","file":"apps/web/src/components/Personality/CompatibilityMatrix.d.ts","line":5,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04581","severity":"P2","category":"Type","file":"apps/web/src/components/Personality/CompatibilityMatrix.d.ts","line":6,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04582","severity":"P2","category":"Type","file":"apps/web/src/components/Personality/PersonalityCard.d.ts","line":2,"code":"petId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04583","severity":"P2","category":"Type","file":"apps/web/src/components/Personality/PersonalityCard.d.ts","line":3,"code":"petName: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04584","severity":"P2","category":"Type","file":"apps/web/src/components/Personality/PersonalityCard.d.ts","line":4,"code":"breed: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04585","severity":"P2","category":"Type","file":"apps/web/src/components/Personality/PersonalityCard.d.ts","line":5,"code":"age: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04586","severity":"P2","category":"Type","file":"apps/web/src/components/Personality/PersonalityCard.d.ts","line":8,"code":"onPersonalityGenerated: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04587","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/MatchModal.d.ts","line":2,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04588","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/MatchModal.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04589","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/MatchModal.d.ts","line":4,"code":"matchId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04590","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/MatchModal.d.ts","line":5,"code":"currentUserPet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04591","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/MatchModal.d.ts","line":6,"code":"matchedPet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04592","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/MatchModal.d.ts","line":7,"code":"matchedUser: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04593","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/MatchModal.test.tsx","line":5,"code":"// Remove react-router-dom import as we're using Next.js","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04594","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/OptimizedSwipeCard.d.ts","line":2,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04595","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/OptimizedSwipeCard.tsx","line":5,"code":"import { HeartIcon as HeartSolidIcon, SparklesIcon } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04596","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardActions.d.ts","line":2,"code":"onLike: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04597","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardActions.d.ts","line":3,"code":"onPass: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04598","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardActions.d.ts","line":4,"code":"onSuperLike: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04599","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardCore.d.ts","line":2,"code":"pet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04600","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardCore.d.ts","line":3,"code":"onSwipe: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04601","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardCore.d.ts","line":4,"code":"onCardClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04602","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardCore.d.ts","line":5,"code":"style: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04603","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardCore.d.ts","line":6,"code":"dragConstraints: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04604","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardCore.test.tsx","line":65,"code":"const ref = { current: document.createElement('div') } as React.RefObject<Element>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04605","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardInfo.d.ts","line":2,"code":"pet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04606","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardInfo.d.ts","line":3,"code":"onCardClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04607","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardInfo.tsx","line":34,"code":"{/* Removed tags and healthInfo as they are not in the core Pet type */}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04608","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardOverlay.d.ts","line":2,"code":"x: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04609","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardOverlay.d.ts","line":3,"code":"y: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04610","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/SwipeCardPremiumEffects.d.ts","line":2,"code":"pet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04611","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard/index.d.ts","line":2,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04612","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard.d.ts","line":2,"code":"pet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04613","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard.d.ts","line":3,"code":"onSwipe: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04614","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard.d.ts","line":4,"code":"onCardClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04615","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard.d.ts","line":5,"code":"style: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04616","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard.d.ts","line":6,"code":"dragConstraints: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04617","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCard.tsx","line":6,"code":"import { HeartIcon as HeartSolidIcon } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04618","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCardV2.d.ts","line":2,"code":"pet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04619","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCardV2.d.ts","line":3,"code":"onSwipe: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04620","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCardV2.d.ts","line":4,"code":"onCardClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04621","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeCardV2.tsx","line":10,"code":"import { HeartIcon as HeartSolidIcon } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04622","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeStack.d.ts","line":2,"code":"pets: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04623","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeStack.d.ts","line":3,"code":"onSwipe: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04624","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeStack.d.ts","line":4,"code":"onMatch: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04625","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeStack.d.ts","line":5,"code":"onLoadMore: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04626","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeStack.d.ts","line":7,"code":"onCardClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04627","severity":"P2","category":"Type","file":"apps/web/src/components/Pet/SwipeStack.tsx","line":34,"code":"// Remove from swiped if there was an error","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04628","severity":"P2","category":"Type","file":"apps/web/src/components/Photo/PhotoCropper.d.ts","line":2,"code":"image: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04629","severity":"P2","category":"Type","file":"apps/web/src/components/Photo/PhotoCropper.d.ts","line":3,"code":"onCropComplete: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04630","severity":"P2","category":"Type","file":"apps/web/src/components/Photo/PhotoCropper.d.ts","line":4,"code":"onCancel: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04631","severity":"P2","category":"Type","file":"apps/web/src/components/Photo/PhotoCropper.tsx","line":34,"code":"const canvas = document.createElement('canvas');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04632","severity":"P2","category":"Type","file":"apps/web/src/components/Photo/PhotoEditor.d.ts","line":2,"code":"image: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04633","severity":"P2","category":"Type","file":"apps/web/src/components/Photo/PhotoEditor.d.ts","line":3,"code":"onSave: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04634","severity":"P2","category":"Type","file":"apps/web/src/components/Photo/PhotoEditor.d.ts","line":4,"code":"onCancel: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04635","severity":"P2","category":"Type","file":"apps/web/src/components/Photo/PhotoEditor.tsx","line":47,"code":"const canvas = canvasRef.current;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04636","severity":"P2","category":"Type","file":"apps/web/src/components/Photo/PhotoEditor.tsx","line":122,"code":"const canvas = canvasRef.current;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04637","severity":"P2","category":"Type","file":"apps/web/src/components/Photo/PhotoEditor.tsx","line":147,"code":"<canvas ref={canvasRef} className=\"max-w-full max-h-full object-contain\"/>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04638","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":77,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04639","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":82,"code":"(api.subscription.getUsageStats as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04640","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":163,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04641","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":194,"code":"it('marks current plan as active', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04642","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":213,"code":"(api.subscription.createCheckoutSession as jest.Mock).mockResolvedValue(mockCheckoutResponse);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04643","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":247,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04644","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":252,"code":"(api.subscription.cancelSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04645","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":274,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04646","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":279,"code":"(api.subscription.reactivateSubscription as jest.Mock).mockResolvedValue({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04647","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":298,"code":"(api.subscription.getCurrentSubscription as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04648","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":313,"code":"(api.subscription.getUsageStats as jest.Mock).mockRejectedValue(new Error('API Error'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04649","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":323,"code":"(api.subscription.createCheckoutSession as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04650","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":342,"code":"(api.subscription.createCheckoutSession as jest.Mock).mockImplementation(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04651","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":359,"code":"it('has proper ARIA labels for interactive elements', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04652","severity":"P2","category":"Type","file":"apps/web/src/components/Premium/__tests__/SubscriptionManager.test.tsx","line":368,"code":"it('has proper role for success modal', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04653","severity":"P2","category":"Type","file":"apps/web/src/components/Privacy/PrivacyControls.d.ts","line":2,"code":"settings: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04654","severity":"P2","category":"Type","file":"apps/web/src/components/Privacy/PrivacyControls.d.ts","line":3,"code":"onUpdate: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04655","severity":"P2","category":"Type","file":"apps/web/src/components/Profile/PetProfileEditor.d.ts","line":2,"code":"pet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04656","severity":"P2","category":"Type","file":"apps/web/src/components/Profile/PetProfileEditor.d.ts","line":3,"code":"onSave: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04657","severity":"P2","category":"Type","file":"apps/web/src/components/Reminders/PetCareReminders.d.ts","line":2,"code":"reminders: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04658","severity":"P2","category":"Type","file":"apps/web/src/components/Reminders/PetCareReminders.d.ts","line":3,"code":"pets: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04659","severity":"P2","category":"Type","file":"apps/web/src/components/Reminders/PetCareReminders.d.ts","line":4,"code":"onAddReminder: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04660","severity":"P2","category":"Type","file":"apps/web/src/components/Reminders/PetCareReminders.d.ts","line":5,"code":"onUpdateReminder: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04661","severity":"P2","category":"Type","file":"apps/web/src/components/Reminders/PetCareReminders.d.ts","line":6,"code":"onDeleteReminder: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04662","severity":"P2","category":"Type","file":"apps/web/src/components/Reminders/PetCareReminders.d.ts","line":7,"code":"onToggleComplete: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04663","severity":"P2","category":"Type","file":"apps/web/src/components/Reminders/PetCareReminders.tsx","line":202,"code":": 'border-gray-300 dark:border-gray-600'}`} aria-label={reminder.completed ? 'Mark as incomplete' : 'Mark as complete'}>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04664","severity":"P2","category":"Type","file":"apps/web/src/components/Reminders/PetCareReminders.tsx","line":432,"code":"Mark as recurring","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04665","severity":"P2","category":"Type","file":"apps/web/src/components/SafeAreaProvider.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04666","severity":"P2","category":"Type","file":"apps/web/src/components/SafeAreaProvider.d.ts","line":6,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04667","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/EmojiReactions.d.ts","line":2,"code":"isVisible: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04668","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/EmojiReactions.d.ts","line":3,"code":"onReaction: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04669","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/EmojiReactions.d.ts","line":4,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04670","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/EmojiReactions.d.ts","line":12,"code":"addReaction: (emoji: any, position: any, userId: any, userName: any) => string;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04671","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/EmojiReactions.d.ts","line":13,"code":"removeReaction: (reactionId: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04672","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesBar.d.ts","line":2,"code":"onStoryClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04673","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesBar.d.ts","line":3,"code":"onCreateClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04674","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.d.ts","line":3,"code":"stories: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04675","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.d.ts","line":4,"code":"currentStoryIndex: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04676","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.d.ts","line":5,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04677","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.d.ts","line":6,"code":"onStoryChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04678","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.d.ts","line":7,"code":"onReply: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04679","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.d.ts","line":8,"code":"onReaction: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04680","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.d.ts","line":9,"code":"onShare: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04681","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.d.ts","line":20,"code":"addStory: (story: any) => any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04682","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.d.ts","line":21,"code":"markAsViewed: (storyId: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04683","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.d.ts","line":22,"code":"addReaction: (storyId: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04684","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.d.ts","line":23,"code":"addReply: (storyId: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04685","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.tsx","line":9,"code":"import { HeartIcon as HeartSolidIcon } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04686","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoriesCarousel.tsx","line":184,"code":"{/* Navigation areas */}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04687","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryComposer.d.ts","line":2,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04688","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryComposer.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04689","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryComposer.d.ts","line":4,"code":"onPublish: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04690","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryComposer.d.ts","line":5,"code":"petId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04691","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryComposer.d.ts","line":6,"code":"petName: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04692","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryComposer.d.ts","line":14,"code":"publishStory: (storyData: any) => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04693","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryProgress.d.ts","line":2,"code":"stories: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04694","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryProgress.d.ts","line":3,"code":"currentIndex: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04695","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryProgress.d.ts","line":4,"code":"isPaused: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04696","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryRing.d.ts","line":2,"code":"petId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04697","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryRing.d.ts","line":3,"code":"petName: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04698","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryRing.d.ts","line":4,"code":"petAvatar: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04699","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryRing.d.ts","line":5,"code":"hasUnseenStories: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04700","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryRing.d.ts","line":6,"code":"storyCount: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04701","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryRing.d.ts","line":7,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04702","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryRing.d.ts","line":13,"code":"stories: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04703","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryRing.d.ts","line":14,"code":"onStoryClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04704","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryRing.d.ts","line":19,"code":"updateStoryRing: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04705","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryRing.d.ts","line":20,"code":"markStoriesAsSeen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04706","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryRing.d.ts","line":21,"code":"addStoryRing: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04707","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryUploader.d.ts","line":2,"code":"onSuccess: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04708","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryUploader.d.ts","line":3,"code":"onCancel: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04709","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryUploader.tsx","line":17,"code":"import { Image as ImageIcon, Loader2, Upload, Video, X } from 'lucide-react';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04710","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryViewer.d.ts","line":2,"code":"storyGroups: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04711","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryViewer.d.ts","line":3,"code":"initialGroupIndex: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04712","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryViewer.d.ts","line":4,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04713","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryViewer.d.ts","line":5,"code":"currentUserId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04714","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryViewer.tsx","line":39,"code":"// Mark story as viewed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04715","severity":"P2","category":"Type","file":"apps/web/src/components/Stories/StoryViewer.tsx","line":122,"code":"// Mark story as viewed on load","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04716","severity":"P1","category":"Type","file":"apps/web/src/components/Stories/StoryViewer.tsx","line":143,"code":"videoRef.current.play().catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-04717","severity":"P2","category":"Type","file":"apps/web/src/components/SwipeEnhanced/SwipePageWithFilters.tsx","line":7,"code":"import { HeartIcon as HeartSolidIcon } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04718","severity":"P2","category":"Type","file":"apps/web/src/components/Theme/ThemeProvider.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04719","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04720","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":6,"code":"id: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04721","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":7,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04722","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":9,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04723","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":25,"code":"apiOperation: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04724","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":26,"code":"tooltip: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04725","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":27,"code":"\"aria-label\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04726","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":28,"code":"\"aria-describedby\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04727","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":29,"code":"role: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04728","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":30,"code":"tabIndex: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04729","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":33,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04730","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":35,"code":"icon: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04731","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":41,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04732","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.d.ts","line":46,"code":"export { InteractionProvider as default, EnhancedInteractive, EnhancedButton, EnhancedCard, };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04733","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AdvancedInteractionSystem.tsx","line":408,"code":"export { InteractionProvider as default, EnhancedInteractive, EnhancedButton, EnhancedCard, };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04734","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AvatarGenerator.d.ts","line":2,"code":"name: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04735","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AvatarGenerator.d.ts","line":6,"code":"gradient: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04736","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AvatarGenerator.d.ts","line":9,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04737","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AvatarGenerator.d.ts","line":10,"code":"petName: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04738","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AvatarGenerator.d.ts","line":17,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04739","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AvatarGenerator.d.ts","line":18,"code":"user: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04740","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AvatarGenerator.d.ts","line":24,"code":"items: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04741","severity":"P2","category":"Type","file":"apps/web/src/components/UI/AvatarGenerator.tsx","line":146,"code":"// If user has an avatar, show it","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04742","severity":"P2","category":"Type","file":"apps/web/src/components/UI/BackToTopButton.d.ts","line":11,"code":"scrollToElement: (elementId: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04743","severity":"P2","category":"Type","file":"apps/web/src/components/UI/BackToTopButton.d.ts","line":12,"code":"scrollToPosition: (position: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04744","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Button.tsx","line":8,"code":"// If href is provided, render as Link","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04745","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Card.d.ts","line":2,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04746","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Card.d.ts","line":6,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04747","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04748","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":6,"code":"content: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04749","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":7,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04750","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":13,"code":"className: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04751","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":15,"code":"id: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04752","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":18,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04753","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":19,"code":"helpText: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04754","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":20,"code":"className: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04755","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":23,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04756","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":24,"code":"info: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04757","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":25,"code":"className: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04758","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":28,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04759","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":29,"code":"warning: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04760","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":30,"code":"className: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04761","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":33,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04762","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":34,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04763","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":35,"code":"className: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04764","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":38,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04765","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":39,"code":"success: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04766","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":40,"code":"className: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04767","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":43,"code":"showHelp: (id: any, helpText: any, options: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04768","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":44,"code":"showInfo: (id: any, info: any, options: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04769","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":45,"code":"hideTooltip: (id: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04770","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.d.ts","line":47,"code":"export { TooltipProvider as default, useTooltips, Tooltip, HelpTooltip, InfoTooltip, WarningTooltip, ErrorTooltip, SuccessTooltip, useContextualTooltips, };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04771","severity":"P2","category":"Type","file":"apps/web/src/components/UI/ContextualTooltips.tsx","line":321,"code":"export { TooltipProvider as default, useTooltips, Tooltip, HelpTooltip, InfoTooltip, WarningTooltip, ErrorTooltip, SuccessTooltip, useContextualTooltips, };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04772","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":2,"code":"type: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04773","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":3,"code":"title: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04774","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":4,"code":"description: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04775","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":5,"code":"action: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04776","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":6,"code":"secondaryAction: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04777","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":7,"code":"illustration: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04778","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":12,"code":"onRefresh: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04779","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":13,"code":"onStartSwiping: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04780","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":14,"code":"onAdjustFilters: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04781","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":18,"code":"onStartSwiping: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04782","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":19,"code":"onSendMessage: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04783","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":22,"code":"onRefresh: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04784","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":31,"code":"onRetry: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04785","severity":"P2","category":"Type","file":"apps/web/src/components/UI/EmptyState.d.ts","line":32,"code":"onGoBack: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04786","severity":"P2","category":"Type","file":"apps/web/src/components/UI/FadeInUpDiv.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04787","severity":"P2","category":"Type","file":"apps/web/src/components/UI/LikeAnimation.d.ts","line":2,"code":"show: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04788","severity":"P2","category":"Type","file":"apps/web/src/components/UI/LikeAnimation.d.ts","line":3,"code":"onComplete: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04789","severity":"P2","category":"Type","file":"apps/web/src/components/UI/LikeAnimation.d.ts","line":9,"code":"show: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04790","severity":"P2","category":"Type","file":"apps/web/src/components/UI/LikeAnimation.d.ts","line":10,"code":"onComplete: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04791","severity":"P2","category":"Type","file":"apps/web/src/components/UI/LoadingSpinner.d.ts","line":5,"code":"className: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04792","severity":"P2","category":"Type","file":"apps/web/src/components/UI/LoadingSpinner.test.tsx","line":35,"code":"it('has correct accessibility attributes', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04793","severity":"P2","category":"Type","file":"apps/web/src/components/UI/LocaleSwitcher.d.ts","line":9,"code":"onLocaleChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04794","severity":"P2","category":"Type","file":"apps/web/src/components/UI/LocaleSwitcher.d.ts","line":23,"code":"changeLocale: (localeCode: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04795","severity":"P2","category":"Type","file":"apps/web/src/components/UI/LocaleSwitcher.d.ts","line":24,"code":"getLocale: (code: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04796","severity":"P2","category":"Type","file":"apps/web/src/components/UI/MobileSwipeCard.d.ts","line":2,"code":"pet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04797","severity":"P2","category":"Type","file":"apps/web/src/components/UI/MobileSwipeCard.d.ts","line":3,"code":"onSwipeLeft: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04798","severity":"P2","category":"Type","file":"apps/web/src/components/UI/MobileSwipeCard.d.ts","line":4,"code":"onSwipeRight: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04799","severity":"P2","category":"Type","file":"apps/web/src/components/UI/MobileSwipeCard.d.ts","line":5,"code":"onSwipeUp: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04800","severity":"P2","category":"Type","file":"apps/web/src/components/UI/MobileSwipeCard.d.ts","line":6,"code":"onSwipeDown: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04801","severity":"P2","category":"Type","file":"apps/web/src/components/UI/MobileSwipeCard.tsx","line":9,"code":"import { HeartIcon as HeartSolidIcon } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04802","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":2,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04803","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04804","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":4,"code":"title: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04805","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":5,"code":"description: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04806","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":6,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04807","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":15,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04808","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":16,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04809","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":17,"code":"onConfirm: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04810","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":18,"code":"title: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04811","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":19,"code":"message: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04812","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":26,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04813","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":27,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04814","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":28,"code":"title: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04815","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Modal.d.ts","line":29,"code":"message: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04816","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NavigationUnderline.d.ts","line":2,"code":"items: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04817","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NavigationUnderline.d.ts","line":3,"code":"activeItem: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04818","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NavigationUnderline.d.ts","line":7,"code":"onItemClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04819","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NavigationUnderline.d.ts","line":9,"code":"export declare function useNavigation(items: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04820","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NavigationUnderline.d.ts","line":10,"code":"activeItem: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04821","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NavigationUnderline.d.ts","line":11,"code":"setActive: (itemId: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04822","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NavigationUnderline.d.ts","line":13,"code":"items: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04823","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NavigationUnderline.tsx","line":192,"code":"import { HomeIcon, HeartIcon, ChatBubbleLeftRightIcon as ChatIcon, UserIcon, ChartBarIcon, UsersIcon, ChartPieIcon } from '@heroicons/react/24/outline';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04824","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NotificationBell.d.ts","line":4,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04825","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NotificationBell.d.ts","line":15,"code":"addNotification: (notification: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04826","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NotificationBell.d.ts","line":16,"code":"markAsRead: (notificationId: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04827","severity":"P2","category":"Type","file":"apps/web/src/components/UI/NotificationBell.tsx","line":9,"code":"import { BellIcon as BellSolidIcon } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04828","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumBadge.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04829","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumBadge.d.ts","line":8,"code":"icon: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04830","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumBadge.d.ts","line":12,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04831","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumBadge.d.ts","line":13,"code":"status: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04832","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumBadge.d.ts","line":16,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04833","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumBadge.d.ts","line":17,"code":"tier: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04834","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":9,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04835","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":10,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04836","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":11,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04837","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":19,"code":"icon: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04838","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":25,"code":"href: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04839","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":27,"code":"\"aria-label\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04840","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":28,"code":"\"aria-describedby\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04841","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":29,"code":"\"aria-pressed\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04842","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":30,"code":"\"aria-expanded\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04843","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":31,"code":"\"aria-haspopup\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04844","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":32,"code":"role: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04845","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.d.ts","line":33,"code":"tabIndex: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04846","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumButton.tsx","line":183,"code":"// If href is provided, render as Link","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04847","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04848","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":12,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04849","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":18,"code":"\"aria-label\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04850","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":19,"code":"\"aria-describedby\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04851","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":20,"code":"\"aria-labelledby\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04852","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":21,"code":"\"aria-expanded\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04853","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":22,"code":"\"aria-selected\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04854","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":23,"code":"\"aria-hidden\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04855","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":24,"code":"\"aria-live\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04856","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":25,"code":"\"aria-atomic\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04857","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":26,"code":"\"aria-relevant\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04858","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":27,"code":"role: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04859","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":28,"code":"tabIndex: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04860","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumCard.d.ts","line":29,"code":"\"data-testid\": any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04861","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":2,"code":"label: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04862","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":3,"code":"placeholder: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04863","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":5,"code":"onChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04864","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":6,"code":"onBlur: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04865","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":7,"code":"onFocus: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04866","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":12,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04867","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":13,"code":"helperText: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04868","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":14,"code":"maxLength: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04869","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":16,"code":"leftIcon: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04870","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":17,"code":"rightIcon: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04871","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":20,"code":"autoComplete: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04872","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumInput.d.ts","line":21,"code":"name: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04873","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumModal.d.ts","line":2,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04874","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumModal.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04875","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumModal.d.ts","line":4,"code":"title: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04876","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumModal.d.ts","line":5,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04877","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumSkeleton.d.ts","line":3,"code":"width: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04878","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PremiumSkeleton.d.ts","line":4,"code":"height: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04879","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PullToRefresh.d.ts","line":2,"code":"onRefresh: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04880","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PullToRefresh.d.ts","line":5,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04881","severity":"P2","category":"Type","file":"apps/web/src/components/UI/PullToRefresh.d.ts","line":10,"code":"export declare function usePullToRefresh(onRefresh: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04882","severity":"P2","category":"Type","file":"apps/web/src/components/UI/SafeImage.d.ts","line":2,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04883","severity":"P2","category":"Type","file":"apps/web/src/components/UI/SafeImage.d.ts","line":3,"code":"src: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04884","severity":"P2","category":"Type","file":"apps/web/src/components/UI/SafeImage.d.ts","line":4,"code":"alt: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04885","severity":"P2","category":"Type","file":"apps/web/src/components/UI/SafeImage.d.ts","line":8,"code":"blurDataURL: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04886","severity":"P2","category":"Type","file":"apps/web/src/components/UI/SafeImage.d.ts","line":10,"code":"sizes: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04887","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":1,"code":"export declare const SkeletonBase: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04888","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":2,"code":"export declare const SkeletonCard: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04889","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":3,"code":"export declare const SkeletonMessage: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04890","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":5,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04891","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":9,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04892","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":15,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04893","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":20,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04894","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":24,"code":"export declare const SkeletonProfile: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04895","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":26,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04896","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":32,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04897","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":36,"code":"card: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04898","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":37,"code":"message: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04899","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":39,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04900","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":43,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04901","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":49,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04902","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":54,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04903","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":58,"code":"profile: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04904","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":60,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04905","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Skeleton.d.ts","line":66,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04906","severity":"P2","category":"Type","file":"apps/web/src/components/UI/SkeletonLoader.test.tsx","line":78,"code":"it('has proper animation attributes', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04907","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Text.d.ts","line":2,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04908","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Text.d.ts","line":4,"code":"as: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04909","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Text.d.ts","line":6,"code":"weight: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04910","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Text.d.ts","line":7,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04911","severity":"P2","category":"Type","file":"apps/web/src/components/UI/Text.tsx","line":6,"code":"const Component = as || (variant.startsWith('heading') ? variant.replace('heading', 'h') : 'p');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04912","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04913","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":6,"code":"id: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04914","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":7,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04915","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":8,"code":"fallback: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04916","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":12,"code":"id: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04917","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":13,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04918","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":17,"code":"startAPILoading: (operation: any, options: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04919","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":18,"code":"updateAPIProgress: (operation: any, progress: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04920","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":19,"code":"stopAPILoading: (operation: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04921","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":22,"code":"startPageLoading: (page: any, options: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04922","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":23,"code":"stopPageLoading: (page: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04923","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":26,"code":"startFormLoading: (form: any, options: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04924","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":27,"code":"stopFormLoading: (form: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04925","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":30,"code":"operation: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04926","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":31,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04927","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":32,"code":"message: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04928","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":37,"code":"page: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04929","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":38,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04930","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":43,"code":"form: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04931","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":44,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04932","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":48,"code":"id: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04933","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":52,"code":"id: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04934","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.d.ts","line":55,"code":"export { LoadingProvider as default, useLoadingStates, UniversalLoading, ProgressLoading, useAPILoading, usePageLoading, useFormLoading, APILoadingWrapper, PageLoadingWrapper, FormLoadingWrapper, LoadingIndicator, LoadingBadge, };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04935","severity":"P2","category":"Type","file":"apps/web/src/components/UI/UniversalLoadingStates.tsx","line":184,"code":"export { LoadingProvider as default, useLoadingStates, UniversalLoading, ProgressLoading, useAPILoading, usePageLoading, useFormLoading, APILoadingWrapper, PageLoadingWrapper, FormLoadingWrapper, LoadingIndicator, LoadingBadge, };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04936","severity":"P2","category":"Type","file":"apps/web/src/components/UI/__tests__/PawAnimations.test.tsx","line":96,"code":"it('has Framer Motion animations', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04937","severity":"P2","category":"Type","file":"apps/web/src/components/UI/__tests__/PawAnimations.test.tsx","line":132,"code":"// So we just check that the element exists and has the loading state","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04938","severity":"P2","category":"Type","file":"apps/web/src/components/UI/__tests__/PawAnimations.test.tsx","line":143,"code":"// So we just check that the element exists and has the non-loading state","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04939","severity":"P2","category":"Type","file":"apps/web/src/components/UI/__tests__/PawAnimations.test.tsx","line":212,"code":"it('has proper ARIA labels', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04940","severity":"P2","category":"Type","file":"apps/web/src/components/UI/__tests__/toast.test.tsx","line":170,"code":"const closeButton = screen.getByRole('button', { name: '' }); // X button has no text","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04941","severity":"P2","category":"Type","file":"apps/web/src/components/UI/alert.d.ts","line":3,"code":"export declare function Alert(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04942","severity":"P2","category":"Type","file":"apps/web/src/components/UI/alert.d.ts","line":4,"code":"export declare function AlertDescription(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04943","severity":"P2","category":"Type","file":"apps/web/src/components/UI/badge.d.ts","line":2,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04944","severity":"P2","category":"Type","file":"apps/web/src/components/UI/badge.d.ts","line":3,"code":"className: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04945","severity":"P2","category":"Type","file":"apps/web/src/components/UI/checkbox.d.ts","line":2,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04946","severity":"P2","category":"Type","file":"apps/web/src/components/UI/checkbox.d.ts","line":3,"code":"checked: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04947","severity":"P2","category":"Type","file":"apps/web/src/components/UI/checkbox.d.ts","line":4,"code":"onChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04948","severity":"P2","category":"Type","file":"apps/web/src/components/UI/checkbox.d.ts","line":5,"code":"onCheckedChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04949","severity":"P2","category":"Type","file":"apps/web/src/components/UI/dialog.d.ts","line":1,"code":"export declare function DialogComponent(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04950","severity":"P2","category":"Type","file":"apps/web/src/components/UI/dialog.d.ts","line":2,"code":"export declare function DialogContentComponent(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04951","severity":"P2","category":"Type","file":"apps/web/src/components/UI/dialog.d.ts","line":3,"code":"export declare function DialogHeaderComponent(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04952","severity":"P2","category":"Type","file":"apps/web/src/components/UI/dialog.d.ts","line":4,"code":"export declare function DialogFooterComponent(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04953","severity":"P2","category":"Type","file":"apps/web/src/components/UI/dialog.d.ts","line":5,"code":"export declare function DialogTitleComponent(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04954","severity":"P2","category":"Type","file":"apps/web/src/components/UI/dialog.d.ts","line":6,"code":"export declare function DialogDescriptionComponent(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04955","severity":"P2","category":"Type","file":"apps/web/src/components/UI/icon-helper.d.ts","line":17,"code":"* This wraps the icon component to ensure it can be used as a JSX element","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04956","severity":"P2","category":"Type","file":"apps/web/src/components/UI/icon-helper.tsx","line":17,"code":"* This wraps the icon component to ensure it can be used as a JSX element","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04957","severity":"P2","category":"Type","file":"apps/web/src/components/UI/icon-helper.tsx","line":24,"code":"return <IconComponent {...(iconProps as SVGProps<SVGSVGElement>)} />;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04958","severity":"P2","category":"Type","file":"apps/web/src/components/UI/label.d.ts","line":1,"code":"export declare function Label(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04959","severity":"P2","category":"Type","file":"apps/web/src/components/UI/page-transition.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04960","severity":"P2","category":"Type","file":"apps/web/src/components/UI/page-transition.d.ts","line":5,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04961","severity":"P2","category":"Type","file":"apps/web/src/components/UI/page-transition.d.ts","line":8,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04962","severity":"P2","category":"Type","file":"apps/web/src/components/UI/textarea.d.ts","line":1,"code":"export declare function Textarea(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04963","severity":"P2","category":"Type","file":"apps/web/src/components/Verification/ProfileVerification.d.ts","line":2,"code":"onComplete: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04964","severity":"P2","category":"Type","file":"apps/web/src/components/VideoCall/VideoCallRoom.d.ts","line":2,"code":"roomId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04965","severity":"P2","category":"Type","file":"apps/web/src/components/VideoCall/VideoCallRoom.d.ts","line":3,"code":"userId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04966","severity":"P2","category":"Type","file":"apps/web/src/components/VideoCall/VideoCallRoom.d.ts","line":4,"code":"userName: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04967","severity":"P2","category":"Type","file":"apps/web/src/components/VideoCall/VideoCallRoom.d.ts","line":5,"code":"onLeave: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04968","severity":"P2","category":"Type","file":"apps/web/src/components/VideoCall/__tests__/VideoCallRoom.test.tsx","line":297,"code":"it('has proper ARIA labels for all controls', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04969","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AccessibilityUtils.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04970","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AccessibilityUtils.d.ts","line":12,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04971","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AccessibilityUtils.d.ts","line":13,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04972","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AccessibilityUtils.d.ts","line":15,"code":"onClick: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04973","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AccessibilityUtils.d.ts","line":16,"code":"ariaLabel: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04974","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AccessibilityUtils.d.ts","line":23,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04975","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AccessibilityUtils.d.ts","line":27,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04976","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AccessibilityUtils.d.ts","line":28,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04977","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AccessibilityUtils.d.ts","line":29,"code":"title: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04978","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AccessibilityUtils.d.ts","line":30,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04979","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AdminNotificationBell.d.ts","line":2,"code":"userId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04980","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AdminNotificationBell.d.ts","line":3,"code":"isAdmin: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04981","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AnimationSettingsModal.d.ts","line":2,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04982","severity":"P2","category":"Type","file":"apps/web/src/components/admin/AnimationSettingsModal.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04983","severity":"P2","category":"Type","file":"apps/web/src/components/admin/BiometricManagement.d.ts","line":2,"code":"onBack: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04984","severity":"P2","category":"Type","file":"apps/web/src/components/admin/BiometricManagement.tsx","line":54,"code":"toast.success('Biometric credential removed', 'The user\\'s biometric authentication has been disabled.');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04985","severity":"P2","category":"Type","file":"apps/web/src/components/admin/BulkActions.d.ts","line":2,"code":"selectedCount: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04986","severity":"P2","category":"Type","file":"apps/web/src/components/admin/BulkActions.d.ts","line":3,"code":"onApprove: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04987","severity":"P2","category":"Type","file":"apps/web/src/components/admin/BulkActions.d.ts","line":4,"code":"onReject: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04988","severity":"P2","category":"Type","file":"apps/web/src/components/admin/BulkActions.d.ts","line":5,"code":"onDelete: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04989","severity":"P2","category":"Type","file":"apps/web/src/components/admin/BulkActions.d.ts","line":6,"code":"onClear: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04990","severity":"P2","category":"Type","file":"apps/web/src/components/admin/EnhancedFeaturesOverview.d.ts","line":2,"code":"onNavigate: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04991","severity":"P2","category":"Type","file":"apps/web/src/components/admin/LeaderboardManagement.d.ts","line":2,"code":"onBack: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04992","severity":"P2","category":"Type","file":"apps/web/src/components/admin/NotificationManagement.d.ts","line":2,"code":"onBack: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04993","severity":"P2","category":"Type","file":"apps/web/src/components/admin/UIEnhancements.tsx","line":210,"code":"lastFocused = (document.activeElement as HTMLElement) ?? null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04994","severity":"P2","category":"Type","file":"apps/web/src/components/admin/UIEnhancements.tsx","line":762,"code":"if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-04995","severity":"P2","category":"Type","file":"apps/web/src/components/chat/TypingIndicator.d.ts","line":2,"code":"chatId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04996","severity":"P2","category":"Type","file":"apps/web/src/components/chat/TypingIndicator.d.ts","line":8,"code":"userId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04997","severity":"P2","category":"Type","file":"apps/web/src/components/chat/TypingIndicator.d.ts","line":13,"code":"chatId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04998","severity":"P2","category":"Type","file":"apps/web/src/components/chat/TypingIndicator.d.ts","line":14,"code":"onSendMessage: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-04999","severity":"P2","category":"Type","file":"apps/web/src/components/coach/TourLauncher.d.ts","line":4,"code":"autoStartTour: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05000","severity":"P2","category":"Type","file":"apps/web/src/components/coach/TourLauncher.d.ts","line":7,"code":"tourId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05001","severity":"P2","category":"Type","file":"apps/web/src/components/common/ShareButton.d.ts","line":2,"code":"title: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05002","severity":"P2","category":"Type","file":"apps/web/src/components/common/ShareButton.d.ts","line":3,"code":"description: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05003","severity":"P2","category":"Type","file":"apps/web/src/components/common/ShareButton.d.ts","line":4,"code":"url: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05004","severity":"P2","category":"Type","file":"apps/web/src/components/common/ShareButton.d.ts","line":5,"code":"image: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05005","severity":"P2","category":"Type","file":"apps/web/src/components/common/ShareButton.d.ts","line":6,"code":"hashtags: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05006","severity":"P2","category":"Type","file":"apps/web/src/components/common/ShareButton.d.ts","line":7,"code":"via: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05007","severity":"P2","category":"Type","file":"apps/web/src/components/common/ShareButton.d.ts","line":9,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05008","severity":"P2","category":"Type","file":"apps/web/src/components/common/ShareButton.d.ts","line":10,"code":"onShare: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05009","severity":"P2","category":"Type","file":"apps/web/src/components/compatibility/CompatibilityHeatMap.d.ts","line":2,"code":"pet1Id: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05010","severity":"P2","category":"Type","file":"apps/web/src/components/compatibility/CompatibilityHeatMap.d.ts","line":3,"code":"pet2Id: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05011","severity":"P2","category":"Type","file":"apps/web/src/components/compatibility/CompatibilityHeatMap.d.ts","line":4,"code":"compatibilityData: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05012","severity":"P2","category":"Type","file":"apps/web/src/components/compatibility/CompatibilityHeatMap.d.ts","line":8,"code":"compatibilityData: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05013","severity":"P2","category":"Type","file":"apps/web/src/components/enhancements/EnhancementProvider.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05014","severity":"P2","category":"Type","file":"apps/web/src/components/enhancements/EnhancementProvider.d.ts","line":9,"code":"export declare function withEnhancements(Component: any, options?: {}): (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05015","severity":"P2","category":"Type","file":"apps/web/src/components/enhancements/EnhancementProvider.d.ts","line":12,"code":"isOffline: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05016","severity":"P2","category":"Type","file":"apps/web/src/components/enhancements/EnhancementProvider.d.ts","line":13,"code":"pendingActions: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05017","severity":"P2","category":"Type","file":"apps/web/src/components/enhancements/EnhancementProvider.d.ts","line":15,"code":"trackSwipe: (petId: any, action: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05018","severity":"P2","category":"Type","file":"apps/web/src/components/enhancements/EnhancementProvider.d.ts","line":16,"code":"trackMatch: (matchId: any, petId: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05019","severity":"P2","category":"Type","file":"apps/web/src/components/enhancements/EnhancementProvider.d.ts","line":17,"code":"trackChatMessage: (chatId: any, message: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05020","severity":"P2","category":"Type","file":"apps/web/src/components/enhancements/EnhancementProvider.d.ts","line":18,"code":"enhancePetPhoto: (imageUrl: any, petId: any) => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05021","severity":"P2","category":"Type","file":"apps/web/src/components/enhancements/EnhancementProvider.d.ts","line":19,"code":"getPetNameSuggestions: (petInfo: any) => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05022","severity":"P2","category":"Type","file":"apps/web/src/components/enhancements/EnhancementProvider.d.ts","line":35,"code":"getOptimizedUrl: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05023","severity":"P2","category":"Type","file":"apps/web/src/components/feedback/FeedbackWidget.tsx","line":131,"code":"Your feedback has been sent to our team. We appreciate your input!","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05024","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/BlockMuteMenu.d.ts","line":2,"code":"userId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05025","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/BlockMuteMenu.d.ts","line":3,"code":"userName: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05026","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/EnhancedRejectModal.d.ts","line":2,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05027","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/EnhancedRejectModal.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05028","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/EnhancedRejectModal.d.ts","line":4,"code":"onConfirm: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05029","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/RejectModal.d.ts","line":2,"code":"isOpen: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05030","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/RejectModal.d.ts","line":3,"code":"onClose: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05031","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/RejectModal.d.ts","line":4,"code":"onConfirm: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05032","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/ReportDialog.d.ts","line":2,"code":"open: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05033","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/ReportDialog.d.ts","line":3,"code":"onOpenChange: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05034","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/ReportDialog.d.ts","line":4,"code":"targetId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05035","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/ReportDialog.d.ts","line":5,"code":"category: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05036","severity":"P2","category":"Type","file":"apps/web/src/components/moderation/ReportDialog.tsx","line":2,"code":"import { DialogComponent as Dialog, DialogContentComponent as DialogContent, DialogDescriptionComponent as DialogDescription, DialogHeaderComponent as DialogHeader, DialogTitleComponent as DialogTitle } from '@/components/ui/dialog';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05037","severity":"P2","category":"Type","file":"apps/web/src/components/pets/NameSuggestionWidget.d.ts","line":2,"code":"petInfo: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05038","severity":"P2","category":"Type","file":"apps/web/src/components/pets/NameSuggestionWidget.d.ts","line":3,"code":"onNameSelect: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05039","severity":"P2","category":"Type","file":"apps/web/src/components/pets/NameSuggestionWidget.d.ts","line":9,"code":"petInfo: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05040","severity":"P2","category":"Type","file":"apps/web/src/components/pets/NameSuggestionWidget.d.ts","line":10,"code":"onNameSelect: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05041","severity":"P2","category":"Type","file":"apps/web/src/components/photos/PhotoEnhancement.d.ts","line":2,"code":"imageUrl: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05042","severity":"P2","category":"Type","file":"apps/web/src/components/photos/PhotoEnhancement.d.ts","line":3,"code":"onEnhanced: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05043","severity":"P2","category":"Type","file":"apps/web/src/components/photos/PhotoEnhancement.d.ts","line":10,"code":"imageUrl: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05044","severity":"P2","category":"Type","file":"apps/web/src/components/photos/PhotoEnhancement.d.ts","line":11,"code":"petId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05045","severity":"P2","category":"Type","file":"apps/web/src/components/photos/PhotoEnhancement.d.ts","line":13,"code":"onEnhanced: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05046","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AppErrorBoundary.d.ts","line":7,"code":"constructor(props: any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05047","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AppErrorBoundary.d.ts","line":8,"code":"static getDerivedStateFromError(error: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05048","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AppErrorBoundary.d.ts","line":10,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05049","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AppErrorBoundary.d.ts","line":12,"code":"componentDidCatch(error: any, errorInfo: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05050","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AppErrorBoundary.d.ts","line":16,"code":"render(): any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05051","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AppErrorBoundary.d.ts","line":18,"code":"export declare function withErrorBoundary(Component: any, fallback: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05052","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AppErrorBoundary.d.ts","line":19,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05053","severity":"P1","category":"Type","file":"apps/web/src/components/providers/AppErrorBoundary.tsx","line":81,"code":".then(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05054","severity":"P1","category":"Type","file":"apps/web/src/components/providers/AppErrorBoundary.tsx","line":84,"code":".catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05055","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AppErrorBoundary.tsx","line":112,"code":"We&apos;re sorry, but something unexpected happened. Our team has been notified.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05056","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AuthProvider.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05057","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AuthProvider.d.ts","line":14,"code":"export { useAuthContext as useAuth };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05058","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AuthProvider.tsx","line":103,"code":"loading: authStore.isLoading, // Alias for compatibility","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05059","severity":"P2","category":"Type","file":"apps/web/src/components/providers/AuthProvider.tsx","line":131,"code":"export { useAuthContext as useAuth };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05060","severity":"P2","category":"Type","file":"apps/web/src/components/social/PetShareView.d.ts","line":2,"code":"pet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05061","severity":"P2","category":"Type","file":"apps/web/src/config/uhd-graphics.ts","line":67,"code":"// Canvas and WebGL Settings","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05062","severity":"P2","category":"Type","file":"apps/web/src/config/uhd-graphics.ts","line":69,"code":"// High precision canvas for UHD","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05063","severity":"P2","category":"Type","file":"apps/web/src/config/uhd-graphics.ts","line":129,"code":"const canvas = document.createElement('canvas');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05064","severity":"P2","category":"Type","file":"apps/web/src/contexts/AccessibilityContext.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05065","severity":"P2","category":"Type","file":"apps/web/src/contexts/AnalyticsContext.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05066","severity":"P2","category":"Type","file":"apps/web/src/contexts/AuthContext.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05067","severity":"P2","category":"Type","file":"apps/web/src/contexts/MotionContext.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05068","severity":"P2","category":"Type","file":"apps/web/src/contexts/SocketContext.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05069","severity":"P2","category":"Type","file":"apps/web/src/contexts/ThemeContext.d.ts","line":3,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05070","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":1,"code":"export declare const Heart: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05071","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":2,"code":"export declare const X: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05072","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":3,"code":"export declare const Star: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05073","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":4,"code":"export declare const Sparkles: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05074","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":5,"code":"export declare const Refresh: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05075","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":6,"code":"export declare const User: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05076","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":7,"code":"export declare const Chat: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05077","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":8,"code":"export declare const Location: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05078","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":9,"code":"export declare const Camera: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05079","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":10,"code":"export declare const Photo: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05080","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":11,"code":"export declare const Video: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05081","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":12,"code":"export declare const Phone: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05082","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":13,"code":"export declare const Email: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05083","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":14,"code":"export declare const Notification: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05084","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":15,"code":"export declare const Settings: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05085","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":16,"code":"export declare const Home: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05086","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":17,"code":"export declare const Search: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05087","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":18,"code":"export declare const Plus: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05088","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":19,"code":"export declare const Minus: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05089","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":20,"code":"export declare const Check: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05090","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":21,"code":"export declare const Warning: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05091","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":22,"code":"export declare const Info: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05092","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":23,"code":"export declare const Error: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05093","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":24,"code":"export declare const HeartOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05094","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":25,"code":"export declare const XOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05095","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":26,"code":"export declare const StarOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05096","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":27,"code":"export declare const SparklesOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05097","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":28,"code":"export declare const RefreshOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05098","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":29,"code":"export declare const UserOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05099","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":30,"code":"export declare const ChatOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05100","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":31,"code":"export declare const LocationOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05101","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":32,"code":"export declare const CameraOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05102","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":33,"code":"export declare const PhotoOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05103","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":34,"code":"export declare const VideoOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05104","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":35,"code":"export declare const PhoneOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05105","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":36,"code":"export declare const EmailOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05106","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":37,"code":"export declare const NotificationOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05107","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":38,"code":"export declare const SettingsOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05108","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":39,"code":"export declare const HomeOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05109","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":40,"code":"export declare const SearchOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05110","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":41,"code":"export declare const PlusOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05111","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":42,"code":"export declare const MinusOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05112","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":43,"code":"export declare const CheckOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05113","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":44,"code":"export declare const WarningOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05114","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":45,"code":"export declare const InfoOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05115","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":46,"code":"export declare const ErrorOutline: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05116","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":49,"code":"Heart: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05117","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":50,"code":"X: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05118","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":51,"code":"Star: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05119","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":52,"code":"Sparkles: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05120","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":53,"code":"Refresh: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05121","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":54,"code":"User: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05122","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":55,"code":"Chat: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05123","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":56,"code":"Location: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05124","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":57,"code":"Camera: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05125","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":58,"code":"Photo: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05126","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":59,"code":"Video: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05127","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":60,"code":"Phone: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05128","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":61,"code":"Email: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05129","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":62,"code":"Notification: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05130","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":63,"code":"Settings: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05131","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":64,"code":"Home: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05132","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":65,"code":"Search: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05133","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":66,"code":"Plus: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05134","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":67,"code":"Minus: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05135","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":68,"code":"Check: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05136","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":69,"code":"Warning: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05137","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":70,"code":"Info: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05138","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":71,"code":"Error: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05139","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":74,"code":"Heart: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05140","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":75,"code":"X: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05141","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":76,"code":"Star: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05142","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":77,"code":"Sparkles: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05143","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":78,"code":"Refresh: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05144","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":79,"code":"User: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05145","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":80,"code":"Chat: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05146","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":81,"code":"Location: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05147","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":82,"code":"Camera: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05148","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":83,"code":"Photo: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05149","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":84,"code":"Video: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05150","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":85,"code":"Phone: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05151","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":86,"code":"Email: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05152","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":87,"code":"Notification: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05153","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":88,"code":"Settings: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05154","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":89,"code":"Home: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05155","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":90,"code":"Search: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05156","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":91,"code":"Plus: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05157","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":92,"code":"Minus: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05158","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":93,"code":"Check: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05159","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":94,"code":"Warning: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05160","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":95,"code":"Info: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05161","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":96,"code":"Error: (props: any) => JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05162","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":99,"code":"export declare const getIconSize: (size: any) => any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05163","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.d.ts","line":100,"code":"export declare const getIconColor: (color: any) => any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05164","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.tsx","line":6,"code":"import { HeartIcon, XMarkIcon, StarIcon, SparklesIcon, ArrowPathIcon, UserIcon, ChatBubbleLeftRightIcon, MapPinIcon, CameraIcon, PhotoIcon, VideoCameraIcon, PhoneIcon, EnvelopeIcon, BellIcon, Cog6ToothIcon, HomeIcon, MagnifyingGlassIcon, PlusIcon, MinusIcon, CheckIcon, ExclamationTriangleIcon, InformationCircleIcon, XCircleIcon, ChevronLeftIcon, ChevronRightIcon, ChevronUpIcon, ChevronDownIcon, ArrowLeftIcon, ArrowRightIcon, ArrowUpIcon, ArrowDownIcon, PlayIcon, PauseIcon, StopIcon, ForwardIcon, BackwardIcon, VolumeUpIcon, VolumeOffIcon, EyeIcon, EyeSlashIcon, LockClosedIcon, LockOpenIcon, KeyIcon, ShieldCheckIcon, GlobeAltIcon, LanguageIcon, SunIcon, MoonIcon, ComputerDesktopIcon, AdjustmentsHorizontalIcon, FunnelIcon, Squares2X2Icon, ListBulletIcon, CalendarIcon, ClockIcon, TagIcon, BookmarkIcon, ShareIcon, DownloadIcon, UploadIcon, DocumentIcon, FolderIcon, TrashIcon, PencilIcon, DocumentDuplicateIcon, ClipboardIcon, PrinterIcon, ArchiveBoxIcon, CubeIcon, GiftIcon, TrophyIcon, FireIcon, BoltIcon, LightBulbIcon, PuzzlePieceIcon, RocketLaunchIcon, BeakerIcon, WrenchIcon, PaintBrushIcon, ScissorsIcon, CursorArrowRaysIcon, HandRaisedIcon, FingerPrintIcon, QrCodeIcon, CreditCardIcon, BanknotesIcon, ReceiptPercentIcon, ShoppingCartIcon, ShoppingBagIcon, TruckIcon, BuildingStorefrontIcon, BuildingOfficeIcon, HomeModernIcon, BuildingLibraryIcon, AcademicCapIcon, BookOpenIcon, GraduationCapIcon, PresentationChartLineIcon, ChartBarIcon, ChartPieIcon, PresentationChartBarIcon, DocumentChartBarIcon, DocumentTextIcon, DocumentMagnifyingGlassIcon, MagnifyingGlassCircleIcon, MagnifyingGlassMinusIcon, MagnifyingGlassPlusIcon, FunnelIcon as FunnelOutlineIcon, AdjustmentsHorizontalIcon as AdjustmentsOutlineIcon, Cog6ToothIcon as CogOutlineIcon, UserIcon as UserOutlineIcon, HeartIcon as HeartOutlineIcon, StarIcon as StarOutlineIcon, BookmarkIcon as BookmarkOutlineIcon, ShareIcon as ShareOutlineIcon, ChatBubbleLeftRightIcon as ChatOutlineIcon, BellIcon as BellOutlineIcon, HomeIcon as HomeOutlineIcon, MagnifyingGlassIcon as SearchOutlineIcon, PlusIcon as PlusOutlineIcon, MinusIcon as MinusOutlineIcon, CheckIcon as CheckOutlineIcon, XMarkIcon as XOutlineIcon, ExclamationTriangleIcon as WarningOutlineIcon, InformationCircleIcon as InfoOutlineIcon, XCircleIcon as ErrorOutlineIcon, } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05165","severity":"P2","category":"Type","file":"apps/web/src/design-system/icons.tsx","line":7,"code":"import { HeartIcon as HeartOutline, XMarkIcon as XOutline, StarIcon as StarOutline, SparklesIcon as SparklesOutline, ArrowPathIcon as ArrowPathOutline, UserIcon as UserOutline, ChatBubbleLeftRightIcon as ChatOutline, MapPinIcon as MapPinOutline, CameraIcon as CameraOutline, PhotoIcon as PhotoOutline, VideoCameraIcon as VideoOutline, PhoneIcon as PhoneOutline, EnvelopeIcon as EnvelopeOutline, BellIcon as BellOutline, Cog6ToothIcon as CogOutline, HomeIcon as HomeOutline, MagnifyingGlassIcon as SearchOutline, PlusIcon as PlusOutline, MinusIcon as MinusOutline, CheckIcon as CheckOutline, ExclamationTriangleIcon as WarningOutline, InformationCircleIcon as InfoOutline, XCircleIcon as ErrorOutline, } from '@heroicons/react/24/outline';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05166","severity":"P2","category":"Type","file":"apps/web/src/hooks/SwipeCard.d.ts","line":2,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05167","severity":"P2","category":"Type","file":"apps/web/src/hooks/SwipeCard.tsx","line":7,"code":"import { HeartIcon as HeartSolidIcon, SparklesIcon } from '@heroicons/react/24/solid';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05168","severity":"P2","category":"Type","file":"apps/web/src/hooks/__tests__/useChat.test.tsx","line":26,"code":"global.WebSocket = jest.fn(() => mockWebSocket) as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05169","severity":"P2","category":"Type","file":"apps/web/src/hooks/__tests__/useChat.test.tsx","line":26,"code":"global.WebSocket = jest.fn(() => mockWebSocket) as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05170","severity":"P2","category":"Type","file":"apps/web/src/hooks/__tests__/useChat.test.tsx","line":43,"code":"(global.WebSocket as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05171","severity":"P2","category":"Type","file":"apps/web/src/hooks/__tests__/useChat.test.tsx","line":215,"code":"it('should mark messages as read', async () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05172","severity":"P2","category":"Type","file":"apps/web/src/hooks/__tests__/useChat.test.tsx","line":240,"code":"// Mark as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05173","severity":"P2","category":"Type","file":"apps/web/src/hooks/__tests__/useFormValidation.test.tsx","line":144,"code":"// Check that the field is marked as touched (can be true or an object)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05174","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":54,"code":"export declare function useMatch(matchId: any): import(\"@tanstack/react-query\").UseQueryResult<any, Error>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05175","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":55,"code":"export declare function useMessages(matchId: any): import(\"@tanstack/react-query\").UseQueryResult<unknown, Error>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05176","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":56,"code":"export declare function useSendMessage(matchId: any): import(\"@tanstack/react-query\").UseMutationResult<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05177","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":63,"code":"matchId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05178","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":70,"code":"export declare function useMarkMessagesAsRead(matchId: any): import(\"@tanstack/react-query\").UseMutationResult<unknown, Error, void, unknown>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05179","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":86,"code":"export declare function useWebSocket(userId: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05180","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":99,"code":"user: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05181","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":100,"code":"pets: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05182","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":102,"code":"notifications: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05183","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":103,"code":"subscription: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05184","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":108,"code":"pets: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05185","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":109,"code":"currentPet: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05186","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":118,"code":"isPremium: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05187","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":121,"code":"export declare function useChatData(matchId: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05188","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":122,"code":"match: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05189","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.d.ts","line":131,"code":"matchId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05190","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.tsx","line":50,"code":"const user = responseData?.user || (data as AuthResponse)?.user;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05191","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.tsx","line":51,"code":"const accessToken = responseData?.accessToken || (data as AuthResponse)?.accessToken;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05192","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.tsx","line":52,"code":"const refreshToken = responseData?.refreshToken || (data as AuthResponse)?.refreshToken;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05193","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.tsx","line":66,"code":"const user = responseData?.user || (data as AuthResponse)?.user;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05194","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.tsx","line":67,"code":"const accessToken = responseData?.accessToken || (data as AuthResponse)?.accessToken;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05195","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.tsx","line":68,"code":"const refreshToken = responseData?.refreshToken || (data as AuthResponse)?.refreshToken;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05196","severity":"P2","category":"Type","file":"apps/web/src/hooks/api-hooks.tsx","line":164,"code":"// Alias for useMyPets to match the import in MyPetsPage","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05197","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":5,"code":"export declare function useVideoCall(roomId: any, userId: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05198","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":12,"code":"startCall: (config: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05199","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":22,"code":"export declare function usePremiumTier(userId: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05200","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":23,"code":"subscription: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05201","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":24,"code":"currentTier: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05202","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":25,"code":"plan: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05203","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":26,"code":"allPlans: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05204","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":28,"code":"hasFeature: (feature: any) => any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05205","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":29,"code":"getLimit: (limit: any) => any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05206","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":38,"code":"export declare function useUserAnalytics(userId: any, period?: string): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05207","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":47,"code":"export declare function useMatchAnalytics(userId: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05208","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":55,"code":"export declare function useEventTracking(userId: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05209","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":56,"code":"trackEvent: (eventType: any, metadata: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05210","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":61,"code":"export declare function useFeatureGate(userId: any, requiredFeature: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05211","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":62,"code":"hasAccess: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05212","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":66,"code":"currentTier: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05213","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":67,"code":"plan: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05214","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":84,"code":"export declare function useUsageLimits(userId: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05215","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":90,"code":"checkLimit: (limitType: any, currentValue: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05216","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":97,"code":"limit: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05217","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":99,"code":"incrementUsage: (type: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05218","severity":"P2","category":"Type","file":"apps/web/src/hooks/premium-hooks.d.ts","line":100,"code":"currentTier: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05219","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAccessibility.ts","line":91,"code":"// Remove after screen reader has time to read it","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05220","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAccessibilityHooks.ts","line":1,"code":"import { useReducedMotion as useFramerReducedMotion } from 'framer-motion';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05221","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdmin.d.ts","line":217,"code":"searchResults: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05222","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.d.ts","line":5,"code":"hasPermission: (permission: any) => boolean;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05223","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.d.ts","line":6,"code":"hasAnyPermission: (permissionList: any) => any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05224","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.d.ts","line":7,"code":"hasAllPermissions: (permissionList: any) => any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05225","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.d.ts","line":8,"code":"hasRole: (role: any) => boolean;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05226","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.d.ts","line":12,"code":"permission: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05227","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.d.ts","line":15,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05228","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.d.ts","line":18,"code":"role: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05229","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.d.ts","line":20,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05230","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.ts","line":101,"code":"* Check if user has a specific permission","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05231","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.ts","line":109,"code":"// Administrator has all permissions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05232","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.ts","line":131,"code":"* Check if user has ANY of the specified permissions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05233","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.ts","line":141,"code":"* Check if user has ALL of the specified permissions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05234","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.ts","line":151,"code":"* Check if user has a specific role","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05235","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.tsx","line":89,"code":"* Check if user has a specific permission","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05236","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.tsx","line":95,"code":"// Administrator has all permissions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05237","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.tsx","line":111,"code":"* Check if user has ANY of the specified permissions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05238","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.tsx","line":115,"code":"* Check if user has ALL of the specified permissions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05239","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdminPermissions.tsx","line":119,"code":"* Check if user has a specific role","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05240","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdvancedGestures.d.ts","line":119,"code":"export { useAdvancedGestures as default, useSwipeGestures, usePinchGestures, useRotateGestures, usePanGestures, };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05241","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAdvancedGestures.ts","line":475,"code":"export { useAdvancedGestures as default, useSwipeGestures, usePinchGestures, useRotateGestures, usePanGestures, };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05242","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAnimationBudget.ts","line":138,"code":"const memory = Platform.OS === 'web' ? (navigator as Navigator & { deviceMemory?: number }).deviceMemory : 4;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05243","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAnimationBudget.ts","line":499,"code":"return throttledFn as T;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05244","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAuth.d.ts","line":23,"code":"updateProfile: (updates: Partial<any>) => Promise<boolean>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05245","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAuth.test.tsx","line":40,"code":"(api.login as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05246","severity":"P2","category":"Type","file":"apps/web/src/hooks/useAuth.ts","line":268,"code":"loading: isLoading, // Alias for compatibility","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05247","severity":"P2","category":"Type","file":"apps/web/src/hooks/useBiometricAnalyzer.d.ts","line":46,"code":"currentSession: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05248","severity":"P2","category":"Type","file":"apps/web/src/hooks/useBiometricAnalyzer.d.ts","line":47,"code":"analysisHistory: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05249","severity":"P2","category":"Type","file":"apps/web/src/hooks/useChat.ts","line":114,"code":"// Mark messages as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05250","severity":"P2","category":"Type","file":"apps/web/src/hooks/useChat.ts","line":206,"code":"// Mark messages as read when chat is viewed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05251","severity":"P1","category":"Type","file":"apps/web/src/hooks/useEnhancedSocket.ts","line":280,"code":"audio.play().catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05252","severity":"P2","category":"Type","file":"apps/web/src/hooks/useHapticSound.ts","line":209,"code":"this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05253","severity":"P2","category":"Type","file":"apps/web/src/hooks/useHapticSound.ts","line":209,"code":"this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05254","severity":"P2","category":"Type","file":"apps/web/src/hooks/useHapticSound.ts","line":430,"code":"await this.soundManager.playProceduralSound(type as any, { volume: soundVolume });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05255","severity":"P2","category":"Type","file":"apps/web/src/hooks/useHapticSound.ts","line":430,"code":"await this.soundManager.playProceduralSound(type as any, { volume: soundVolume });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05256","severity":"P1","category":"Type","file":"apps/web/src/hooks/useOptimizedAuth.ts","line":111,"code":"audio.play().catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05257","severity":"P2","category":"Type","file":"apps/web/src/hooks/useOptimizedAuth.ts","line":150,"code":"onLoginSuccess?.(user as User);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05258","severity":"P2","category":"Type","file":"apps/web/src/hooks/useOptimizedAuth.ts","line":215,"code":"onRegisterSuccess?.(user as User);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05259","severity":"P1","category":"Type","file":"apps/web/src/hooks/useOptimizedChat.ts","line":45,"code":"audio.play().catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05260","severity":"P1","category":"Type","file":"apps/web/src/hooks/useOptimizedSwipe.ts","line":47,"code":"audio.play().catch(() => { });","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05261","severity":"P2","category":"Type","file":"apps/web/src/hooks/usePredictiveTyping.ts","line":106,"code":"const context = tokens.slice(-2); // Use last 2 tokens as context","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05262","severity":"P2","category":"Type","file":"apps/web/src/hooks/usePredictiveTyping.ts","line":154,"code":"// Check if this is the same prediction as last time","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05263","severity":"P1","category":"Type","file":"apps/web/src/hooks/usePushNotifications.ts","line":22,"code":"PushNotificationManager.isSupported().then(supported => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05264","severity":"P1","category":"Type","file":"apps/web/src/hooks/usePushNotifications.ts","line":26,"code":"PushNotificationManager.getPermission().then(permission => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05265","severity":"P1","category":"Type","file":"apps/web/src/hooks/usePushNotifications.ts","line":225,"code":".then(res => res.json())","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05266","severity":"P1","category":"Type","file":"apps/web/src/hooks/usePushNotifications.ts","line":226,"code":".then(data => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05267","severity":"P1","category":"Type","file":"apps/web/src/hooks/usePushNotifications.ts","line":231,"code":".catch(err => { logger.error('[NotificationSettings] Error loading settings:', { error }); });","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05268","severity":"P2","category":"Type","file":"apps/web/src/hooks/useReveal.ts","line":145,"code":"} as React.CSSProperties,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05269","severity":"P2","category":"Type","file":"apps/web/src/hooks/useSwipe.test.tsx","line":20,"code":"(petsAPI.discoverPets as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05270","severity":"P2","category":"Type","file":"apps/web/src/hooks/useSwipe.test.tsx","line":21,"code":"(petsAPI.swipePet as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05271","severity":"P2","category":"Type","file":"apps/web/src/hooks/useSwipe.test.tsx","line":25,"code":"(petsAPI.discoverPets as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05272","severity":"P2","category":"Type","file":"apps/web/src/hooks/useSwipe.test.tsx","line":44,"code":"(petsAPI.discoverPets as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05273","severity":"P2","category":"Type","file":"apps/web/src/hooks/useSwipe.test.tsx","line":47,"code":"(petsAPI.swipePet as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05274","severity":"P2","category":"Type","file":"apps/web/src/hooks/useSwipe.test.tsx","line":69,"code":"(petsAPI.discoverPets as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05275","severity":"P2","category":"Type","file":"apps/web/src/hooks/useUltraBreedFiltering.d.ts","line":72,"code":"getPopularBreeds: (species?: string) => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05276","severity":"P2","category":"Type","file":"apps/web/src/hooks/useUltraBreedFiltering.d.ts","line":73,"code":"getBreedStats: () => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05277","severity":"P2","category":"Type","file":"apps/web/src/hooks/useWebSocket.d.ts","line":44,"code":"notifications: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05278","severity":"P2","category":"Type","file":"apps/web/src/lib/ErrorHandler.ts","line":23,"code":"import * as Sentry from '@sentry/nextjs';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05279","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":14,"code":"(global.fetch as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05280","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":20,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05281","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":38,"code":"(global.fetch as jest.Mock).mockImplementation(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05282","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":48,"code":"(global.fetch as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05283","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":66,"code":"(global.fetch as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05284","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":84,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05285","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":109,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05286","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":127,"code":"(global.fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05287","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":137,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05288","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":150,"code":"expect((error as HttpError).status).toBe(404);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05289","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":151,"code":"expect((error as HttpError).message).toBe('Resource not found');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05290","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":156,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05291","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":167,"code":"(global.fetch as jest.Mock)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05292","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":185,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05293","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":205,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05294","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":221,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05295","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":237,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05296","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":260,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05297","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":283,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05298","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":290,"code":"const callArgs = (global.fetch as jest.Mock).mock.calls[0][1];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05299","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":299,"code":"(global.fetch as jest.Mock).mockImplementation((url, options) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05300","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":316,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05301","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":333,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05302","severity":"P2","category":"Type","file":"apps/web/src/lib/__tests__/http.test.ts","line":349,"code":"(global.fetch as jest.Mock).mockResolvedValueOnce({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05303","severity":"P2","category":"Type","file":"apps/web/src/lib/animations.ts","line":9,"code":"stiffness: 300, // Rules-compliant value (was 400)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05304","severity":"P2","category":"Type","file":"apps/web/src/lib/animations.ts","line":10,"code":"damping: 30 // Rules-compliant value (was 17)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05305","severity":"P2","category":"Type","file":"apps/web/src/lib/animations.ts","line":14,"code":"staggerChildren: 0.07 // Rules specify 0.07 (was incorrectly 0.1)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05306","severity":"P2","category":"Type","file":"apps/web/src/lib/api/__tests__/api.test.ts","line":32,"code":"(localStorage.getItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05307","severity":"P2","category":"Type","file":"apps/web/src/lib/api/__tests__/api.test.ts","line":33,"code":"(localStorage.setItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05308","severity":"P2","category":"Type","file":"apps/web/src/lib/api/__tests__/api.test.ts","line":34,"code":"(localStorage.removeItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05309","severity":"P2","category":"Type","file":"apps/web/src/lib/api/__tests__/api.test.ts","line":90,"code":"(localStorage.getItem as jest.Mock).mockReturnValue('test-token');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05310","severity":"P2","category":"Type","file":"apps/web/src/lib/api/__tests__/api.test.ts","line":133,"code":"(localStorage.getItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05311","severity":"P2","category":"Type","file":"apps/web/src/lib/api/__tests__/api.test.ts","line":134,"code":"(localStorage.setItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05312","severity":"P2","category":"Type","file":"apps/web/src/lib/api/__tests__/api.test.ts","line":135,"code":"(localStorage.removeItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05313","severity":"P2","category":"Type","file":"apps/web/src/lib/api-client.d.ts","line":101,"code":"getWeather: (lat?: number, lon?: number) => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05314","severity":"P2","category":"Type","file":"apps/web/src/lib/api-client.d.ts","line":189,"code":"analyzePhoto(formData: FormData): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05315","severity":"P2","category":"Type","file":"apps/web/src/lib/api-client.d.ts","line":212,"code":"getCurrentSubscription(): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05316","severity":"P2","category":"Type","file":"apps/web/src/lib/api-client.ts","line":161,"code":"// Mark messages as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05317","severity":"P2","category":"Type","file":"apps/web/src/lib/auth.d.ts","line":19,"code":"* Validate that two-factor authentication has been completed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05318","severity":"P2","category":"Type","file":"apps/web/src/lib/auth.ts","line":1,"code":"import * as jose from 'jose';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05319","severity":"P2","category":"Type","file":"apps/web/src/lib/auth.ts","line":56,"code":"* Validate that two-factor authentication has been completed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05320","severity":"P2","category":"Type","file":"apps/web/src/lib/getBlur.ts","line":14,"code":"// Return a simple SVG placeholder as fallback","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05321","severity":"P2","category":"Type","file":"apps/web/src/lib/getBlur.ts","line":42,"code":"// Generate a simple SVG placeholder as fallback","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05322","severity":"P2","category":"Type","file":"apps/web/src/lib/push-notifications.d.ts","line":37,"code":"sendMessageToServiceWorker(message: unknown): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05323","severity":"P2","category":"Type","file":"apps/web/src/lib/schemas/index.d.ts","line":3,"code":"* Rule II.1: Form validation schemas must be defined in packages/core","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05324","severity":"P2","category":"Type","file":"apps/web/src/lib/schemas/index.ts","line":3,"code":"* Rule II.1: Form validation schemas must be defined in packages/core","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05325","severity":"P1","category":"Type","file":"apps/web/src/lib/security.ts","line":244,"code":"}).catch(() => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05326","severity":"P2","category":"Type","file":"apps/web/src/lib/sentry.ts","line":6,"code":"import * as Sentry from '@sentry/nextjs';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05327","severity":"P2","category":"Type","file":"apps/web/src/lib/toast.ts","line":5,"code":"import { toast as sonnerToast } from 'sonner';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05328","severity":"P2","category":"Type","file":"apps/web/src/lib/toast.ts","line":50,"code":"description: userName ? `${userName} has been blocked` : 'You will no longer see content from this user',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05329","severity":"P2","category":"Type","file":"apps/web/src/lib/toast.ts","line":56,"code":"description: userName ? `${userName} has been unblocked` : 'User has been unblocked',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05330","severity":"P2","category":"Type","file":"apps/web/src/lib/utils.d.ts","line":2,"code":"export declare function cn(...inputs: ClassValue[]): any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05331","severity":"P2","category":"Type","file":"apps/web/src/middleware/authMiddleware.d.ts","line":67,"code":"* Check if user has permission","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05332","severity":"P2","category":"Type","file":"apps/web/src/middleware/authMiddleware.ts","line":189,"code":"* Check if user has permission","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05333","severity":"P2","category":"Type","file":"apps/web/src/middleware/authMiddleware.ts","line":192,"code":"// Administrator has all permissions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05334","severity":"P2","category":"Type","file":"apps/web/src/providers/CommandPalette.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05335","severity":"P2","category":"Type","file":"apps/web/src/providers/CommandPalette.d.ts","line":5,"code":"triggerCommand: (commandId: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05336","severity":"P2","category":"Type","file":"apps/web/src/providers/CsrfProvider.d.ts","line":5,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05337","severity":"P2","category":"Type","file":"apps/web/src/providers/CsrfProvider.d.ts","line":32,"code":"export declare function withCsrfToken(fetchFn: any): (input: any, init: any) => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05338","severity":"P2","category":"Type","file":"apps/web/src/providers/ErrorBoundaryProvider.d.ts","line":7,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05339","severity":"P2","category":"Type","file":"apps/web/src/providers/ErrorBoundaryProvider.d.ts","line":12,"code":"export declare const useErrorReporter: () => (error: any, context: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05340","severity":"P2","category":"Type","file":"apps/web/src/providers/ErrorBoundaryProvider.d.ts","line":16,"code":"export declare function withErrorReporting(Component: any, context: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05341","severity":"P2","category":"Type","file":"apps/web/src/providers/ErrorBoundaryProvider.d.ts","line":17,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05342","severity":"P1","category":"Type","file":"apps/web/src/providers/ErrorBoundaryProvider.tsx","line":41,"code":"}).catch(console.error);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05343","severity":"P2","category":"Type","file":"apps/web/src/providers/ErrorBoundaryProvider.tsx","line":73,"code":"We're sorry, but something went wrong. Our team has been notified and is working to fix this issue.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05344","severity":"P2","category":"Type","file":"apps/web/src/providers/NotificationProvider.d.ts","line":8,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05345","severity":"P2","category":"Type","file":"apps/web/src/providers/SocketProvider.d.ts","line":18,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05346","severity":"P2","category":"Type","file":"apps/web/src/providers/SocketProvider.tsx","line":248,"code":"* Mark message as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05347","severity":"P2","category":"Type","file":"apps/web/src/providers/SocketProvider.tsx","line":255,"code":"logger.error('Failed to mark message as read', { matchId, messageId, error: response.error });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05348","severity":"P1","category":"Type","file":"apps/web/src/providers/SocketProvider.tsx","line":289,"code":"Notification.requestPermission().then(permission => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05349","severity":"P2","category":"Type","file":"apps/web/src/providers/ThemeProvider.d.ts","line":2,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05350","severity":"P2","category":"Type","file":"apps/web/src/providers/ThemeProvider.tsx","line":2,"code":"import { ThemeProvider as NextThemeProvider } from 'next-themes';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05351","severity":"P2","category":"Type","file":"apps/web/src/providers/WeatherProvider.d.ts","line":9,"code":"children: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05352","severity":"P1","category":"Type","file":"apps/web/src/services/AnalyticsService.ts","line":54,"code":"this.flushEvents().catch((error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05353","severity":"P1","category":"Type","file":"apps/web/src/services/AnalyticsService.ts","line":84,"code":"this.flushEvents().catch((error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05354","severity":"P1","category":"Type","file":"apps/web/src/services/AnalyticsService.ts","line":103,"code":"this.flushEvents().catch((error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05355","severity":"P2","category":"Type","file":"apps/web/src/services/GeofencingService.ts","line":352,"code":"// Mark notification as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05356","severity":"P2","category":"Type","file":"apps/web/src/services/WebRTCService.ts","line":8,"code":"emit: (event: string, data: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05357","severity":"P2","category":"Type","file":"apps/web/src/services/WebRTCService.ts","line":9,"code":"on: (event: string, callback: (data: any) => void) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05358","severity":"P2","category":"Type","file":"apps/web/src/services/__tests__/NotificationService.test.ts","line":159,"code":"(Notification.requestPermission as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05359","severity":"P2","category":"Type","file":"apps/web/src/services/__tests__/NotificationService.test.ts","line":222,"code":"(window.addEventListener as jest.Mock).mock.calls.find(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05360","severity":"P2","category":"Type","file":"apps/web/src/services/__tests__/NotificationService.test.ts","line":517,"code":"const offlineHandler = (window.addEventListener as jest.Mock).mock.calls.find(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05361","severity":"P2","category":"Type","file":"apps/web/src/services/__tests__/NotificationService.test.ts","line":529,"code":"const onlineHandler = (window.addEventListener as jest.Mock).mock.calls.find(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05362","severity":"P2","category":"Type","file":"apps/web/src/services/__tests__/NotificationService.test.ts","line":540,"code":"(navigator.serviceWorker.register as jest.Mock).mockRejectedValue(","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05363","severity":"P2","category":"Type","file":"apps/web/src/services/ai-name-suggestions.d.ts","line":78,"code":"suggestions: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05364","severity":"P2","category":"Type","file":"apps/web/src/services/ai-name-suggestions.d.ts","line":79,"code":"isLoading: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05365","severity":"P2","category":"Type","file":"apps/web/src/services/ai-name-suggestions.d.ts","line":80,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05366","severity":"P2","category":"Type","file":"apps/web/src/services/ai-name-suggestions.ts","line":98,"code":"Format as JSON array with this structure:","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05367","severity":"P2","category":"Type","file":"apps/web/src/services/api.d.ts","line":83,"code":"analyzePhoto(formData: FormData): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05368","severity":"P2","category":"Type","file":"apps/web/src/services/api.d.ts","line":106,"code":"getCurrentSubscription(): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05369","severity":"P2","category":"Type","file":"apps/web/src/services/api.d.ts","line":230,"code":"getWeather: (lat?: number, lon?: number) => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05370","severity":"P2","category":"Type","file":"apps/web/src/services/api.d.ts","line":318,"code":"analyzePhoto(formData: FormData): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05371","severity":"P2","category":"Type","file":"apps/web/src/services/api.d.ts","line":341,"code":"getCurrentSubscription(): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05372","severity":"P2","category":"Type","file":"apps/web/src/services/api.ts","line":102,"code":"return cached.data as T;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05373","severity":"P2","category":"Type","file":"apps/web/src/services/api.ts","line":505,"code":"// Align with existing endpoints: use matches as conversations","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05374","severity":"P1","category":"Type","file":"apps/web/src/services/api.ts","line":540,"code":"}).then((res: Response) => res.json());","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05375","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":65,"code":"}): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05376","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":69,"code":"getBreed(name: string): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05377","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":76,"code":"}): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05378","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":80,"code":"getBreedSuggestions(preferences: BreedSuggestionRequest): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05379","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":84,"code":"getBreedStats(): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05380","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":128,"code":"}): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05381","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":164,"code":"}): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05382","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":168,"code":"getBreedCompatibility(breedNames: string[]): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05383","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":181,"code":"}): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05384","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":192,"code":"pets: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05385","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":193,"code":"recommendations: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05386","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":194,"code":"pagination: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05387","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":195,"code":"analytics: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05388","severity":"P2","category":"Type","file":"apps/web/src/services/breeds.d.ts","line":196,"code":"appliedFilters: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05389","severity":"P2","category":"Type","file":"apps/web/src/services/coach-tooltips.d.ts","line":74,"code":"* Check if user has completed a tour","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05390","severity":"P2","category":"Type","file":"apps/web/src/services/coach-tooltips.d.ts","line":78,"code":"* Mark tour as completed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05391","severity":"P2","category":"Type","file":"apps/web/src/services/coach-tooltips.d.ts","line":100,"code":"currentTour: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05392","severity":"P2","category":"Type","file":"apps/web/src/services/coach-tooltips.d.ts","line":101,"code":"isTourActive: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05393","severity":"P2","category":"Type","file":"apps/web/src/services/coach-tooltips.ts","line":259,"code":"* Check if user has completed a tour","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05394","severity":"P2","category":"Type","file":"apps/web/src/services/coach-tooltips.ts","line":267,"code":"* Mark tour as completed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05395","severity":"P2","category":"Type","file":"apps/web/src/services/fileUpload.ts","line":113,"code":"resourceType: 'video', // Cloudinary treats audio as video","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05396","severity":"P1","category":"Type","file":"apps/web/src/services/firebase.ts","line":18,"code":"isSupported().then((supported) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05397","severity":"P2","category":"Type","file":"apps/web/src/services/gamification.d.ts","line":97,"code":"gamification: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05398","severity":"P2","category":"Type","file":"apps/web/src/services/gamification.d.ts","line":98,"code":"isLoading: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05399","severity":"P2","category":"Type","file":"apps/web/src/services/gamification.d.ts","line":99,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05400","severity":"P2","category":"Type","file":"apps/web/src/services/gamification.d.ts","line":100,"code":"newBadges: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05401","severity":"P3","category":"Type","file":"apps/web/src/services/logger.ts","line":113,"code":"console.log('Sending log to external service:', logEntry);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05402","severity":"P2","category":"Type","file":"apps/web/src/services/photo-enhancement.d.ts","line":75,"code":"isEnhancing: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05403","severity":"P2","category":"Type","file":"apps/web/src/services/photo-enhancement.d.ts","line":76,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05404","severity":"P2","category":"Type","file":"apps/web/src/services/pwa-offline.d.ts","line":113,"code":"isOffline: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05405","severity":"P2","category":"Type","file":"apps/web/src/services/pwa-offline.d.ts","line":114,"code":"pendingActions: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05406","severity":"P2","category":"Type","file":"apps/web/src/services/pwa-offline.d.ts","line":115,"code":"isInitialized: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05407","severity":"P2","category":"Type","file":"apps/web/src/services/session-replay.d.ts","line":68,"code":"isEnabled: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05408","severity":"P2","category":"Type","file":"apps/web/src/services/session-replay.d.ts","line":69,"code":"sessionId: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05409","severity":"P2","category":"Type","file":"apps/web/src/services/socket.ts","line":24,"code":"type EventHandler = (...args: any[]) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05410","severity":"P2","category":"Type","file":"apps/web/src/services/socket.ts","line":179,"code":"emit(event: string, data?: any): void {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05411","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.d.ts","line":93,"code":"stories: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05412","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.d.ts","line":94,"code":"isLoading: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05413","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.d.ts","line":95,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05414","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.d.ts","line":96,"code":"hasMore: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05415","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.ts","line":86,"code":"logger.error('Failed to fetch success stories', { error: error as any });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05416","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.ts","line":86,"code":"logger.error('Failed to fetch success stories', { error: error as any });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05417","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.ts","line":125,"code":"logger.error('Failed to submit success story', { error: error as any });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05418","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.ts","line":125,"code":"logger.error('Failed to submit success story', { error: error as any });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05419","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.ts","line":179,"code":"transformCMSStory(cmsStory: any): SuccessStory {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05420","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.ts","line":215,"code":"content: 'After months of searching for the right companion for my Golden Retriever Bella, we finally found Max through PawfectMatch. They hit it off immediately and now have weekly playdates at the dog park. The compatibility scoring was spot on!',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05421","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.ts","line":239,"code":"content: 'My shy cat Luna was having trouble socializing, but PawfectMatch helped us find Charlie, another gentle soul. They now spend their days cuddling and playing together. The AI matching was incredible!',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05422","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.ts","line":311,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05423","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.ts","line":326,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05424","severity":"P2","category":"Type","file":"apps/web/src/services/success-stories.ts","line":343,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05425","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":50,"code":"moonPhase: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05426","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":58,"code":"arVisualizationData: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05427","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":61,"code":"trendPrediction: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05428","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":62,"code":"anomalyDetection: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05429","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":63,"code":"historicalComparison: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05430","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":64,"code":"petSafety: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05431","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":65,"code":"breedSpecificAdvice: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05432","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":66,"code":"petActivityForecast: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05433","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":67,"code":"dataProviders: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05434","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":70,"code":"dataQuality: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05435","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":175,"code":"logger.error('Tomorrow.io API error', { error: error as any });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05436","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":175,"code":"logger.error('Tomorrow.io API error', { error: error as any });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05437","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":192,"code":"logger.error('Visual Crossing API error', { error: error as any });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05438","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":192,"code":"logger.error('Visual Crossing API error', { error: error as any });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05439","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":228,"code":"logger.error('Meteomatics API error', { error: error as any });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05440","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":228,"code":"logger.error('Meteomatics API error', { error: error as any });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05441","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":264,"code":"windTurbulence: this.calculateTurbulence(values.windGust, values.windSpeed) as 'calm' | 'light' | 'moderate' | 'severe',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05442","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":277,"code":"precipitationType: (values.precipitationType || 'none') as 'none' | 'rain' | 'snow' | 'sleet' | 'hail' | 'mixed',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05443","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":279,"code":"precipitationIntensity: this.getPrecipitationIntensity(values.precipitationIntensity) as 'none' | 'light' | 'moderate' | 'heavy' | 'extreme',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05444","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":380,"code":"// Similar mapping as Tomorrow.io but using Visual Crossing's data structure","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05445","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":405,"code":"} as TomorrowIOResponse, lat, lon);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05446","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":441,"code":"} as TomorrowIOResponse, lat, lon);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05447","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":531,"code":"static generatePetSafetyInfo(values: TomorrowIOValues): any {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05448","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":564,"code":"static generateRiskLevel(level: string): any {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05449","severity":"P2","category":"Type","file":"apps/web/src/services/weatherProviders.ts","line":573,"code":"static generateActivityBlock(time: string): any {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05450","severity":"P2","category":"Type","file":"apps/web/src/stores/auth-store.ts","line":12,"code":"[key: string]: any; // Allow additional user properties","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05451","severity":"P2","category":"Type","file":"apps/web/src/stores/auth-store.ts","line":45,"code":"logger.error('Failed to decrypt auth store:', { error: error as any });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05452","severity":"P2","category":"Type","file":"apps/web/src/stores/auth-store.ts","line":45,"code":"logger.error('Failed to decrypt auth store:', { error: error as any });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05453","severity":"P2","category":"Type","file":"apps/web/src/stores/auth-store.ts","line":55,"code":"logger.error('Failed to encrypt auth store:', { error: error as any });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05454","severity":"P2","category":"Type","file":"apps/web/src/stores/auth-store.ts","line":55,"code":"logger.error('Failed to encrypt auth store:', { error: error as any });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05455","severity":"P2","category":"Type","file":"apps/web/src/stores/theme.ts","line":24,"code":"// Ensure the body has the correct class once on load","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05456","severity":"P2","category":"Type","file":"apps/web/src/tests/PWA.test.tsx","line":464,"code":";(navigator.share as jest.Mock).mockRejectedValueOnce(new Error('Share failed'))","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05457","severity":"P2","category":"Type","file":"apps/web/src/tests/UXPack.test.tsx","line":352,"code":"test('InteractiveButton has proper accessibility attributes', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05458","severity":"P2","category":"Type","file":"apps/web/src/tests/UXPack.test.tsx","line":369,"code":"test('ThemeSwitch has proper aria-label', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05459","severity":"P2","category":"Type","file":"apps/web/src/tests/UXPack.test.tsx","line":380,"code":"test('SafeImage has proper alt text', () => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05460","severity":"P2","category":"Type","file":"apps/web/src/tests/component-tests.d.ts","line":4,"code":"runTest(name: any, testFn: any): Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05461","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":66,"code":"console.log('🧪 ULTRA COMPONENT TESTING');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05462","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":67,"code":"console.log('===========================');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05463","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":77,"code":"console.log(`🧪 Testing: ${name}...`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05464","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":80,"code":"console.log(`✅ ${name} - PASSED`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05465","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":84,"code":"console.log(`❌ ${name} - FAILED: ${error.message}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05466","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":185,"code":"console.log('\\n🏆 COMPONENT TEST RESULTS');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05467","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":186,"code":"console.log('=========================');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05468","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":187,"code":"console.log(`📊 Total Tests: ${total}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05469","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":188,"code":"console.log(`✅ Passed: ${passed}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05470","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":189,"code":"console.log(`❌ Failed: ${failed}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05471","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":190,"code":"console.log(`📈 Success Rate: ${((passed / total) * 100).toFixed(1)}%`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05472","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":192,"code":"console.log('\\n💥 FAILED TESTS:');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05473","severity":"P3","category":"Type","file":"apps/web/src/tests/component-tests.tsx","line":196,"code":"console.log(`❌ ${r.name}: ${r.error}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05474","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":11,"code":"mockAuth?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05475","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":12,"code":"motionConfig?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05476","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":20,"code":"expectAnimationStates: (element: any, states: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05477","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":24,"code":"on: jest.Mock<void, [event: any, handler: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05478","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":25,"code":"off: jest.Mock<void, [event: any, handler: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05479","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":31,"code":"simulateEvent: (event: any, data: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05480","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":34,"code":"testRealTimeFeature: (component: any, event: any, data: any, expectedOutcome: any) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05481","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":36,"code":"on: jest.Mock<void, [event: any, handler: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05482","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":37,"code":"off: jest.Mock<void, [event: any, handler: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05483","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":43,"code":"simulateEvent: (event: any, data: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05484","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":50,"code":"mockApiResponse: (data: any, status?: number) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05485","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":51,"code":"mockApiError: (message: any, status?: number) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05486","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":52,"code":"testApiIntegration: (component: any, apiCall: any, expectedData: any) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05487","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":57,"code":"testButtonVariants: (ButtonComponent: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05488","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":58,"code":"testCardVariants: (CardComponent: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05489","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":85,"code":"measureRenderTime: (component: any) => Promise<number>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05490","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":86,"code":"testMemoryLeaks: (ComponentFactory: any, iterations?: number) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05491","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":87,"code":"initialMemory: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05492","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":88,"code":"finalMemory: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05493","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":92,"code":"testAnimationPerformance: (component: any) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05494","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":98,"code":"testErrorBoundary: (ComponentThatThrows: any, ErrorBoundary: any) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05495","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":104,"code":"testKeyboardNavigation: (component: any) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05496","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":108,"code":"testScreenReader: (component: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05497","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":111,"code":"testColorContrast: (component: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05498","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":115,"code":"export { renderWithProviders as render, animationTestUtils, socketTestUtils, apiTestUtils, premiumTestUtils, performanceTestUtils, errorBoundaryTestUtils, a11yTestUtils, };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05499","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":125,"code":"expectAnimationStates: (element: any, states: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05500","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":129,"code":"on: jest.Mock<void, [event: any, handler: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05501","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":130,"code":"off: jest.Mock<void, [event: any, handler: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05502","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":136,"code":"simulateEvent: (event: any, data: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05503","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":139,"code":"testRealTimeFeature: (component: any, event: any, data: any, expectedOutcome: any) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05504","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":141,"code":"on: jest.Mock<void, [event: any, handler: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05505","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":142,"code":"off: jest.Mock<void, [event: any, handler: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05506","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":148,"code":"simulateEvent: (event: any, data: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05507","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":155,"code":"mockApiResponse: (data: any, status?: number) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05508","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":156,"code":"mockApiError: (message: any, status?: number) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05509","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":157,"code":"testApiIntegration: (component: any, apiCall: any, expectedData: any) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05510","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":162,"code":"testButtonVariants: (ButtonComponent: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05511","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":163,"code":"testCardVariants: (CardComponent: any) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05512","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":190,"code":"measureRenderTime: (component: any) => Promise<number>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05513","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":191,"code":"testMemoryLeaks: (ComponentFactory: any, iterations?: number) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05514","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":192,"code":"initialMemory: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05515","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":193,"code":"finalMemory: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05516","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":197,"code":"testAnimationPerformance: (component: any) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05517","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":203,"code":"testErrorBoundary: (ComponentThatThrows: any, ErrorBoundary: any) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05518","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":209,"code":"testKeyboardNavigation: (component: any) => Promise<{","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05519","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":213,"code":"testScreenReader: (component: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05520","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.d.ts","line":216,"code":"testColorContrast: (component: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05521","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.tsx","line":190,"code":"(global as any).AudioContext = jest.fn(() => mockAudioContext);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05522","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.tsx","line":190,"code":"(global as any).AudioContext = jest.fn(() => mockAudioContext);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05523","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.tsx","line":191,"code":"(global as any).webkitAudioContext = jest.fn(() => mockAudioContext);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05524","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.tsx","line":191,"code":"(global as any).webkitAudioContext = jest.fn(() => mockAudioContext);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05525","severity":"P2","category":"Type","file":"apps/web/src/tests/premium-test-utils.tsx","line":304,"code":"export { renderWithProviders as render, animationTestUtils, socketTestUtils, apiTestUtils, premiumTestUtils, performanceTestUtils, errorBoundaryTestUtils, a11yTestUtils, };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05526","severity":"P2","category":"Type","file":"apps/web/src/tests/test-utils.d.ts","line":86,"code":"export declare const waitFor: (ms: any) => Promise<unknown>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05527","severity":"P2","category":"Type","file":"apps/web/src/tests/test-utils.d.ts","line":87,"code":"export declare const mockApiResponse: (data: any, success?: boolean) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05528","severity":"P2","category":"Type","file":"apps/web/src/tests/test-utils.d.ts","line":89,"code":"data: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05529","severity":"P2","category":"Type","file":"apps/web/src/tests/test-utils.d.ts","line":94,"code":"getItem: jest.Mock<any, [key: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05530","severity":"P2","category":"Type","file":"apps/web/src/tests/test-utils.d.ts","line":95,"code":"setItem: jest.Mock<void, [key: any, value: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05531","severity":"P2","category":"Type","file":"apps/web/src/tests/test-utils.d.ts","line":96,"code":"removeItem: jest.Mock<void, [key: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05532","severity":"P2","category":"Type","file":"apps/web/src/tests/test-utils.d.ts","line":99,"code":"key: jest.Mock<string | null, [index: any], any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05533","severity":"P2","category":"Type","file":"apps/web/src/tests/test-utils.d.ts","line":107,"code":"export { AllTheProviders, customRender as render };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05534","severity":"P2","category":"Type","file":"apps/web/src/tests/test-utils.tsx","line":324,"code":"args[0].includes('componentWillReceiveProps has been renamed')) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05535","severity":"P2","category":"Type","file":"apps/web/src/tests/test-utils.tsx","line":337,"code":"export { AllTheProviders, customRender as render };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05536","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":18,"code":"console.log('🚀 ULTRA TESTING MODE ACTIVATED!');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05537","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":19,"code":"console.log('===============================');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05538","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":38,"code":"console.log(`🧪 Testing: ${name}...`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05539","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":47,"code":"console.log(`✅ ${name} - PASSED (${duration}ms)`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05540","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":58,"code":"console.log(`❌ ${name} - FAILED (${duration}ms): ${errorMessage}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05541","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":63,"code":"console.log('\\n🔐 AUTHENTICATION TESTS');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05542","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":64,"code":"console.log('========================');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05543","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":112,"code":"console.log('\\n🌐 API ENDPOINT TESTS');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05544","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":113,"code":"console.log('=====================');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05545","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":199,"code":"console.log('\\n🤖 AI SERVICE TESTS');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05546","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":200,"code":"console.log('===================');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05547","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":272,"code":"console.log('\\n🔌 WEBSOCKET TESTS');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05548","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":273,"code":"console.log('==================');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05549","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":294,"code":"console.log('\\n⚡ PERFORMANCE TESTS');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05550","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":295,"code":"console.log('===================');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05551","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":320,"code":"console.log('\\n🚨 ERROR HANDLING TESTS');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05552","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":321,"code":"console.log('=======================');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05553","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":350,"code":"console.log('\\n🏆 ULTRA TEST RESULTS');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05554","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":351,"code":"console.log('=====================');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05555","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":352,"code":"console.log(`📊 Total Tests: ${totalTests}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05556","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":353,"code":"console.log(`✅ Passed: ${passed}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05557","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":354,"code":"console.log(`❌ Failed: ${failed}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05558","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":355,"code":"console.log(`⏱️  Total Time: ${totalTime}ms`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05559","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":356,"code":"console.log(`📈 Success Rate: ${((passed / totalTests) * 100).toFixed(1)}%`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05560","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":358,"code":"console.log('\\n💥 FAILED TESTS:');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05561","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":362,"code":"console.log(`❌ ${r.name}: ${r.error}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05562","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":365,"code":"console.log('\\n🎯 PERFORMANCE METRICS:');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05563","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":367,"code":"console.log(`📊 Average Test Duration: ${avgDuration.toFixed(2)}ms`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05564","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":370,"code":"console.log('⚠️  Slow Tests (>1s):');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05565","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":372,"code":"console.log(`   ${r.name}: ${r.duration}ms`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05566","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":376,"code":"console.log('\\n🎉 ALL TESTS PASSED! ULTRA TESTING COMPLETE! 🚀');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05567","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":379,"code":"console.log('\\n⚠️  Some tests failed. Check the errors above.');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05568","severity":"P3","category":"Type","file":"apps/web/src/tests/ultra-test-suite.ts","line":388,"code":"console.log('🧪 Ultra Test Suite loaded! Run: runUltraTests()');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05569","severity":"P2","category":"Type","file":"apps/web/src/theme/unified-design-system.d.ts","line":301,"code":"readonly shadow: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05570","severity":"P2","category":"Type","file":"apps/web/src/theme/unified-design-system.d.ts","line":916,"code":"readonly shadow: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05571","severity":"P2","category":"Type","file":"apps/web/src/types/index.ts","line":92,"code":"// Re-export from weather.d.ts (if it has exports)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05572","severity":"P2","category":"Type","file":"apps/web/src/types/index.ts","line":95,"code":"// Re-export from openweather.d.ts (if it has exports)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05573","severity":"P2","category":"Type","file":"apps/web/src/types/index.ts","line":98,"code":"// Re-export from react-types.d.ts (if it has exports)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05574","severity":"P2","category":"Type","file":"apps/web/src/types/pet-types.d.ts","line":42,"code":"* Type guard function to check if a pet has the featured property","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05575","severity":"P2","category":"Type","file":"apps/web/src/types/pet-types.d.ts","line":50,"code":"* Type guard function to check if a pet has personality tags","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05576","severity":"P2","category":"Type","file":"apps/web/src/types/pet-types.d.ts","line":56,"code":"* Type guard function to check if a pet has health info","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05577","severity":"P2","category":"Type","file":"apps/web/src/types/pet-types.ts","line":2,"code":"* Type guard function to check if a pet has the featured property","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05578","severity":"P2","category":"Type","file":"apps/web/src/types/pet-types.ts","line":8,"code":"* Type guard function to check if a pet has personality tags","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05579","severity":"P2","category":"Type","file":"apps/web/src/types/pet-types.ts","line":14,"code":"* Type guard function to check if a pet has health info","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05580","severity":"P2","category":"Type","file":"apps/web/src/types/react-types.d.ts","line":3,"code":"* Provides a wrapper that makes ForwardRef components usable as JSX elements","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05581","severity":"P2","category":"Type","file":"apps/web/src/types/react-types.d.ts","line":9,"code":"* In React 19, ForwardRef components can be used directly as JSX elements","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05582","severity":"P2","category":"Type","file":"apps/web/src/types/react-types.d.ts","line":12,"code":"export declare function createComponent<T extends React.ForwardRefExoticComponent<any> | React.ComponentType<any>>(Component: T): T;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05583","severity":"P2","category":"Type","file":"apps/web/src/types/react-types.ts","line":3,"code":"* In React 19, ForwardRef components can be used directly as JSX elements","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05584","severity":"P2","category":"Type","file":"apps/web/src/types/webrtc-extensions.d.ts","line":6,"code":"* Prompts the user to select a display or portion of a display (such as a window)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05585","severity":"P2","category":"Type","file":"apps/web/src/types/webrtc-extensions.d.ts","line":7,"code":"* to capture as a MediaStream for sharing or recording purposes.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05586","severity":"P2","category":"Type","file":"apps/web/src/utils/analytics-system.ts","line":337,"code":"return (navigator.connection as any).effectiveType || 'unknown';","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05587","severity":"P2","category":"Type","file":"apps/web/src/utils/analytics-system.ts","line":337,"code":"return (navigator.connection as any).effectiveType || 'unknown';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05588","severity":"P2","category":"Type","file":"apps/web/src/utils/analytics-system.ts","line":536,"code":"analytics.trackError(error as Error, { endpoint, duration });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05589","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":7,"code":"static createLazyComponent(importFn: any, componentName: any, fallback: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05590","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":8,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05591","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":14,"code":"static preloadComponent(importFn: any, componentName: any): Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05592","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":18,"code":"static preloadComponents(components: any): Promise<PromiseSettledResult<any>[]>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05593","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":22,"code":"static isPreloaded(componentName: any): boolean;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05594","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":24,"code":"export declare const createRouteLazyComponent: (importFn: any, routeName: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05595","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":25,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05596","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":28,"code":"export declare const createComponentLazyComponent: (importFn: any, componentName: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05597","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":29,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05598","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":36,"code":"static preloadOnHover(importFn: any, componentName: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05599","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":43,"code":"static preloadOnIntersection(importFn: any, componentName: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05600","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":44,"code":"ref: (node: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05601","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":49,"code":"static preloadOnIdle(importFn: any, componentName: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05602","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":56,"code":"static trackChunkSize(chunkName: any, size: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05603","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":65,"code":"name: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05604","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":66,"code":"size: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05605","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":69,"code":"name: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05606","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.d.ts","line":70,"code":"size: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05607","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.tsx","line":11,"code":"importFn: () => Promise<{ default: React.ComponentType<any> }>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05608","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.tsx","line":28,"code":"private static loadingPromises = new Map<string, Promise<any>>();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05609","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.tsx","line":59,"code":"importFn: () => Promise<any>,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05610","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.tsx","line":71,"code":".then((module: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05611","severity":"P1","category":"Type","file":"apps/web/src/utils/codeSplitting.tsx","line":71,"code":".then((module: any) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05612","severity":"P1","category":"Type","file":"apps/web/src/utils/codeSplitting.tsx","line":76,"code":".catch((error: unknown) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05613","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.tsx","line":89,"code":"static async preloadComponents(components: ComponentConfig[]): Promise<PromiseSettledResult<any>[]> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05614","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.tsx","line":160,"code":"importFn: () => Promise<any>,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05615","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.tsx","line":180,"code":"importFn: () => Promise<any>,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05616","severity":"P2","category":"Type","file":"apps/web/src/utils/codeSplitting.tsx","line":208,"code":"static preloadOnIdle(importFn: () => Promise<any>, componentName: string): void {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05617","severity":"P2","category":"Type","file":"apps/web/src/utils/crypto.ts","line":13,"code":"* @returns Encrypted data as base64 string","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05618","severity":"P2","category":"Type","file":"apps/web/src/utils/crypto.ts","line":33,"code":"* @param encryptedData - Encrypted data as base64 string","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05619","severity":"P2","category":"Type","file":"apps/web/src/utils/error-boundary.d.ts","line":4,"code":"constructor(props: any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05620","severity":"P2","category":"Type","file":"apps/web/src/utils/error-boundary.d.ts","line":5,"code":"static getDerivedStateFromError(error: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05621","severity":"P2","category":"Type","file":"apps/web/src/utils/error-boundary.d.ts","line":7,"code":"error: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05622","severity":"P2","category":"Type","file":"apps/web/src/utils/error-boundary.d.ts","line":10,"code":"componentDidCatch(error: any, errorInfo: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05623","severity":"P2","category":"Type","file":"apps/web/src/utils/error-boundary.d.ts","line":11,"code":"reportError(error: any, errorInfo: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05624","severity":"P2","category":"Type","file":"apps/web/src/utils/error-boundary.d.ts","line":16,"code":"render(): any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05625","severity":"P2","category":"Type","file":"apps/web/src/utils/error-boundary.d.ts","line":19,"code":"export declare const withErrorBoundary: (Component: any, errorBoundaryProps: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05626","severity":"P2","category":"Type","file":"apps/web/src/utils/error-boundary.d.ts","line":20,"code":"(props: any): JSX.Element;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05627","severity":"P2","category":"Type","file":"apps/web/src/utils/error-boundary.d.ts","line":24,"code":"reportError: (error: any, context: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05628","severity":"P1","category":"Type","file":"apps/web/src/utils/error-boundary.tsx","line":80,"code":"}).catch(err => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05629","severity":"P2","category":"Type","file":"apps/web/src/utils/error-boundary.tsx","line":155,"code":"? 'We encountered a critical error. Our team has been notified and will fix this soon.'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05630","severity":"P1","category":"Type","file":"apps/web/src/utils/error-boundary.tsx","line":236,"code":"}).catch(err => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05631","severity":"P2","category":"Type","file":"apps/web/src/utils/export.d.ts","line":16,"code":"* Export data as CSV","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05632","severity":"P2","category":"Type","file":"apps/web/src/utils/export.d.ts","line":20,"code":"* Export data as JSON","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05633","severity":"P2","category":"Type","file":"apps/web/src/utils/export.d.ts","line":24,"code":"* Export data as PDF (basic implementation)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05634","severity":"P2","category":"Type","file":"apps/web/src/utils/export.ts","line":11,"code":"* Export data as CSV","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05635","severity":"P2","category":"Type","file":"apps/web/src/utils/export.ts","line":43,"code":"* Export data as JSON","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05636","severity":"P2","category":"Type","file":"apps/web/src/utils/export.ts","line":58,"code":"* Export data as PDF (basic implementation)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05637","severity":"P2","category":"Type","file":"apps/web/src/utils/icon-wrapper.tsx","line":23,"code":"<Icon className={className} {...(props as T)} />","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05638","severity":"P2","category":"Type","file":"apps/web/src/utils/image-optimization.ts","line":13,"code":"const canvas = document.createElement('canvas');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05639","severity":"P2","category":"Type","file":"apps/web/src/utils/image-optimization.ts","line":16,"code":"reject(new Error('Could not get canvas context'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05640","severity":"P2","category":"Type","file":"apps/web/src/utils/image-optimization.ts","line":39,"code":"const canvas = document.createElement('canvas');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05641","severity":"P2","category":"Type","file":"apps/web/src/utils/image-optimization.ts","line":42,"code":"reject(new Error('Could not get canvas context'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05642","severity":"P2","category":"Type","file":"apps/web/src/utils/image-optimization.ts","line":80,"code":"const canvas = document.createElement('canvas');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05643","severity":"P2","category":"Type","file":"apps/web/src/utils/image-optimization.ts","line":83,"code":"reject(new Error('Could not get canvas context'));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05644","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":14,"code":"static get(key: any): any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05645","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":18,"code":"static set(key: any, blob: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05646","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":22,"code":"static delete(key: any): void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05647","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":41,"code":"static generateOptimizedUrl(originalUrl: any, options?: {}): any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05648","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":57,"code":"static preloadImage(url: any): Promise<unknown>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05649","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":61,"code":"static generateSrcSet(baseUrl: any, widths: number[] | undefined, format: any): string;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05650","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":63,"code":"export declare function useLazyImage(src: any, options?: {}): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05651","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":65,"code":"src: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05652","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":72,"code":"src: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05653","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":73,"code":"alt: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05654","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":75,"code":"format: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05655","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":77,"code":"className: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05656","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.d.ts","line":78,"code":"style: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05657","severity":"P2","category":"Type","file":"apps/web/src/utils/imageOptimization.tsx","line":211,"code":"const canvas = document.createElement('canvas');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05658","severity":"P1","category":"Type","file":"apps/web/src/utils/imageOptimization.tsx","line":277,"code":"ImageOptimizer.getBestFormat().then(setBestFormat);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05659","severity":"P2","category":"Type","file":"apps/web/src/utils/inputValidation.ts","line":222,"code":"return InputSanitizer.sanitizeNumber(value as number | string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05660","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-optimization.d.ts","line":34,"code":"elementRef: (node: any) => (() => void) | undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-05661","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-optimization.d.ts","line":38,"code":"export declare const optimizeImageForMobile: (src: any, width: any, height: any) => string;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-05662","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-optimization.d.ts","line":40,"code":"[x: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-05663","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-optimization.d.ts","line":41,"code":"src: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-05664","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-optimization.d.ts","line":42,"code":"alt: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-05665","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-optimization.d.ts","line":43,"code":"width: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-05666","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-optimization.d.ts","line":44,"code":"height: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-05667","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-optimization.d.ts","line":84,"code":"handleTouchStart: (event: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-05668","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-optimization.d.ts","line":85,"code":"handleTouchMove: (event: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-05669","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-optimization.d.ts","line":96,"code":"addToOfflineQueue: (item: any) => void;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-05670","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-performance.d.ts","line":39,"code":"loadModule: (moduleName: string, importFn: () => Promise<any>) => Promise<void>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"mobile"}
{"id":"AUD-TYP-05671","severity":"P1","category":"Type","file":"apps/web/src/utils/mobile-performance.ts","line":196,"code":"caches.keys().then(names => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"mobile"}
{"id":"AUD-TYP-05672","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-performance.ts","line":225,"code":"link.as = 'font';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-05673","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-performance.ts","line":230,"code":"link.as = 'image';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-05674","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-testing.ts","line":40,"code":"// Test 5: Safe Areas (10% of score)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-05675","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-testing.ts","line":42,"code":"testResults.safeAreas = await testSafeAreas();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-05676","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-testing.ts","line":314,"code":"// Safe areas (10% weight)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-05677","severity":"P2","category":"Type","file":"apps/web/src/utils/mobile-testing.ts","line":348,"code":"const unsafeAreas = results.safeAreas.filter(s => !s.properlyHandled);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"mobile"}
{"id":"AUD-TYP-05678","severity":"P2","category":"Type","file":"apps/web/src/utils/performance-optimizations.d.ts","line":44,"code":"lazyImport: (moduleName: string) => Promise<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05679","severity":"P1","category":"Type","file":"apps/web/src/utils/performance-optimizations.ts","line":119,"code":"caches.keys().then(names => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05680","severity":"P2","category":"Type","file":"apps/web/src/utils/performance-optimizations.ts","line":198,"code":"// Mark as loaded after initial render","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05681","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.d.ts","line":6,"code":"export declare const dynamicImport: <T>(importFn: () => Promise<T>, fallback?: React.ComponentType) => React.LazyExoticComponent<any>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05682","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.d.ts","line":53,"code":"effectiveType: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05683","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.d.ts","line":54,"code":"downlink: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05684","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.d.ts","line":55,"code":"rtt: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05685","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.d.ts","line":56,"code":"saveData: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05686","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.ts","line":26,"code":"return { default: module as any };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05687","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.ts","line":26,"code":"return { default: module as any };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05688","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.ts","line":107,"code":"const nav = entry as PerformanceNavigationTiming;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05689","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.ts","line":135,"code":"if (!(entry as any).hadRecentInput) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05690","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.ts","line":135,"code":"if (!(entry as any).hadRecentInput) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05691","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.ts","line":136,"code":"clsValue += (entry as any).value;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05692","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.ts","line":136,"code":"clsValue += (entry as any).value;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05693","severity":"P2","category":"Type","file":"apps/web/src/utils/performance.ts","line":379,"code":"link.as = 'font';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05694","severity":"P2","category":"Type","file":"apps/web/src/utils/performanceAdvanced.tsx","line":140,"code":"const deviceMemory = (navigator as Navigator & { deviceMemory?: number }).deviceMemory || 4;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05695","severity":"P2","category":"Type","file":"apps/web/src/utils/performanceAdvanced.tsx","line":203,"code":"link.as = as;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05696","severity":"P3","category":"Type","file":"apps/web/src/utils/performanceAdvanced.tsx","line":219,"code":"console.log(`[Bundle] ${script.name}: ${(size / 1024).toFixed(2)}KB`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"web"}
{"id":"AUD-TYP-05697","severity":"P2","category":"Type","file":"apps/web/src/utils/petCardAdapter.ts","line":8,"code":"[key: string]: any; // Allow additional photo properties","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05698","severity":"P2","category":"Type","file":"apps/web/src/utils/petCardAdapter.ts","line":23,"code":"[key: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05699","severity":"P2","category":"Type","file":"apps/web/src/utils/petCardAdapter.ts","line":25,"code":"[key: string]: any; // Allow additional pet properties","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05700","severity":"P1","category":"Type","file":"apps/web/src/utils/pwa-utils.ts","line":131,"code":"void navigator.serviceWorker.ready.then(registration => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05701","severity":"P1","category":"Type","file":"apps/web/src/utils/pwa-utils.ts","line":172,"code":"void loadOfflineActions().then(setActions);","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05702","severity":"P2","category":"Type","file":"apps/web/src/utils/pwa.d.ts","line":38,"code":"* Check if running as PWA","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05703","severity":"P2","category":"Type","file":"apps/web/src/utils/pwa.ts","line":175,"code":"* Check if running as PWA","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05704","severity":"P2","category":"Type","file":"apps/web/src/utils/rate-limiter.ts","line":36,"code":"// Reset count if window has expired","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05705","severity":"P2","category":"Type","file":"apps/web/src/utils/responsive-test.d.ts","line":18,"code":"export declare function responsiveClass(baseClass: any, mobileClass: any, tabletClass: any, desktopClass: any): string;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-05706","severity":"P2","category":"Type","file":"apps/web/src/utils/safe-area.d.ts","line":16,"code":"* Check if device has safe area insets (notch, dynamic island, etc.)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05707","severity":"P2","category":"Type","file":"apps/web/src/utils/safe-area.ts","line":23,"code":"* Check if device has safe area insets (notch, dynamic island, etc.)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05708","severity":"P1","category":"Type","file":"apps/web/src/utils/webVitals.ts","line":59,"code":"}).catch((error: unknown) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"web"}
{"id":"AUD-TYP-05709","severity":"P2","category":"Type","file":"apps/web/src/utils/webVitals.ts","line":135,"code":"const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-05710","severity":"P2","category":"Type","file":"packages/core/src/animations.ts","line":10,"code":"stiffness: 300,  // Rules-compliant value (was 400)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05711","severity":"P2","category":"Type","file":"packages/core/src/animations.ts","line":11,"code":"damping: 30      // Rules-compliant value (was 17)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05712","severity":"P2","category":"Type","file":"packages/core/src/animations.ts","line":16,"code":"staggerChildren: 0.07  // Rules specify 0.07 (was incorrectly 0.1)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05713","severity":"P2","category":"Type","file":"packages/core/src/api/APIErrorClassifier.ts","line":31,"code":"[ErrorType.AUTHENTICATION]: 'Your session has expired. Please sign in again.',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05714","severity":"P2","category":"Type","file":"packages/core/src/api/APIErrorClassifier.ts","line":254,"code":"const response = error.response as { status?: number; statusCode?: number };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05715","severity":"P2","category":"Type","file":"packages/core/src/api/RecoveryStrategies.ts","line":129,"code":"logger.info('Using cached data as fallback');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05716","severity":"P2","category":"Type","file":"packages/core/src/api/RequestRetryStrategy.ts","line":268,"code":"return (error as { status: number }).status;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05717","severity":"P2","category":"Type","file":"packages/core/src/api/UnifiedAPIClient.ts","line":207,"code":"return data as T;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05718","severity":"P2","category":"Type","file":"packages/core/src/api/UnifiedAPIClient.ts","line":259,"code":"data: recoveryResult.data as T,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05719","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":15,"code":"const mockedAxios = axios as jest.Mocked<typeof axios>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05720","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":19,"code":"defaults: {} as AxiosDefaults,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05721","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":73,"code":"defaults: {} as AxiosDefaults,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05722","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":77,"code":"registeredRequestInterceptors.push(onFulfilled as RequestInterceptorHandler);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05723","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":94,"code":"} as Record<string, unknown>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05724","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":129,"code":"(localStorage.getItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05725","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":130,"code":"(localStorage.setItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05726","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":131,"code":"(localStorage.removeItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05727","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":139,"code":"axiosInstanceMock.get.mockResolvedValue(mockResponse as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05728","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":150,"code":"axiosInstanceMock.get.mockRejectedValue(mockError as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05729","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":159,"code":"axiosInstanceMock.post.mockResolvedValue(mockResponse as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05730","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":167,"code":"axiosInstanceMock.post.mockResolvedValue({ data: { success: true } } as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05731","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":170,"code":"(localStorage.getItem as jest.Mock).mockReturnValue('test-token');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05732","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":185,"code":"axiosInstanceMock.post.mockResolvedValue(mockResponse as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05733","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":193,"code":"const postMock = Reflect.get(axiosInstanceMock, 'post') as jest.Mock;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05734","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":212,"code":"(localStorage.getItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05735","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":213,"code":"(localStorage.setItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05736","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":214,"code":"(localStorage.removeItem as jest.Mock).mockClear();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05737","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":220,"code":"axiosInstanceMock.get.mockResolvedValue({ data: mockResponse } as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05738","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":248,"code":"axiosInstanceMock.get.mockRejectedValue(mockError as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05739","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":270,"code":"axiosInstanceMock.post.mockResolvedValue({ data: mockResponse } as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05740","severity":"P2","category":"Type","file":"packages/core/src/api/__tests__/api.test.ts","line":301,"code":"axiosInstanceMock.post.mockRejectedValue(mockError as never);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05741","severity":"P2","category":"Type","file":"packages/core/src/api/client.ts","line":64,"code":": new AxiosHeaders((config.headers as Record<string, string> | undefined) ?? {});","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05742","severity":"P2","category":"Type","file":"packages/core/src/api/client.ts","line":166,"code":"(config.onProgress as (progress: number) => void)(progress);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05743","severity":"P2","category":"Type","file":"packages/core/src/api/client.ts","line":203,"code":"typeof (headers as { set?: unknown }).set === 'function'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05744","severity":"P2","category":"Type","file":"packages/core/src/api/hooks.ts","line":41,"code":"(options.onSuccess as (...args: unknown[]) => void)(...args);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05745","severity":"P2","category":"Type","file":"packages/core/src/api/hooks.ts","line":384,"code":"return res as ApiClientResponse<{ id: string }>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05746","severity":"P2","category":"Type","file":"packages/core/src/api/index.ts","line":12,"code":"export type { RequestConfig as ApiClientRequestConfig } from './client';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05747","severity":"P2","category":"Type","file":"packages/core/src/hooks/useFocusTrap.ts","line":18,"code":"const firstElement = focusableElements[0] as HTMLElement;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05748","severity":"P2","category":"Type","file":"packages/core/src/hooks/useFocusTrap.ts","line":19,"code":"const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05749","severity":"P2","category":"Type","file":"packages/core/src/hooks/useFocusTrap.ts","line":58,"code":"const initialElement = focusableElements[0] as HTMLElement | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05750","severity":"P2","category":"Type","file":"packages/core/src/hooks/useGesture.ts","line":83,"code":"addEventListenerSafely(element, 'touchstart', handleTouchStart as EventListener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05751","severity":"P2","category":"Type","file":"packages/core/src/hooks/useGesture.ts","line":84,"code":"addEventListenerSafely(element, 'touchmove', handleTouchMove as EventListener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05752","severity":"P2","category":"Type","file":"packages/core/src/hooks/useGesture.ts","line":85,"code":"addEventListenerSafely(element, 'touchend', handleTouchEnd as EventListener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05753","severity":"P2","category":"Type","file":"packages/core/src/hooks/useGesture.ts","line":88,"code":"removeEventListenerSafely(element, 'touchstart', handleTouchStart as EventListener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05754","severity":"P2","category":"Type","file":"packages/core/src/hooks/useGesture.ts","line":89,"code":"removeEventListenerSafely(element, 'touchmove', handleTouchMove as EventListener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05755","severity":"P2","category":"Type","file":"packages/core/src/hooks/useGesture.ts","line":90,"code":"removeEventListenerSafely(element, 'touchend', handleTouchEnd as EventListener);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05756","severity":"P2","category":"Type","file":"packages/core/src/hooks/useRealtimeSocket.ts","line":140,"code":"callback(data as TypingIndicator);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05757","severity":"P2","category":"Type","file":"packages/core/src/hooks/useRealtimeSocket.ts","line":155,"code":"callback(data as RealtimeMessage);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05758","severity":"P2","category":"Type","file":"packages/core/src/hooks/useRealtimeSocket.ts","line":170,"code":"callback(data as OnlineStatus);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05759","severity":"P2","category":"Type","file":"packages/core/src/mappers/message.ts","line":58,"code":"id: senderId, // Alias for _id","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05760","severity":"P2","category":"Type","file":"packages/core/src/mappers/user.ts","line":3,"code":"// Legacy user shape as returned by the legacy web API layer","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05761","severity":"P2","category":"Type","file":"packages/core/src/mappers/user.ts","line":29,"code":"id: legacy.id, // Alias for _id","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05762","severity":"P2","category":"Type","file":"packages/core/src/schemas/index.ts","line":3,"code":"* Rule II.1: Form validation schemas must be defined in packages/core","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05763","severity":"P2","category":"Type","file":"packages/core/src/schemas/index.ts","line":121,"code":"export { createStorySchema as storyCreateSchema, replyStorySchema as storyReplySchema } from './story';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05764","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":45,"code":"const error: ApiError = await response.json() as ApiError;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05765","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":49,"code":"return await response.json() as AccountDeletionResponse;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05766","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":69,"code":"const error: ApiError = await response.json() as ApiError;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05767","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":73,"code":"return await response.json() as { success: boolean; message: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05768","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":93,"code":"const error: ApiError = await response.json() as ApiError;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05769","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":97,"code":"return await response.json() as AccountDeactivationResponse;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05770","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":115,"code":"const error: ApiError = await response.json() as ApiError;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05771","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":119,"code":"return await response.json() as { success: boolean; message: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05772","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":139,"code":"const error: ApiError = await response.json() as ApiError;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05773","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":143,"code":"return await response.json() as DataExportResponse;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05774","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":163,"code":"const error: ApiError = await response.json() as ApiError;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05775","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":167,"code":"return await response.json() as DataExportStatus;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05776","severity":"P2","category":"Type","file":"packages/core/src/services/AccountService.ts","line":187,"code":"const error: ApiError = await response.json() as ApiError;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05777","severity":"P2","category":"Type","file":"packages/core/src/services/ErrorHandler.ts","line":478,"code":"message: 'The requested resource was not found.',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05778","severity":"P2","category":"Type","file":"packages/core/src/services/ErrorHandler.ts","line":554,"code":"return 'Your session has expired. Please log in again.';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05779","severity":"P2","category":"Type","file":"packages/core/src/services/ErrorHandler.ts","line":556,"code":"return 'Your account has been locked. Please contact support.';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05780","severity":"P2","category":"Type","file":"packages/core/src/services/ErrorHandler.ts","line":573,"code":"return 'Payment was declined. Please contact your bank or use a different card.';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05781","severity":"P2","category":"Type","file":"packages/core/src/services/Logger.ts","line":298,"code":"code: 'code' in error ? (error as { code: string | number }).code : undefined,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05782","severity":"P3","category":"Type","file":"packages/core/src/services/Logger.ts","line":438,"code":"console.log('File log:', this.formatJsonMessage(entry));","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"core"}
{"id":"AUD-TYP-05783","severity":"P2","category":"Type","file":"packages/core/src/services/ai/gemini-client.ts","line":62,"code":"const candidate = candidates[0] as NonNullable<typeof candidates[0]>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05784","severity":"P2","category":"Type","file":"packages/core/src/services/ai/gemini-client.ts","line":103,"code":"const candidate = candidates[0] as NonNullable<typeof candidates[0]>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05785","severity":"P2","category":"Type","file":"packages/core/src/services/ai/gemini-client.ts","line":122,"code":"return Buffer.from(response.data as ArrayBuffer).toString('base64');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05786","severity":"P2","category":"Type","file":"packages/core/src/services/ai/photo-analyzer.ts","line":103,"code":"prompt += 'Format response as JSON with this structure:\\n';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05787","severity":"P2","category":"Type","file":"packages/core/src/services/ai/photo-analyzer.ts","line":127,"code":"const parsed = JSON.parse(jsonMatch[0]) as RawPhotoAnalysisResponse;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05788","severity":"P2","category":"Type","file":"packages/core/src/services/ai/photo-analyzer.ts","line":129,"code":"quality: (typeof parsed['quality'] === 'string' && parsed['quality'].length > 0) ? parsed['quality'] as PhotoAnalysisResult['quality'] : 'good',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05789","severity":"P2","category":"Type","file":"packages/core/src/services/ai/photo-analyzer.ts","line":131,"code":"suggestions: Array.isArray(parsed['suggestions']) ? parsed['suggestions'] as string[] : [],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05790","severity":"P2","category":"Type","file":"packages/core/src/services/ai/photo-analyzer.ts","line":133,"code":"lighting: (typeof parsed['lighting'] === 'string' && parsed['lighting'].length > 0) ? parsed['lighting'] as PhotoAnalysisResult['detectedFeatures']['lighting'] : 'good',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05791","severity":"P2","category":"Type","file":"packages/core/src/services/ai/photo-analyzer.ts","line":134,"code":"framing: (typeof parsed['framing'] === 'string' && parsed['framing'].length > 0) ? parsed['framing'] as PhotoAnalysisResult['detectedFeatures']['framing'] : 'good',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05792","severity":"P2","category":"Type","file":"packages/core/src/services/ai/photo-analyzer.ts","line":135,"code":"clarity: (typeof parsed['clarity'] === 'string' && parsed['clarity'].length > 0) ? parsed['clarity'] as PhotoAnalysisResult['detectedFeatures']['clarity'] : 'good',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05793","severity":"P2","category":"Type","file":"packages/core/src/services/ai/photo-analyzer.ts","line":136,"code":"background: (typeof parsed['background'] === 'string' && parsed['background'].length > 0) ? parsed['background'] as PhotoAnalysisResult['detectedFeatures']['background'] : 'clean',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05794","severity":"P2","category":"Type","file":"packages/core/src/services/ai/photo-analyzer.ts","line":138,"code":"emotions: Array.isArray(parsed['emotions']) ? parsed['emotions'] as string[] : [],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05795","severity":"P2","category":"Type","file":"packages/core/src/services/ai/photo-analyzer.ts","line":139,"code":"bestFor: (typeof parsed['bestFor'] === 'string' && parsed['bestFor'].length > 0) ? parsed['bestFor'] as PhotoAnalysisResult['bestFor'] : 'gallery',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05796","severity":"P2","category":"Type","file":"packages/core/src/services/animationConfig.ts","line":86,"code":"const parsed = JSON.parse(stored) as Partial<AnimationConfig>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05797","severity":"P2","category":"Type","file":"packages/core/src/stores/useAnalyticsStore.ts","line":46,"code":"} as AnalyticsData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05798","severity":"P2","category":"Type","file":"packages/core/src/stores/useAnalyticsStore.ts","line":75,"code":"} as AnalyticsData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05799","severity":"P2","category":"Type","file":"packages/core/src/stores/useAnalyticsStore.ts","line":110,"code":"} as AnalyticsData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05800","severity":"P2","category":"Type","file":"packages/core/src/stores/useAuthStore.ts","line":33,"code":"user: null as User | null,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05801","severity":"P2","category":"Type","file":"packages/core/src/stores/useAuthStore.ts","line":34,"code":"accessToken: null as string | null,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05802","severity":"P2","category":"Type","file":"packages/core/src/stores/useAuthStore.ts","line":35,"code":"refreshToken: null as string | null,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05803","severity":"P2","category":"Type","file":"packages/core/src/stores/useAuthStore.ts","line":36,"code":"isLoading: false as boolean,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05804","severity":"P2","category":"Type","file":"packages/core/src/stores/useAuthStore.ts","line":37,"code":"error: null as string | null,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05805","severity":"P2","category":"Type","file":"packages/core/src/stores/useAuthStore.ts","line":38,"code":"isAuthenticated: false as boolean,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05806","severity":"P2","category":"Type","file":"packages/core/src/stores/useAuthStore.ts","line":39,"code":"isOnboarded: false as boolean,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05807","severity":"P2","category":"Type","file":"packages/core/src/stores/useMatchStore.ts","line":51,"code":"currentPet: null as string | null,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05808","severity":"P2","category":"Type","file":"packages/core/src/stores/useMatchStore.ts","line":52,"code":"swipePets: [] as Pet[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05809","severity":"P2","category":"Type","file":"packages/core/src/stores/useMatchStore.ts","line":53,"code":"matches: [] as Match[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05810","severity":"P2","category":"Type","file":"packages/core/src/stores/useMatchStore.ts","line":54,"code":"activeMatchId: null as string | null,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05811","severity":"P2","category":"Type","file":"packages/core/src/stores/useMatchStore.ts","line":56,"code":"page: 1 as number,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05812","severity":"P2","category":"Type","file":"packages/core/src/stores/useMatchStore.ts","line":57,"code":"hasMore: true as boolean,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05813","severity":"P2","category":"Type","file":"packages/core/src/stores/useMatchStore.ts","line":58,"code":"isLoading: false as boolean,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05814","severity":"P2","category":"Type","file":"packages/core/src/stores/useMatchStore.ts","line":61,"code":"likes: [] as string[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05815","severity":"P2","category":"Type","file":"packages/core/src/stores/useMatchStore.ts","line":62,"code":"passes: [] as string[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05816","severity":"P2","category":"Type","file":"packages/core/src/stores/useMatchStore.ts","line":63,"code":"superlikes: [] as string[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05817","severity":"P2","category":"Type","file":"packages/core/src/stores/useUIStore.ts","line":50,"code":"toasts: [] as Toast[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05818","severity":"P2","category":"Type","file":"packages/core/src/stores/useUIStore.ts","line":51,"code":"modal: { type: null as ModalType | null },","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05819","severity":"P2","category":"Type","file":"packages/core/src/stores/useUIStore.ts","line":52,"code":"darkMode: false as boolean,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05820","severity":"P2","category":"Type","file":"packages/core/src/stores/useUIStore.ts","line":53,"code":"isPageLoading: false as boolean,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05821","severity":"P2","category":"Type","file":"packages/core/src/stores/useUIStore.ts","line":54,"code":"loadingStates: {} as Record<string, boolean>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05822","severity":"P2","category":"Type","file":"packages/core/src/stores/useWeatherStore.ts","line":53,"code":"data: null as WeatherData | null,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05823","severity":"P2","category":"Type","file":"packages/core/src/stores/useWeatherStore.ts","line":54,"code":"isLoading: false as boolean,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05824","severity":"P2","category":"Type","file":"packages/core/src/stores/useWeatherStore.ts","line":55,"code":"error: null as string | null,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05825","severity":"P2","category":"Type","file":"packages/core/src/stores/useWeatherStore.ts","line":57,"code":"latitude: null as number | null,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05826","severity":"P2","category":"Type","file":"packages/core/src/stores/useWeatherStore.ts","line":58,"code":"longitude: null as number | null,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05827","severity":"P2","category":"Type","file":"packages/core/src/types/api-responses.ts","line":67,"code":"// Same structure as create, server returns full pet object","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05828","severity":"P2","category":"Type","file":"packages/core/src/types/api-responses.ts","line":187,"code":"// Same structure as profile response","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05829","severity":"P2","category":"Type","file":"packages/core/src/types/api-responses.ts","line":536,"code":"(response as ApiSuccessResponse<T>).success","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05830","severity":"P2","category":"Type","file":"packages/core/src/types/index.ts","line":19,"code":"id: string; // Alias for _id","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05831","severity":"P2","category":"Type","file":"packages/core/src/types/index.ts","line":120,"code":"id: string; // Alias for _id for consistency","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05832","severity":"P2","category":"Type","file":"packages/core/src/utils/chatUtils.ts","line":13,"code":"} as User;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05833","severity":"P2","category":"Type","file":"packages/core/src/utils/chatUtils.ts","line":29,"code":"} as Pet;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05834","severity":"P2","category":"Type","file":"packages/core/src/utils/chatUtils.ts","line":45,"code":"} as Pet;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05835","severity":"P2","category":"Type","file":"packages/core/src/utils/env.ts","line":134,"code":"/** Check if device has pointer:fine (mouse/trackpad) */","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05836","severity":"P2","category":"Type","file":"packages/core/src/utils/env.ts","line":140,"code":"/** Check if device has touch support */","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05837","severity":"P2","category":"Type","file":"packages/core/src/utils/environment.ts","line":110,"code":"typeof (target as { addEventListener?: unknown }).addEventListener === 'function' &&","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05838","severity":"P2","category":"Type","file":"packages/core/src/utils/environment.ts","line":112,"code":"typeof (target as { removeEventListener?: unknown }).removeEventListener === 'function'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05839","severity":"P2","category":"Type","file":"packages/core/src/utils/logger.ts","line":152,"code":"const endpoint: string = this.config.serverEndpoint as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05840","severity":"P2","category":"Type","file":"packages/core/src/utils/storage.ts","line":145,"code":"const AsyncStorage = AsyncStorageModule.default as AsyncStorageType;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05841","severity":"P2","category":"Type","file":"packages/core/src/utils/storage.ts","line":166,"code":"const AsyncStorage = AsyncStorageModule.default as AsyncStorageType;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05842","severity":"P2","category":"Type","file":"packages/core/src/utils/storage.ts","line":185,"code":"const AsyncStorage = AsyncStorageModule.default as AsyncStorageType;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"core"}
{"id":"AUD-TYP-05843","severity":"P2","category":"Type","file":"server/src/config/redis.ts","line":74,"code":"logger.error('Failed to initialize Redis client', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05844","severity":"P2","category":"Type","file":"server/src/config/redis.ts","line":96,"code":"logger.error('Error closing Redis connection', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05845","severity":"P2","category":"Type","file":"server/src/config/redis.ts","line":122,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05846","severity":"P2","category":"Type","file":"server/src/config/redis.ts","line":141,"code":"logger.error('Redis set error', { key, error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05847","severity":"P2","category":"Type","file":"server/src/config/redis.ts","line":162,"code":"logger.error('Redis get error', { key, error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05848","severity":"P2","category":"Type","file":"server/src/config/redis.ts","line":177,"code":"logger.error('Redis delete error', { key, error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05849","severity":"P2","category":"Type","file":"server/src/config/redis.ts","line":202,"code":"logger.error('Redis set multiple error', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05850","severity":"P2","category":"Type","file":"server/src/config/redis.ts","line":223,"code":"logger.error('Redis get multiple error', { keys, error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05851","severity":"P2","category":"Type","file":"server/src/config/sentry.ts","line":5,"code":"import * as Sentry from '@sentry/node';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05852","severity":"P2","category":"Type","file":"server/src/config/sentry.ts","line":12,"code":"function initSentry(app?: any): void {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05853","severity":"P2","category":"Type","file":"server/src/config/sentry.ts","line":24,"code":"const integrations: any[] = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05854","severity":"P2","category":"Type","file":"server/src/config/sentry.ts","line":34,"code":"logger.warn('Some Sentry integrations unavailable:', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05855","severity":"P2","category":"Type","file":"server/src/config/sentry.ts","line":51,"code":"// Capture console logs as breadcrumbs","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05856","severity":"P2","category":"Type","file":"server/src/config/sentry.ts","line":52,"code":"beforeBreadcrumb: (breadcrumb: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05857","severity":"P2","category":"Type","file":"server/src/config/sentry.ts","line":63,"code":"beforeSend: (event: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05858","severity":"P2","category":"Type","file":"server/src/config/sentry.ts","line":160,"code":"function setExtra(key: string, value: any): void {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05859","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":154,"code":"// Check if user has a deletion request","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05860","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":189,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05861","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":231,"code":"location: user.location ? (user.location as Record<string, unknown>) : {},","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05862","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":232,"code":"preferences: user.preferences ? (user.preferences as Record<string, unknown>) : {},","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05863","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":250,"code":"exportData.pets = Array.isArray(fullUser?.pets) ? fullUser.pets.map((pet: any) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05864","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":271,"code":"exportData.matches = matches.map((match: any) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05865","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":278,"code":"name: (match.pet1 as any).name || '',","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05866","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":278,"code":"name: (match.pet1 as any).name || '',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05867","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":279,"code":"species: (match.pet1 as any).species || '',","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05868","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":279,"code":"species: (match.pet1 as any).species || '',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05869","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":284,"code":"name: (match.pet2 as any).name || '',","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05870","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":284,"code":"name: (match.pet2 as any).name || '',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05871","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":285,"code":"species: (match.pet2 as any).species || '',","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05872","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":285,"code":"species: (match.pet2 as any).species || '',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05873","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":306,"code":"const msg = m as Record<string, unknown>; // Access raw properties","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05874","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":311,"code":"createdAt: msg.sentAt as Date || new Date(),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05875","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":352,"code":"const record = obj as Record<string, unknown>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05876","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":390,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05877","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":416,"code":"// Check if deletion was requested and can be cancelled","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05878","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":439,"code":"user.deletionRequestedAt = null as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05879","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":439,"code":"user.deletionRequestedAt = null as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05880","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":440,"code":"user.deletionRequestId = null as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05881","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":440,"code":"user.deletionRequestId = null as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05882","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":447,"code":"message: 'Account deletion request has been cancelled successfully'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05883","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":455,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05884","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":456,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05885","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":456,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05886","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":467,"code":"res: Response<any>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05887","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":493,"code":"const isPasswordValid = await (user as any).comparePassword(password);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05888","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":493,"code":"const isPasswordValid = await (user as any).comparePassword(password);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05889","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":528,"code":"user.deletionReason = reason || null as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05890","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":528,"code":"user.deletionReason = reason || null as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05891","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":529,"code":"user.deletionFeedback = feedback || null as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05892","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":529,"code":"user.deletionFeedback = feedback || null as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05893","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":548,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05894","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":601,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05895","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":602,"code":"} as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05896","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":602,"code":"} as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05897","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":653,"code":"// Check if grace period has expired","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05898","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":684,"code":"conv.messages = conv.messages.filter((msg: any) => msg.senderId !== userId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05899","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":703,"code":"message: 'Account has been permanently deleted successfully'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05900","severity":"P2","category":"Type","file":"server/src/controllers/accountController.ts","line":711,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05901","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":56,"code":"const successCalls = apiEvents.filter((e: any) => e.success).length;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05902","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":62,"code":".map((e: any) => e.durationMs)","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05903","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":63,"code":".filter((d: number | undefined) => d !== undefined && !isNaN(d)) as number[];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05904","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":71,"code":".filter((e: any) => !e.success && e.errorCode)","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05905","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":72,"code":".reduce((acc: any, e: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05906","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":84,"code":"count: count as number,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05907","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":85,"code":"percentage: ((count as number) / errorCalls) * 100","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05908","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":91,"code":"const endpointCounts = apiEvents.reduce((acc: any, e: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05909","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":106,"code":".map((e: any) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05910","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":134,"code":"const recentEvents = apiEvents.filter((e: any) => new Date(e.createdAt) >= oneHourAgo);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05911","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":164,"code":"await logAdminActivity(req as any, 'VIEW_API_STATS', { statsRequested: true }, true);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05912","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":164,"code":"await logAdminActivity(req as any, 'VIEW_API_STATS', { statsRequested: true }, true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05913","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":186,"code":"const { method, status, search } = req.query as GetAPIEndpointsQuery;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05914","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":202,"code":"apiEvents.forEach((event: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05915","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":273,"code":"await logAdminActivity(req as any, 'VIEW_API_ENDPOINTS', { filters: { method, status, search } }, true);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05916","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":273,"code":"await logAdminActivity(req as any, 'VIEW_API_ENDPOINTS', { filters: { method, status, search } }, true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05917","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":297,"code":"const { testCase } = req.body as TestAPIEndpointBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05918","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":351,"code":"await logAdminActivity(req as any, 'TEST_API_ENDPOINT', { endpointId, testCase, duration, success: true }, true);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05919","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":351,"code":"await logAdminActivity(req as any, 'TEST_API_ENDPOINT', { endpointId, testCase, duration, success: true }, true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05920","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":378,"code":"await logAdminActivity(req as any, 'TEST_API_ENDPOINT', { endpointId, testCase, duration, success: false }, false, getErrorMessage(error));","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05921","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":378,"code":"await logAdminActivity(req as any, 'TEST_API_ENDPOINT', { endpointId, testCase, duration, success: false }, false, getErrorMessage(error));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05922","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":407,"code":"const updates = req.body as UpdateAPIEndpointBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05923","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":411,"code":"await logAdminActivity(req as any, 'UPDATE_API_ENDPOINT', { endpointId, updates }, true);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05924","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminAPIController.ts","line":411,"code":"await logAdminActivity(req as any, 'UPDATE_API_ENDPOINT', { endpointId, updates }, true);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05925","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":47,"code":"const page = parseInt(req.query.page as string) || 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05926","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":48,"code":"const limit = parseInt(req.query.limit as string) || 20;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05927","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":51,"code":"const filter: any = {};","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05928","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":74,"code":"chats.map(async (chat: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05929","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":131,"code":"const chatData: any = chat;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05930","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":176,"code":"const chatData: any = chat;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05931","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":193,"code":"(m: any) => String(m._id) === req.params.messageId","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05932","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":206,"code":"// Soft delete the message by marking it as deleted","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05933","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":208,"code":"(message as any).isDeleted = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05934","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":208,"code":"(message as any).isDeleted = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05935","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":209,"code":"(message as any).deletedAt = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05936","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":209,"code":"(message as any).deletedAt = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05937","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":210,"code":"(message as any).deletedBy = req.userId;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05938","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":210,"code":"(message as any).deletedBy = req.userId;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05939","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":211,"code":"(message as any).deletionReason = body.reason;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05940","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":211,"code":"(message as any).deletionReason = body.reason;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05941","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":224,"code":"senderId: (message as any).sender","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05942","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":224,"code":"senderId: (message as any).sender","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05943","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":268,"code":"const blockData: any = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05944","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminChatController.ts","line":335,"code":"const unblockData: any = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05945","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":60,"code":".map((v: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05946","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":119,"code":"const countryDistribution = countryStats.map((stat: any) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05947","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":131,"code":"allVerifications.forEach((v: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05948","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":132,"code":"v.documents.forEach((doc: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05949","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":188,"code":"const { status, type, priority, country, search, page = '1', limit = '20' } = req.query as GetKYCVerificationsQuery;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05950","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":195,"code":"const filter: any = {};","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05951","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":213,"code":"const transformedVerifications = verifications.map((v: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05952","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":233,"code":"const documents = (v.documents || []).map((doc: any) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05953","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":315,"code":"const { status, notes, reviewedBy } = req.body as ReviewKYCVerificationBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05954","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":330,"code":"verification.reviewedBy = req.userId as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05955","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":330,"code":"verification.reviewedBy = req.userId as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05956","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":333,"code":"verification.approvedBy = req.userId as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05957","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":333,"code":"verification.approvedBy = req.userId as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05958","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":343,"code":"verification.rejectedBy = req.userId as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05959","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":343,"code":"verification.rejectedBy = req.userId as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05960","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":387,"code":"const { documentTypes, message } = req.body as RequestAdditionalDocumentsBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05961","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":413,"code":"if (!(verification.metadata as any).requestedDocuments) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05962","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":413,"code":"if (!(verification.metadata as any).requestedDocuments) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05963","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":414,"code":"(verification.metadata as any).requestedDocuments = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05964","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":414,"code":"(verification.metadata as any).requestedDocuments = [];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05965","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":417,"code":"(verification.metadata as any).requestedDocuments.push(...requestedDocs);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05966","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminKYCController.ts","line":417,"code":"(verification.metadata as any).requestedDocuments.push(...requestedDocs);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05967","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminUserController.ts","line":56,"code":"const page = parseInt(req.query.page as string) || 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05968","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminUserController.ts","line":57,"code":"const limit = parseInt(req.query.limit as string) || 20;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05969","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminUserController.ts","line":60,"code":"const filter: any = {};","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05970","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminUserController.ts","line":221,"code":"const suspensionData: any = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05971","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminUserController.ts","line":295,"code":"const banData: any = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05972","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminUserController.ts","line":357,"code":"const activationData: any = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05973","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminUserController.ts","line":434,"code":"const roleUpdateData: any = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05974","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminUserController.ts","line":483,"code":"const page = parseInt(req.query.page as string) || 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05975","severity":"P2","category":"Type","file":"server/src/controllers/admin/AdminUserController.ts","line":484,"code":"const limit = parseInt(req.query.limit as string) || 50;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05976","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":23,"code":"const { filter = 'all', search = '', page = 1, limit = 50 } = req.query as {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05977","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":35,"code":"const query: any = { status: 'active' };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05978","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":54,"code":"const messages: any[] = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05979","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":58,"code":"for (const msg of match.messages as any[]) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05980","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":58,"code":"for (const msg of match.messages as any[]) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05981","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":67,"code":"senderName = `${(match.user1 as any).firstName} ${(match.user1 as any).lastName}`;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05982","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":67,"code":"senderName = `${(match.user1 as any).firstName} ${(match.user1 as any).lastName}`;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05983","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":70,"code":"receiverName = `${(match.user2 as any).firstName} ${(match.user2 as any).lastName}`;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05984","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":70,"code":"receiverName = `${(match.user2 as any).firstName} ${(match.user2 as any).lastName}`;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05985","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":139,"code":"const { action } = req.body as { action: 'approve' | 'remove' | 'warn' };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05986","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":169,"code":"const message = match.messages?.find((msg: any) => msg._id.toString() === messageId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05987","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":184,"code":"// Mark as reviewed, no deletion","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05988","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":197,"code":"// Mark as reviewed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05989","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":198,"code":"(message as any).reviewed = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05990","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":198,"code":"(message as any).reviewed = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05991","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":199,"code":"(message as any).reviewedBy = req.userId;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05992","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":199,"code":"(message as any).reviewedBy = req.userId;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05993","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":200,"code":"(message as any).reviewedAt = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05994","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":200,"code":"(message as any).reviewedAt = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05995","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":203,"code":"if (!(message as any).metadata) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05996","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":203,"code":"if (!(message as any).metadata) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05997","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":204,"code":"(message as any).metadata = {};","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-05998","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":204,"code":"(message as any).metadata = {};","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-05999","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":206,"code":"(message as any).metadata.moderationAction = updatedAction;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06000","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":206,"code":"(message as any).metadata.moderationAction = updatedAction;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06001","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":207,"code":"(message as any).metadata.moderationTimestamp = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06002","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":207,"code":"(message as any).metadata.moderationTimestamp = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06003","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":239,"code":"const { period = '24h' } = req.query as { period?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06004","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":271,"code":"for (const msg of match.messages as any[]) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06005","severity":"P2","category":"Type","file":"server/src/controllers/admin/chatModerationController.ts","line":271,"code":"for (const msg of match.messages as any[]) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06006","severity":"P2","category":"Type","file":"server/src/controllers/admin/securityController.ts","line":97,"code":"const { ipAddress, reason, duration } = req.body as {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06007","severity":"P2","category":"Type","file":"server/src/controllers/admin/securityController.ts","line":116,"code":"description: `IP address ${ipAddress} has been blocked: ${reason}`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06008","severity":"P2","category":"Type","file":"server/src/controllers/admin/securityController.ts","line":134,"code":"message: `IP address ${ipAddress} has been blocked`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06009","severity":"P2","category":"Type","file":"server/src/controllers/admin/securityController.ts","line":209,"code":"id: req.userId as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06010","severity":"P2","category":"Type","file":"server/src/controllers/admin/securityController.ts","line":209,"code":"id: req.userId as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06011","severity":"P2","category":"Type","file":"server/src/controllers/admin/securityController.ts","line":220,"code":"message: `IP address ${ip} has been unblocked`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06012","severity":"P2","category":"Type","file":"server/src/controllers/admin/servicesController.ts","line":151,"code":"const { service, enabled } = req.body as { service: string; enabled: boolean };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06013","severity":"P2","category":"Type","file":"server/src/controllers/admin/subscriptionController.ts","line":22,"code":"const { reason } = req.body as { reason?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06014","severity":"P2","category":"Type","file":"server/src/controllers/admin/subscriptionController.ts","line":32,"code":"message: `Subscription ${id} has been canceled`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06015","severity":"P2","category":"Type","file":"server/src/controllers/admin/subscriptionController.ts","line":64,"code":"message: `Subscription ${id} has been reactivated`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06016","severity":"P2","category":"Type","file":"server/src/controllers/admin/subscriptionController.ts","line":87,"code":"const updateData = req.body as Record<string, unknown>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06017","severity":"P2","category":"Type","file":"server/src/controllers/admin/subscriptionController.ts","line":96,"code":"message: `Subscription ${id} has been updated`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06018","severity":"P2","category":"Type","file":"server/src/controllers/admin/uploadModerationController.ts","line":23,"code":"const { filter = 'all', search = '', page = 1, limit = 50 } = req.query as {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06019","severity":"P2","category":"Type","file":"server/src/controllers/admin/uploadModerationController.ts","line":35,"code":"const query: any = {};","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06020","severity":"P2","category":"Type","file":"server/src/controllers/admin/uploadModerationController.ts","line":60,"code":"const formattedUploads = uploads.map((upload: any) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06021","severity":"P2","category":"Type","file":"server/src/controllers/admin/uploadModerationController.ts","line":111,"code":"const { action, reason } = req.body as { action: 'approve' | 'reject'; reason?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06022","severity":"P2","category":"Type","file":"server/src/controllers/admin/uploadModerationController.ts","line":134,"code":"upload.reviewedBy = req.userId as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06023","severity":"P2","category":"Type","file":"server/src/controllers/admin/uploadModerationController.ts","line":134,"code":"upload.reviewedBy = req.userId as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06024","severity":"P2","category":"Type","file":"server/src/controllers/admin/uploadModerationController.ts","line":137,"code":"(upload as any).rejectionReason = reason;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06025","severity":"P2","category":"Type","file":"server/src/controllers/admin/uploadModerationController.ts","line":137,"code":"(upload as any).rejectionReason = reason;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06026","severity":"P2","category":"Type","file":"server/src/controllers/admin/uploadModerationController.ts","line":170,"code":"const { period = '24h' } = req.query as { period?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06027","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":17,"code":"aggregate?: (pipeline: any[]) => Promise<any[]>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06028","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":131,"code":"const startDate = getStartDate(timeRange as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06029","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":153,"code":"getTimeSeries(startDate, timeRange as string),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06030","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":395,"code":"const getTimeSeries = async (startDate: Date, timeRange: string): Promise<Array<any>> => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06031","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":397,"code":"const timeSeries: Array<any> = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06032","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":497,"code":"] as Array<{ device: string; percentage: number }>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06033","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":542,"code":"const startDate = getStartDate(timeRange as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06034","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":618,"code":"const users = data.users as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06035","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":618,"code":"const users = data.users as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06036","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":628,"code":"const pets = data.pets as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06037","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":628,"code":"const pets = data.pets as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06038","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":635,"code":"const matches = data.matches as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06039","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":635,"code":"const matches = data.matches as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06040","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":643,"code":"const messages = data.messages as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06041","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":643,"code":"const messages = data.messages as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06042","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":650,"code":"const engagement = data.engagement as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06043","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":650,"code":"const engagement = data.engagement as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06044","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":659,"code":"const revenue = data.revenue as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06045","severity":"P2","category":"Type","file":"server/src/controllers/adminAnalyticsController.ts","line":659,"code":"const revenue = data.revenue as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06046","severity":"P2","category":"Type","file":"server/src/controllers/adminController.ts","line":6,"code":"import * as AdminUserController from './admin/AdminUserController';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06047","severity":"P2","category":"Type","file":"server/src/controllers/adminController.ts","line":7,"code":"import * as AdminChatController from './admin/AdminChatController';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06048","severity":"P2","category":"Type","file":"server/src/controllers/adminController.ts","line":8,"code":"import * as AdminAPIController from './admin/AdminAPIController';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06049","severity":"P2","category":"Type","file":"server/src/controllers/adminController.ts","line":9,"code":"import * as AdminKYCController from './admin/AdminKYCController';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06050","severity":"P2","category":"Type","file":"server/src/controllers/adminEnhancedFeaturesController.ts","line":478,"code":"// Check if user has notifications enabled","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06051","severity":"P2","category":"Type","file":"server/src/controllers/adminEnhancedFeaturesController.ts","line":483,"code":"message: 'User has notifications disabled'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06052","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":8,"code":"import * as mongoose from 'mongoose';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06053","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":50,"code":"// Check if user has already applied","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06054","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":69,"code":"logger.error('Failed to get pet details', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06055","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":73,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06056","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":139,"code":"logger.error('Failed to submit application', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06057","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":143,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06058","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":157,"code":"const query: any = { applicantId };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06059","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":162,"code":"const pageNum = parseInt(page as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06060","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":163,"code":"const limitNum = parseInt(limit as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06061","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":188,"code":"logger.error('Failed to get user applications', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06062","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":192,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06063","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":226,"code":"logger.error('Failed to get pet applications', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06064","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":230,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06065","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":257,"code":"const pet = application.petId as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06066","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":257,"code":"const pet = application.petId as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06067","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":267,"code":"application.status = status as 'pending' | 'approved' | 'rejected' | 'withdrawn';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06068","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":276,"code":"// If approved, mark pet as adopted","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06069","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":292,"code":"logger.error('Failed to update application status', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06070","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":296,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06071","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":334,"code":"logger.error('Failed to get adoption stats', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06072","severity":"P2","category":"Type","file":"server/src/controllers/adoptionController.ts","line":338,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06073","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":82,"code":"logger.error('OpenAI moderation failed', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06074","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":123,"code":"logger.error('DeepSeek moderation failed', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06075","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":193,"code":"errors.push(`${provider}: ${(error as Error).message}`);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06076","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":221,"code":"contentId: text.substring(0, 50), // Use first 50 chars as ID","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06077","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":238,"code":"logger.error('Text analysis failed', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06078","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":242,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06079","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":292,"code":"logger.error('Image analysis failed', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06080","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":296,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06081","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":324,"code":"logger.error('Failed to get moderation stats', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06082","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":328,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06083","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":365,"code":"(service as { available: boolean; status: string }).available && (service as { available: boolean; status: string }).status === 'healthy'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06084","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":377,"code":"logger.error('Health check failed', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06085","severity":"P2","category":"Type","file":"server/src/controllers/aiModerationController.ts","line":381,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06086","severity":"P2","category":"Type","file":"server/src/controllers/analyticsController.ts","line":185,"code":"const analyticsWithString = analytics as { lastActive: Date | string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06087","severity":"P2","category":"Type","file":"server/src/controllers/analyticsController.ts","line":212,"code":"const analyticsWithString = analytics as { lastViewed: Date | string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06088","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":7,"code":"import * as crypto from 'crypto';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06089","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":8,"code":"import * as speakeasy from 'speakeasy';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06090","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":9,"code":"import * as QRCode from 'qrcode';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06091","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":108,"code":"const { method, phone, email } = req.body as Setup2FASmsEmailBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06092","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":188,"code":"const { code } = req.body as Verify2FASmsEmailBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06093","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":313,"code":"const { biometricData, deviceId } = req.body as BiometricLoginBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06094","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":386,"code":"} = req.body as RegisterBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06095","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":468,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06096","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":478,"code":"const { email, password } = req.body as LoginBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06097","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":556,"code":"const { refreshToken } = req.body as LogoutBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06098","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":587,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06099","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":623,"code":"const { token } = req.body as VerifyEmailBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06100","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":662,"code":"const { email } = req.body as ForgotPasswordBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06101","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":705,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06102","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":715,"code":"const { token, password } = req.body as ResetPasswordBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06103","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":789,"code":"backupCodes: (secret as { backup_codes?: string[] }).backup_codes || []","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06104","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":806,"code":"const { code } = req.body as Verify2FABody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06105","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":861,"code":"const { code } = req.body as Validate2FABody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06106","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":862,"code":"const { userId } = req.body as { userId: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06107","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":957,"code":"const { publicKey, deviceId, deviceName } = req.body as SetupBiometricBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06108","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":1023,"code":"const { deviceId } = req.body as DisableBiometricBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06109","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":1060,"code":"const { refreshToken, deviceId } = req.body as RefreshBiometricTokenBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06110","severity":"P2","category":"Type","file":"server/src/controllers/authController.ts","line":1112,"code":"const { code } = req.body as Disable2FABody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06111","severity":"P2","category":"Type","file":"server/src/controllers/biometricController.ts","line":98,"code":"// Check if user already has biometric credentials","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06112","severity":"P2","category":"Type","file":"server/src/controllers/biometricController.ts","line":226,"code":"transports: (credential.response?.transports as string[]) || []","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06113","severity":"P2","category":"Type","file":"server/src/controllers/biometricController.ts","line":291,"code":"// Check if user has biometric credentials","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06114","severity":"P2","category":"Type","file":"server/src/controllers/biometricController.ts","line":359,"code":"if (!biometricCredential || !(biometricCredential as { currentChallenge?: string }).currentChallenge) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06115","severity":"P2","category":"Type","file":"server/src/controllers/biometricController.ts","line":367,"code":"const user = biometricCredential.userId as { isActive: boolean };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06116","severity":"P2","category":"Type","file":"server/src/controllers/biometricController.ts","line":386,"code":"const expectedChallenge = (biometricCredential as { currentChallenge?: string }).currentChallenge;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06117","severity":"P2","category":"Type","file":"server/src/controllers/biometricController.ts","line":395,"code":"} as Parameters<typeof verifyAuthenticationResponse>[0]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06118","severity":"P2","category":"Type","file":"server/src/controllers/biometricController.ts","line":409,"code":"(biometricCredential as { lastUsed?: Date }).lastUsed = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06119","severity":"P2","category":"Type","file":"server/src/controllers/biometricController.ts","line":410,"code":"(biometricCredential as { currentChallenge?: string | null }).currentChallenge = null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06120","severity":"P2","category":"Type","file":"server/src/controllers/biometricController.ts","line":416,"code":"process.env.JWT_SECRET as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06121","severity":"P2","category":"Type","file":"server/src/controllers/biometricController.ts","line":422,"code":"process.env.JWT_SECRET as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06122","severity":"P1","category":"Type","file":"server/src/controllers/chatController.ts","line":135,"code":".then((doc: { messages: Array<{ sentAt: Date; [key: string]: unknown }> } | null) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-06123","severity":"P2","category":"Type","file":"server/src/controllers/chatController.ts","line":454,"code":"// Mark as deleted instead of removing","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06124","severity":"P2","category":"Type","file":"server/src/controllers/chatController.ts","line":457,"code":"message.content = 'This message was deleted';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06125","severity":"P2","category":"Type","file":"server/src/controllers/conversationController.ts","line":186,"code":"return fail(res, 500, 'Failed to mark messages as read');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06126","severity":"P2","category":"Type","file":"server/src/controllers/favoritesController.ts","line":119,"code":"logger.error('Error adding favorite', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06127","severity":"P2","category":"Type","file":"server/src/controllers/favoritesController.ts","line":169,"code":"logger.error('Error removing favorite', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06128","severity":"P2","category":"Type","file":"server/src/controllers/favoritesController.ts","line":212,"code":"logger.error('Error fetching favorites', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06129","severity":"P2","category":"Type","file":"server/src/controllers/favoritesController.ts","line":245,"code":"logger.error('Error checking favorite', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06130","severity":"P2","category":"Type","file":"server/src/controllers/favoritesController.ts","line":277,"code":"logger.error('Error getting favorite count', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06131","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":20,"code":"logger.warn?.('Message model unavailable for engagement leaderboard', { error: (error as Error)?.message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06132","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":140,"code":"if ((req as AuthRequest).userId) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06133","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":141,"code":"const userRank = await getUserRankInCategory((req as AuthRequest).userId!, category, timeframe);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06134","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":142,"code":"const userScore = await getUserScoreInCategory((req as AuthRequest).userId!, category, timeframe);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06135","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":154,"code":"logger.error('Get leaderboard error', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06136","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":169,"code":"const userId = (req as AuthRequest).userId!;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06137","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":225,"code":"logger.error('Get user rank error', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06138","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":270,"code":"logger.error('Update score error', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06139","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":500,"code":"logger.error('Get leaderboard entries error', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06140","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":510,"code":"logger.error('Get total entries error', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06141","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":532,"code":"logger.error('Get user rank error', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06142","severity":"P2","category":"Type","file":"server/src/controllers/leaderboardController.ts","line":542,"code":"logger.error('Get user score error', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06143","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":253,"code":"// Check if the pet's owner has liked this user back","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06144","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":270,"code":"status: 'active' as 'active' | 'pending' | 'expired' | 'blocked'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06145","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":490,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06146","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":532,"code":"// Mark messages as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06147","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":545,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06148","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":603,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06149","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":681,"code":"template: 'emailVerification' as 'newMessage' | 'emailVerification', // 'newMessage' template not yet implemented","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06150","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":705,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06151","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":751,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06152","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":796,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06153","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":842,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06154","severity":"P2","category":"Type","file":"server/src/controllers/matchController.ts","line":899,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06155","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":43,"code":"// Find the match and verify user has access","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06156","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":54,"code":"const matchUser1 = (match as { user1?: { toString(): string } }).user1?.toString();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06157","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":55,"code":"const matchUser2 = (match as { user2?: { toString(): string } }).user2?.toString();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06158","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":78,"code":"logger.warn?.('Message model unavailable', { error: (error as Error)?.message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06159","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":87,"code":"if (convo && Array.isArray((convo as { messages?: unknown[] }).messages)) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06160","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":89,"code":"messages = ((convo as { messages?: unknown[] }).messages || [])","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06161","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":91,"code":".sort((a: unknown, b: unknown) => new Date((a as { sentAt?: Date; createdAt?: Date }).sentAt || (a as { sentAt?: Date; createdAt?: Date }).createdAt).getTime() - new Date((b as { sentAt?: Date; createdAt?: Date }).sentAt || (b as { sentAt?: Date; createdAt?: Date }).createdAt).getTime())","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06162","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":94,"code":"const msg = m as { _id?: string; content?: string; sentAt?: Date; createdAt?: Date; sender?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06163","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":172,"code":"content: `Started a conversation with ${(match as { pet1?: { name?: string } }).pet1?.name || 'pet'} and ${(match as { pet2?: { name?: string } }).pet2?.name || 'pet'}`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06164","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":219,"code":"pet1: (match as { pet1?: { name?: string; species?: string } }).pet1 ? {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06165","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":220,"code":"name: (match as { pet1?: { name?: string; species?: string } }).pet1?.name,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06166","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":221,"code":"species: (match as { pet1?: { name?: string; species?: string } }).pet1?.species","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06167","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":223,"code":"pet2: (match as { pet2?: { name?: string; species?: string } }).pet2 ? {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06168","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":224,"code":"name: (match as { pet2?: { name?: string; species?: string } }).pet2?.name,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06169","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":225,"code":"species: (match as { pet2?: { name?: string; species?: string } }).pet2?.species","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06170","severity":"P2","category":"Type","file":"server/src/controllers/memoriesController.ts","line":235,"code":"error: (error as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06171","severity":"P2","category":"Type","file":"server/src/controllers/moderationAnalyticsController.ts","line":25,"code":"if (startDate) dateFilter.$gte = new Date(startDate as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06172","severity":"P2","category":"Type","file":"server/src/controllers/moderationAnalyticsController.ts","line":26,"code":"if (endDate) dateFilter.$lte = new Date(endDate as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06173","severity":"P2","category":"Type","file":"server/src/controllers/notificationController.ts","line":102,"code":"const preferencesData = req.body as NotificationPreferencesData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06174","severity":"P2","category":"Type","file":"server/src/controllers/notificationController.ts","line":254,"code":"const limitNum = parseInt(limit as string, 10);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06175","severity":"P2","category":"Type","file":"server/src/controllers/notificationController.ts","line":255,"code":"const offsetNum = parseInt(offset as string, 10);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06176","severity":"P2","category":"Type","file":"server/src/controllers/notificationController.ts","line":259,"code":"if (type) query.type = type as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06177","severity":"P2","category":"Type","file":"server/src/controllers/notificationController.ts","line":293,"code":"* Mark notification as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06178","severity":"P2","category":"Type","file":"server/src/controllers/notificationController.ts","line":323,"code":"logger.info('Notification marked as read', { userId, notificationId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06179","severity":"P2","category":"Type","file":"server/src/controllers/notificationController.ts","line":327,"code":"message: 'Notification marked as read',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06180","severity":"P2","category":"Type","file":"server/src/controllers/notificationController.ts","line":335,"code":"message: 'Failed to mark notification as read',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06181","severity":"P2","category":"Type","file":"server/src/controllers/petController.ts","line":226,"code":"// Location-based filtering (if user has location)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06182","severity":"P2","category":"Type","file":"server/src/controllers/petController.ts","line":369,"code":"// Update the reciprocal match as well","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06183","severity":"P2","category":"Type","file":"server/src/controllers/premiumController.ts","line":220,"code":"// Logic for boost count would be here (e.g., check if user has boosts left)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06184","severity":"P2","category":"Type","file":"server/src/controllers/premiumController.ts","line":448,"code":"plan: (cached.plan || 'basic') as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06185","severity":"P2","category":"Type","file":"server/src/controllers/premiumController.ts","line":465,"code":"// If user has Stripe customer ID, fetch from Stripe API","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06186","severity":"P2","category":"Type","file":"server/src/controllers/premiumController.ts","line":478,"code":"const plan = active ? ((active.items.data[0]?.price.nickname?.toLowerCase() as string) || 'pro') : 'free';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06187","severity":"P2","category":"Type","file":"server/src/controllers/premiumController.ts","line":479,"code":"const renewsAt = active ? new Date((active.current_period_end as number) * 1000) : null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06188","severity":"P2","category":"Type","file":"server/src/controllers/premiumController.ts","line":483,"code":"plan: (active ? (plan === 'elite' ? 'elite' : 'pro') : 'free') as 'free' | 'pro' | 'elite',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06189","severity":"P2","category":"Type","file":"server/src/controllers/premiumController.ts","line":500,"code":"logger.warn('Failed to fetch from Stripe, using database', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06190","severity":"P2","category":"Type","file":"server/src/controllers/premiumController.ts","line":566,"code":"const hasFeature = Boolean(premium?.features && (premium.features as Record<string, unknown>)[feature]);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06191","severity":"P2","category":"Type","file":"server/src/controllers/profileController.ts","line":238,"code":"data: (user as any).privacySettings || {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06192","severity":"P2","category":"Type","file":"server/src/controllers/profileController.ts","line":238,"code":"data: (user as any).privacySettings || {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06193","severity":"P2","category":"Type","file":"server/src/controllers/profileController.ts","line":282,"code":"data: (user as any)?.privacySettings,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06194","severity":"P2","category":"Type","file":"server/src/controllers/profileController.ts","line":282,"code":"data: (user as any)?.privacySettings,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06195","severity":"P2","category":"Type","file":"server/src/controllers/profileController.ts","line":366,"code":"const isPasswordValid = await (user as any).comparePassword(password);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06196","severity":"P2","category":"Type","file":"server/src/controllers/profileController.ts","line":366,"code":"const isPasswordValid = await (user as any).comparePassword(password);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06197","severity":"P2","category":"Type","file":"server/src/controllers/profileController.ts","line":375,"code":"// Soft delete: mark as inactive instead of hard delete","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06198","severity":"P2","category":"Type","file":"server/src/controllers/profileController.ts","line":376,"code":"(user as any).isActive = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06199","severity":"P2","category":"Type","file":"server/src/controllers/profileController.ts","line":376,"code":"(user as any).isActive = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06200","severity":"P2","category":"Type","file":"server/src/controllers/profileController.ts","line":377,"code":"(user as any).deletedAt = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06201","severity":"P2","category":"Type","file":"server/src/controllers/profileController.ts","line":377,"code":"(user as any).deletedAt = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06202","severity":"P2","category":"Type","file":"server/src/controllers/reelsController.ts","line":148,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06203","severity":"P2","category":"Type","file":"server/src/controllers/reelsController.ts","line":222,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06204","severity":"P2","category":"Type","file":"server/src/controllers/reelsController.ts","line":257,"code":"fail(res, 400, 'Reel has no clips');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06205","severity":"P2","category":"Type","file":"server/src/controllers/reelsController.ts","line":272,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06206","severity":"P2","category":"Type","file":"server/src/controllers/reelsController.ts","line":313,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06207","severity":"P2","category":"Type","file":"server/src/controllers/reelsController.ts","line":362,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06208","severity":"P2","category":"Type","file":"server/src/controllers/reelsController.ts","line":419,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06209","severity":"P2","category":"Type","file":"server/src/controllers/reelsController.ts","line":431,"code":"const limit = parseInt(req.query.limit as string, 10) || 20;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06210","severity":"P2","category":"Type","file":"server/src/controllers/reelsController.ts","line":432,"code":"const skip = parseInt(req.query.skip as string, 10) || 0;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06211","severity":"P2","category":"Type","file":"server/src/controllers/reelsController.ts","line":462,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06212","severity":"P2","category":"Type","file":"server/src/controllers/sessionController.ts","line":42,"code":"const ok = await (user as any).comparePassword(currentPassword);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06213","severity":"P2","category":"Type","file":"server/src/controllers/sessionController.ts","line":42,"code":"const ok = await (user as any).comparePassword(currentPassword);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06214","severity":"P2","category":"Type","file":"server/src/controllers/sessionController.ts","line":50,"code":"(user as any).tokensInvalidatedAt = new Date(); // any existing access tokens become invalid","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06215","severity":"P2","category":"Type","file":"server/src/controllers/sessionController.ts","line":50,"code":"(user as any).tokensInvalidatedAt = new Date(); // any existing access tokens become invalid","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06216","severity":"P2","category":"Type","file":"server/src/controllers/storiesController.ts","line":94,"code":"logger.warn?.('Analytics track failed', { eventType, error: (e as Error)?.message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06217","severity":"P2","category":"Type","file":"server/src/controllers/storiesController.ts","line":174,"code":"if (!req.files || !Array.isArray(req.files) || req.files.length === 0 || !(req.files[0] as { buffer: Buffer }).buffer) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06218","severity":"P2","category":"Type","file":"server/src/controllers/storiesController.ts","line":281,"code":"logger.error('Error creating story', { error: (error as Error)?.message, stack: (error as Error)?.stack });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06219","severity":"P2","category":"Type","file":"server/src/controllers/storiesController.ts","line":312,"code":"logger.error('Error fetching stories feed', { error: (error as Error)?.message, stack: (error as Error)?.stack });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06220","severity":"P2","category":"Type","file":"server/src/controllers/storiesController.ts","line":339,"code":"logger.error('Error fetching user stories', { error: (error as Error)?.message, stack: (error as Error)?.stack });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06221","severity":"P2","category":"Type","file":"server/src/controllers/storiesController.ts","line":345,"code":"* Mark story as viewed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06222","severity":"P2","category":"Type","file":"server/src/controllers/storiesController.ts","line":384,"code":"logger.error('Error viewing story', { error: (error as Error)?.message, stack: (error as Error)?.stack });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06223","severity":"P2","category":"Type","file":"server/src/controllers/storiesController.ts","line":432,"code":"(story.userId as { _id?: { toString: () => string } })._id?.toString() || story.userId.toString(),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06224","severity":"P2","category":"Type","file":"server/src/controllers/storiesController.ts","line":453,"code":"logger.error('Error replying to story', { error: (error as Error)?.message, stack: (error as Error)?.stack });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06225","severity":"P2","category":"Type","file":"server/src/controllers/storiesController.ts","line":502,"code":"logger.error('Error deleting story', { error: (error as Error)?.message, stack: (error as Error)?.stack });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06226","severity":"P2","category":"Type","file":"server/src/controllers/storiesController.ts","line":535,"code":"logger.error('Error fetching story views', { error: (error as Error)?.message, stack: (error as Error)?.stack });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06227","severity":"P2","category":"Type","file":"server/src/controllers/templatesController.ts","line":29,"code":"const theme = req.query.theme as string | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06228","severity":"P2","category":"Type","file":"server/src/controllers/templatesController.ts","line":52,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06229","severity":"P2","category":"Type","file":"server/src/controllers/templatesController.ts","line":84,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06230","severity":"P2","category":"Type","file":"server/src/controllers/tracksController.ts","line":29,"code":"const genre = req.query.genre as string | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06231","severity":"P2","category":"Type","file":"server/src/controllers/tracksController.ts","line":30,"code":"const mood = req.query.mood as string | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06232","severity":"P2","category":"Type","file":"server/src/controllers/tracksController.ts","line":56,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06233","severity":"P2","category":"Type","file":"server/src/controllers/tracksController.ts","line":79,"code":"fail(res, 403, 'Track license has expired');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06234","severity":"P2","category":"Type","file":"server/src/controllers/tracksController.ts","line":96,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06235","severity":"P2","category":"Type","file":"server/src/controllers/uploadSigningController.ts","line":72,"code":"const { filename, contentType, fileSize } = req.body as SignUploadBody;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06236","severity":"P2","category":"Type","file":"server/src/controllers/uploadSigningController.ts","line":112,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06237","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":186,"code":"const fieldValue = (user as Record<string, unknown>)[field];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06238","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":189,"code":"const location = fieldValue as { coordinates?: [number, number] };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06239","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":200,"code":"const pets = (user as Record<string, unknown>)['pets'];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06240","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":270,"code":"const scores = matches.map((m) => m.compatibilityScore).filter((score: number | undefined) => score != null) as number[];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06241","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":317,"code":"totalPets: (user as any).pets?.length || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06242","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":317,"code":"totalPets: (user as any).pets?.length || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06243","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":318,"code":"totalMatches: (user as any).matches?.length || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06244","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":318,"code":"totalMatches: (user as any).matches?.length || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06245","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":319,"code":"profileViews: (user as any).analytics?.profileViews || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06246","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":319,"code":"profileViews: (user as any).analytics?.profileViews || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06247","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":320,"code":"joinDate: (user as any).createdAt,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06248","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":320,"code":"joinDate: (user as any).createdAt,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06249","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":321,"code":"lastActive: (user as any).analytics?.lastActive,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06250","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":321,"code":"lastActive: (user as any).analytics?.lastActive,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06251","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":322,"code":"accountAge: Math.floor((Date.now() - new Date((user as any).createdAt).getTime()) / (1000 * 60 * 60 * 24))","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06252","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":322,"code":"accountAge: Math.floor((Date.now() - new Date((user as any).createdAt).getTime()) / (1000 * 60 * 60 * 24))","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06253","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":332,"code":"privacySettings: (user as any).privacySettings || {},","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06254","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":332,"code":"privacySettings: (user as any).privacySettings || {},","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06255","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":333,"code":"preferences: (user as any).preferences || {}","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06256","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":333,"code":"preferences: (user as any).preferences || {}","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06257","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":386,"code":"if (req.body[field as keyof typeof req.body] !== undefined) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06258","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":387,"code":"(updates as Record<string, unknown>)[field] = req.body[field as keyof typeof req.body];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06259","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":393,"code":"updates.location = { ...user.location, ...location } as LocationData;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06260","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":398,"code":"updates.preferences = { ...user.preferences, ...preferences } as UserPreferences;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06261","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":453,"code":"(user as any).privacySettings = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06262","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":453,"code":"(user as any).privacySettings = {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06263","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":454,"code":"...(user as any).privacySettings,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06264","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":454,"code":"...(user as any).privacySettings,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06265","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":470,"code":"data: { privacySettings: (user as any).privacySettings }","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06266","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":470,"code":"data: { privacySettings: (user as any).privacySettings }","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06267","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":569,"code":"const currentPhotoCount = (user as any).photos?.length || 0;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06268","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":569,"code":"const currentPhotoCount = (user as any).photos?.length || 0;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06269","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":584,"code":"// Type guard to ensure file has buffer property","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06270","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":585,"code":"const multerFile = file as Express.Multer.File & { buffer: Buffer };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06271","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":604,"code":"(user as any).photos = (user as any).photos || [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06272","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":604,"code":"(user as any).photos = (user as any).photos || [];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06273","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":605,"code":"(user as any).photos.push(...uploadedPhotos);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06274","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":605,"code":"(user as any).photos.push(...uploadedPhotos);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06275","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":613,"code":"photos: (user as any).photos,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06276","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":613,"code":"photos: (user as any).photos,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06277","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":645,"code":"const photoIndex = (user as any).photos?.findIndex((photo: UserPhoto) => photo._id?.toString() === photoId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06278","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":645,"code":"const photoIndex = (user as any).photos?.findIndex((photo: UserPhoto) => photo._id?.toString() === photoId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06279","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":654,"code":"const photo = (user as any).photos[photoIndex];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06280","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":654,"code":"const photo = (user as any).photos[photoIndex];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06281","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":666,"code":"(user as any).photos.splice(photoIndex, 1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06282","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":666,"code":"(user as any).photos.splice(photoIndex, 1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06283","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":668,"code":"// If this was the primary photo, set the first remaining photo as primary","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06284","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":669,"code":"if (photo.isPrimary && (user as any).photos.length > 0) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06285","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":669,"code":"if (photo.isPrimary && (user as any).photos.length > 0) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06286","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":670,"code":"(user as any).photos[0].isPrimary = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06287","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":670,"code":"(user as any).photos[0].isPrimary = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06288","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":678,"code":"data: { photos: (user as any).photos }","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06289","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":678,"code":"data: { photos: (user as any).photos }","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06290","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":709,"code":"(user as any).photos?.forEach((photo: UserPhoto) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06291","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":709,"code":"(user as any).photos?.forEach((photo: UserPhoto) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06292","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":713,"code":"// Set the specified photo as primary","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06293","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":714,"code":"const photo = (user as any).photos?.find((photo: UserPhoto) => photo._id?.toString() === photoId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06294","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":714,"code":"const photo = (user as any).photos?.find((photo: UserPhoto) => photo._id?.toString() === photoId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06295","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":730,"code":"data: { photos: (user as any).photos }","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06296","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":730,"code":"data: { photos: (user as any).photos }","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06297","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":831,"code":"firstName: (user as any).firstName,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06298","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":831,"code":"firstName: (user as any).firstName,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06299","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":832,"code":"lastName: (user as any).lastName,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06300","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":832,"code":"lastName: (user as any).lastName,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06301","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":833,"code":"bio: (user as any).bio,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06302","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":833,"code":"bio: (user as any).bio,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06303","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":834,"code":"dateOfBirth: (user as any).dateOfBirth,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06304","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":834,"code":"dateOfBirth: (user as any).dateOfBirth,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06305","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":835,"code":"location: (user as any).location,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06306","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":835,"code":"location: (user as any).location,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06307","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":836,"code":"preferences: (user as any).preferences,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06308","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":836,"code":"preferences: (user as any).preferences,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06309","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":837,"code":"createdAt: (user as any).createdAt,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06310","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":837,"code":"createdAt: (user as any).createdAt,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06311","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":838,"code":"lastActive: (user as any).analytics?.lastActive","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06312","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":838,"code":"lastActive: (user as any).analytics?.lastActive","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06313","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":840,"code":"pets: (user as any).pets?.map((pet: IPetDocument) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06314","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":840,"code":"pets: (user as any).pets?.map((pet: IPetDocument) => ({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06315","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":849,"code":"matches: (user as any).matches?.map((match: { compatibilityScore?: number; createdAt?: Date }) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06316","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":849,"code":"matches: (user as any).matches?.map((match: { compatibilityScore?: number; createdAt?: Date }) => ({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06317","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":854,"code":"totalPets: (user as any).pets?.length || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06318","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":854,"code":"totalPets: (user as any).pets?.length || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06319","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":855,"code":"totalMatches: (user as any).matches?.length || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06320","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":855,"code":"totalMatches: (user as any).matches?.length || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06321","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":856,"code":"totalSwipes: (user as any).analytics?.totalSwipes || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06322","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":856,"code":"totalSwipes: (user as any).analytics?.totalSwipes || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06323","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":857,"code":"totalLikes: (user as any).analytics?.totalLikes || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06324","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":857,"code":"totalLikes: (user as any).analytics?.totalLikes || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06325","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":858,"code":"totalMessages: (user as any).analytics?.totalMessagesSent || 0","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06326","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":858,"code":"totalMessages: (user as any).analytics?.totalMessagesSent || 0","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06327","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":866,"code":"res.setHeader('Content-Disposition', `attachment; filename=pawfectmatch-data-${(user as any)._id}-${new Date().toISOString().split('T')[0]}.json`);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06328","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":866,"code":"res.setHeader('Content-Disposition', `attachment; filename=pawfectmatch-data-${(user as any)._id}-${new Date().toISOString().split('T')[0]}.json`);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06329","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":897,"code":"// Mark as inactive","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06330","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":900,"code":"(user as any).deactivatedAt = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06331","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":900,"code":"(user as any).deactivatedAt = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06332","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":901,"code":"(user as any).deactivationReason = reason;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06333","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":901,"code":"(user as any).deactivationReason = reason;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06334","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":902,"code":"(user as any).deactivationFeedback = feedback;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06335","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":902,"code":"(user as any).deactivationFeedback = feedback;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06336","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":915,"code":"deactivatedAt: (user as any).deactivatedAt,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06337","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":915,"code":"deactivatedAt: (user as any).deactivatedAt,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06338","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":957,"code":"(user as any).reactivatedAt = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06339","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":957,"code":"(user as any).reactivatedAt = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06340","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":958,"code":"(user as any).deactivatedAt = null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06341","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":958,"code":"(user as any).deactivatedAt = null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06342","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":959,"code":"(user as any).deactivationReason = null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06343","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":959,"code":"(user as any).deactivationReason = null;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06344","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":972,"code":"reactivatedAt: (user as any).reactivatedAt","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06345","severity":"P2","category":"Type","file":"server/src/controllers/userController.ts","line":972,"code":"reactivatedAt: (user as any).reactivatedAt","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06346","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":83,"code":"payloadForVerification as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06347","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":117,"code":"await handleCheckoutSessionCompleted(event.data.object as Session);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06348","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":118,"code":"customerId = (event.data.object as any).customer;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06349","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":118,"code":"customerId = (event.data.object as any).customer;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06350","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":121,"code":"await handleInvoicePaid(event.data.object as Invoice);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06351","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":122,"code":"customerId = (event.data.object as any).customer;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06352","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":122,"code":"customerId = (event.data.object as any).customer;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06353","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":125,"code":"await handleInvoicePaymentFailed(event.data.object as Invoice);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06354","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":126,"code":"customerId = (event.data.object as any).customer;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06355","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":126,"code":"customerId = (event.data.object as any).customer;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06356","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":129,"code":"await handleInvoicePaymentSucceeded(event.data.object as Invoice);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06357","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":130,"code":"customerId = (event.data.object as any).customer;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06358","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":130,"code":"customerId = (event.data.object as any).customer;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06359","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":133,"code":"await handleSubscriptionUpdated(event.data.object as Subscription);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06360","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":134,"code":"customerId = (event.data.object as any).customer;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06361","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":134,"code":"customerId = (event.data.object as any).customer;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06362","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":137,"code":"await handleSubscriptionDeleted(event.data.object as Subscription);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06363","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":138,"code":"customerId = (event.data.object as any).customer;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06364","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":138,"code":"customerId = (event.data.object as any).customer;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06365","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":141,"code":"customerId = (event.data.object as any).customer;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06366","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":141,"code":"customerId = (event.data.object as any).customer;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06367","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":144,"code":"customerId = (event.data.object as any).customer;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06368","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":144,"code":"customerId = (event.data.object as any).customer;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06369","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":155,"code":"logger.error('Failed to sync entitlement from webhook', { error: (e as Error).message, customerId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06370","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":160,"code":"// Mark event as processed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06371","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":226,"code":"const periodEnd = (subscription as any).current_period_end;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06372","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":226,"code":"const periodEnd = (subscription as any).current_period_end;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06373","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":227,"code":"(user.premium as any) = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06374","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":227,"code":"(user.premium as any) = {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06375","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":272,"code":"const subscription = await stripe.subscriptions.retrieve(invoice.subscription as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06376","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":288,"code":"const periodEnd = (subscription as any).current_period_end;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06377","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":288,"code":"const periodEnd = (subscription as any).current_period_end;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06378","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":289,"code":"(user.premium as any).expiresAt = periodEnd ? new Date(periodEnd * 1000) : undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06379","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":289,"code":"(user.premium as any).expiresAt = periodEnd ? new Date(periodEnd * 1000) : undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06380","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":290,"code":"(user.premium as any).isActive = true; // Ensure it's active","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06381","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":290,"code":"(user.premium as any).isActive = true; // Ensure it's active","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06382","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":297,"code":"newExpiryDate: (user.premium as any).expiresAt","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06383","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":297,"code":"newExpiryDate: (user.premium as any).expiresAt","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06384","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":325,"code":"const subscription = await stripe.subscriptions.retrieve(invoice.subscription as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06385","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":341,"code":"const periodEnd = (subscription as any).current_period_end;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06386","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":341,"code":"const periodEnd = (subscription as any).current_period_end;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06387","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":342,"code":"(user.premium as any).expiresAt = periodEnd ? new Date(periodEnd * 1000) : undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06388","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":342,"code":"(user.premium as any).expiresAt = periodEnd ? new Date(periodEnd * 1000) : undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06389","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":343,"code":"(user.premium as any).isActive = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06390","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":343,"code":"(user.premium as any).isActive = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06391","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":344,"code":"(user.premium as any).retryCount = 0; // Reset retry count on successful payment","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06392","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":344,"code":"(user.premium as any).retryCount = 0; // Reset retry count on successful payment","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06393","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":355,"code":"newExpiryDate: (user.premium as any).expiresAt","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06394","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":355,"code":"newExpiryDate: (user.premium as any).expiresAt","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06395","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":394,"code":"(user.premium as any).retryCount = ((user.premium as any).retryCount || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06396","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":394,"code":"(user.premium as any).retryCount = ((user.premium as any).retryCount || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06397","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":395,"code":"(user.premium as any).paymentStatus = 'failed';","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06398","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":395,"code":"(user.premium as any).paymentStatus = 'failed';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06399","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":399,"code":"await paymentRetryService.handleFailedPayment(invoice.subscription as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06400","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":405,"code":"retryCount: (user.premium as any).retryCount","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06401","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":405,"code":"retryCount: (user.premium as any).retryCount","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06402","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":444,"code":"(user.premium as any).plan = planName;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06403","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":444,"code":"(user.premium as any).plan = planName;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06404","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":445,"code":"const periodEnd = (subscription as any).current_period_end;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06405","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":445,"code":"const periodEnd = (subscription as any).current_period_end;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06406","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":446,"code":"(user.premium as any).expiresAt = periodEnd ? new Date(periodEnd * 1000) : undefined;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06407","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":446,"code":"(user.premium as any).expiresAt = periodEnd ? new Date(periodEnd * 1000) : undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06408","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":447,"code":"(user.premium as any).cancelAtPeriodEnd = subscription.cancel_at_period_end;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06409","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":447,"code":"(user.premium as any).cancelAtPeriodEnd = subscription.cancel_at_period_end;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06410","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":486,"code":"(user.premium as any).isActive = false;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06411","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":486,"code":"(user.premium as any).isActive = false;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06412","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":487,"code":"(user.premium as any).plan = 'basic';","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06413","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":487,"code":"(user.premium as any).plan = 'basic';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06414","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":488,"code":"(user.premium as any).expiresAt = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06415","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":488,"code":"(user.premium as any).expiresAt = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06416","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":529,"code":"function setFeatureLimitsBasedOnPlan(user: any): void {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06417","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":532,"code":"(user.premium as any).swipesLimit = Infinity;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06418","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":532,"code":"(user.premium as any).swipesLimit = Infinity;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06419","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":533,"code":"(user.premium as any).superLikesLimit = 5;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06420","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":533,"code":"(user.premium as any).superLikesLimit = 5;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06421","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":534,"code":"(user.premium as any).boostsLimit = 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06422","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":534,"code":"(user.premium as any).boostsLimit = 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06423","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":537,"code":"(user.premium as any).swipesLimit = Infinity;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06424","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":537,"code":"(user.premium as any).swipesLimit = Infinity;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06425","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":538,"code":"(user.premium as any).superLikesLimit = Infinity;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06426","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":538,"code":"(user.premium as any).superLikesLimit = Infinity;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06427","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":539,"code":"(user.premium as any).boostsLimit = 5;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06428","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":539,"code":"(user.premium as any).boostsLimit = 5;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06429","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":543,"code":"(user.premium as any).swipesLimit = 50;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06430","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":543,"code":"(user.premium as any).swipesLimit = 50;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06431","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":544,"code":"(user.premium as any).superLikesLimit = 0;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06432","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":544,"code":"(user.premium as any).superLikesLimit = 0;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06433","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":545,"code":"(user.premium as any).boostsLimit = 0;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-06434","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":545,"code":"(user.premium as any).boostsLimit = 0;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06435","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":550,"code":"* Helper to check if an event has already been processed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06436","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":567,"code":"// Log error and still return false as a fallback","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06437","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":574,"code":"* Helper to mark an event as processed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06438","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":595,"code":"logger.error('Error marking event as processed', { eventId, error: getErrorMessage(error) });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06439","severity":"P2","category":"Type","file":"server/src/controllers/webhookController.ts","line":612,"code":"const errorObj = error as Record<string, unknown>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-06440","severity":"P3","category":"Type","file":"server/src/index.ts","line":36,"code":"console.log(`🎬 PawReels API server running on port ${PORT}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-06441","severity":"P2","category":"Type","file":"server/src/middleware/adminAuth.ts","line":6,"code":"import * as jwt from 'jsonwebtoken';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06442","severity":"P2","category":"Type","file":"server/src/middleware/adminAuth.ts","line":36,"code":"const decoded = jwt.verify(token, process.env.JWT_SECRET!) as JwtPayload & { userId: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06443","severity":"P2","category":"Type","file":"server/src/middleware/adminAuth.ts","line":82,"code":"message: 'Authentication token has expired'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06444","severity":"P2","category":"Type","file":"server/src/middleware/adminAuth.ts","line":96,"code":"* Ensure user has an admin role","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06445","severity":"P2","category":"Type","file":"server/src/middleware/adminAuth.ts","line":200,"code":"const decoded = jwt.verify(token, process.env.JWT_SECRET!) as JwtPayload & { userId?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06446","severity":"P2","category":"Type","file":"server/src/middleware/adminLogger.ts","line":26,"code":"* @param success - Whether the action was successful (default: true)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06447","severity":"P2","category":"Type","file":"server/src/middleware/adminLogger.ts","line":43,"code":"const logEntry = await (AdminActivityLog as any).create({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06448","severity":"P2","category":"Type","file":"server/src/middleware/adminLogger.ts","line":43,"code":"const logEntry = await (AdminActivityLog as any).create({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06449","severity":"P2","category":"Type","file":"server/src/middleware/adminLogger.ts","line":47,"code":"ipAddress: req.ip || (req as any).connection?.remoteAddress,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06450","severity":"P2","category":"Type","file":"server/src/middleware/adminLogger.ts","line":47,"code":"ipAddress: req.ip || (req as any).connection?.remoteAddress,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06451","severity":"P1","category":"Type","file":"server/src/middleware/adminLogger.ts","line":81,"code":".catch((error: unknown) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-06452","severity":"P1","category":"Type","file":"server/src/middleware/audit.ts","line":69,"code":"}).catch((error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-06453","severity":"P2","category":"Type","file":"server/src/middleware/auth.ts","line":1,"code":"import * as jwt from 'jsonwebtoken';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06454","severity":"P2","category":"Type","file":"server/src/middleware/auth.ts","line":4,"code":"import * as crypto from 'crypto';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06455","severity":"P2","category":"Type","file":"server/src/middleware/auth.ts","line":16,"code":"user?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06456","severity":"P2","category":"Type","file":"server/src/middleware/auth.ts","line":39,"code":"accessOptions.expiresIn = accessExpiry as StringValue;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06457","severity":"P2","category":"Type","file":"server/src/middleware/auth.ts","line":43,"code":"expiresIn: (process.env.JWT_REFRESH_EXPIRY || process.env.JWT_REFRESH_EXPIRE || '7d') as StringValue","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06458","severity":"P2","category":"Type","file":"server/src/middleware/auth.ts","line":93,"code":"const decoded = jwt.verify(token, accessSecret!) as TokenData & JwtPayload;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06459","severity":"P2","category":"Type","file":"server/src/middleware/auth.ts","line":145,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06460","severity":"P2","category":"Type","file":"server/src/middleware/auth.ts","line":225,"code":"const decoded = jwt.verify(refreshToken, refreshSecret!) as TokenData & JwtPayload;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06461","severity":"P2","category":"Type","file":"server/src/middleware/auth.ts","line":262,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06462","severity":"P2","category":"Type","file":"server/src/middleware/auth.ts","line":289,"code":"const decoded = jwt.verify(token, accessSecret!) as TokenData & JwtPayload;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06463","severity":"P2","category":"Type","file":"server/src/middleware/csrf.ts","line":36,"code":"const csrfTokenFromHeader = req.headers['x-csrf-token'] as string | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06464","severity":"P2","category":"Type","file":"server/src/middleware/csrf.ts","line":77,"code":"].filter(Boolean) as string[];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06465","severity":"P2","category":"Type","file":"server/src/middleware/csrf.ts","line":122,"code":"}, {} as Record<string, string>);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06466","severity":"P2","category":"Type","file":"server/src/middleware/errorHandler.ts","line":33,"code":"userId: (req as { user?: { id?: string } }).user?.id,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06467","severity":"P2","category":"Type","file":"server/src/middleware/errorHandler.ts","line":40,"code":"const shouldNotifyAdmin = (err as Error & { statusCode?: number }).statusCode >= 500 ||","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06468","severity":"P2","category":"Type","file":"server/src/middleware/errorHandler.ts","line":43,"code":"(err as Error & { type?: string }).type === 'StripeCardError' ||","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06469","severity":"P2","category":"Type","file":"server/src/middleware/errorHandler.ts","line":49,"code":"severity: (err as Error & { statusCode?: number }).statusCode >= 500 ? 'critical' : 'high',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06470","severity":"P2","category":"Type","file":"server/src/middleware/errorHandler.ts","line":56,"code":"userId: (req as { user?: { id?: string } }).user?.id,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06471","severity":"P1","category":"Type","file":"server/src/middleware/errorHandler.ts","line":59,"code":"}).catch((notificationError: unknown) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-06472","severity":"P2","category":"Type","file":"server/src/middleware/errorHandler.ts","line":76,"code":"const field = Object.keys((err as Error & { keyValue?: Record<string, unknown> }).keyValue || {})[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06473","severity":"P2","category":"Type","file":"server/src/middleware/errorHandler.ts","line":90,"code":"const messages = Object.values((err as Error & { errors?: Record<string, { message?: string }> }).errors || {}).map((val) => (val as { message?: string }).message).filter((msg): msg is string => !!msg);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06474","severity":"P2","category":"Type","file":"server/src/middleware/errorHandler.ts","line":104,"code":"error = { message: 'Authentication token has expired', statusCode: 401 };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06475","severity":"P2","category":"Type","file":"server/src/middleware/errorHandler.ts","line":123,"code":"if ((err as Error & { status?: number; retryAfter?: number }).status === 429) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06476","severity":"P2","category":"Type","file":"server/src/middleware/errorHandler.ts","line":127,"code":"retryAfter: (err as Error & { retryAfter?: number }).retryAfter || 60,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06477","severity":"P2","category":"Type","file":"server/src/middleware/errorHandler.ts","line":148,"code":"if ((err as Error & { type?: string }).type === 'StripeCardError') {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06478","severity":"P2","category":"Type","file":"server/src/middleware/globalRateLimit.ts","line":61,"code":"if (RedisStore && redis && (redis as any).isReady) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06479","severity":"P2","category":"Type","file":"server/src/middleware/globalRateLimit.ts","line":61,"code":"if (RedisStore && redis && (redis as any).isReady) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06480","severity":"P2","category":"Type","file":"server/src/middleware/inputValidator.ts","line":28,"code":"export const schemas = {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06481","severity":"P2","category":"Type","file":"server/src/middleware/premium.ts","line":34,"code":"user?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06482","severity":"P2","category":"Type","file":"server/src/middleware/premium.ts","line":49,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06483","severity":"P2","category":"Type","file":"server/src/middleware/premium.ts","line":100,"code":"} catch (redisError: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06484","severity":"P2","category":"Type","file":"server/src/middleware/premium.ts","line":108,"code":"const currentKey = `${key}Used` as keyof typeof usage;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06485","severity":"P2","category":"Type","file":"server/src/middleware/premium.ts","line":109,"code":"const used = usage[currentKey] as number || 0;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06486","severity":"P2","category":"Type","file":"server/src/middleware/premium.ts","line":131,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06487","severity":"P2","category":"Type","file":"server/src/middleware/premiumGating.ts","line":69,"code":"// Check if user has unlimited swipes (premium feature)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06488","severity":"P2","category":"Type","file":"server/src/middleware/premiumGating.ts","line":75,"code":"// Check if user has exceeded free tier limits","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06489","severity":"P2","category":"Type","file":"server/src/middleware/premiumGating.ts","line":148,"code":"// Check if user has boosts remaining this month","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06490","severity":"P2","category":"Type","file":"server/src/middleware/premiumGating.ts","line":338,"code":"user.premium.features?.[featureName as keyof PremiumFeatures];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06491","severity":"P2","category":"Type","file":"server/src/middleware/premiumGating.ts","line":362,"code":"res.json = function(data: any): Response {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06492","severity":"P1","category":"Type","file":"server/src/middleware/premiumGating.ts","line":365,"code":"updatePremiumUsage(req.user._id, featureName).catch(error => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-06493","severity":"P2","category":"Type","file":"server/src/middleware/premiumGating.ts","line":372,"code":"res.send = function(data?: any): Response {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06494","severity":"P1","category":"Type","file":"server/src/middleware/premiumGating.ts","line":375,"code":"updatePremiumUsage(req.user._id, featureName).catch(error => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-06495","severity":"P2","category":"Type","file":"server/src/middleware/premiumGating.ts","line":391,"code":"const updateQuery: any = {};","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06496","severity":"P2","category":"Type","file":"server/src/middleware/premiumGating.ts","line":413,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06497","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":27,"code":"keyGenerator: (req: Request) => (req as any).user?._id?.toString() || ipKeyGenerator(req),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06498","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":27,"code":"keyGenerator: (req: Request) => (req as any).user?._id?.toString() || ipKeyGenerator(req),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06499","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":32,"code":"if ((req as any).user) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06500","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":32,"code":"if ((req as any).user) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06501","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":34,"code":"req as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06502","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":34,"code":"req as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06503","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":56,"code":"return !(req as any).user;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06504","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":56,"code":"return !(req as any).user;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06505","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":76,"code":"keyGenerator: (req: Request) => (req as any).user?._id?.toString() || ipKeyGenerator(req),","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06506","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":76,"code":"keyGenerator: (req: Request) => (req as any).user?._id?.toString() || ipKeyGenerator(req),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06507","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":79,"code":"if ((req as any).user) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06508","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":79,"code":"if ((req as any).user) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06509","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":81,"code":"req as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06510","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":81,"code":"req as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06511","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":117,"code":"keyGenerator: (req: Request) => `${(req as any).body?.email || 'unknown'}_${ipKeyGenerator(req)}`,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06512","severity":"P2","category":"Type","file":"server/src/middleware/rateLimiter.ts","line":117,"code":"keyGenerator: (req: Request) => `${(req as any).body?.email || 'unknown'}_${ipKeyGenerator(req)}`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06513","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":10,"code":"user?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06514","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":51,"code":"* Check if a user has a specific permission","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06515","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":54,"code":"* @returns True if user has permission","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06516","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":59,"code":"// Administrator has all permissions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06517","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":79,"code":"* Middleware to check if user has required permission","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06518","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":97,"code":"// Check if user has the required permission","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06519","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":117,"code":"// User has permission, proceed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06520","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":119,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06521","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":131,"code":"* Middleware to check if user has ANY of the specified permissions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06522","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":170,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06523","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":182,"code":"* Middleware to check if user has ALL of the specified permissions","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06524","severity":"P2","category":"Type","file":"server/src/middleware/rbac.ts","line":221,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06525","severity":"P2","category":"Type","file":"server/src/middleware/requestId.ts","line":27,"code":"const requestId = (req.headers['x-request-id'] as string) ||","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06526","severity":"P2","category":"Type","file":"server/src/middleware/requestId.ts","line":28,"code":"(req.headers['x-correlation-id'] as string) ||","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06527","severity":"P2","category":"Type","file":"server/src/middleware/requestId.ts","line":39,"code":"if ((req as any).log) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06528","severity":"P2","category":"Type","file":"server/src/middleware/requestId.ts","line":39,"code":"if ((req as any).log) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06529","severity":"P2","category":"Type","file":"server/src/middleware/requestId.ts","line":40,"code":"(req as any).log = (req as any).log.child({ requestId });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06530","severity":"P2","category":"Type","file":"server/src/middleware/requestId.ts","line":40,"code":"(req as any).log = (req as any).log.child({ requestId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06531","severity":"P2","category":"Type","file":"server/src/middleware/sessionManager.ts","line":16,"code":"[key: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06532","severity":"P2","category":"Type","file":"server/src/middleware/sessionManager.ts","line":86,"code":"// Check if session has timed out","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06533","severity":"P2","category":"Type","file":"server/src/middleware/sessionManager.ts","line":223,"code":"user?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06534","severity":"P2","category":"Type","file":"server/src/middleware/sessionManager.ts","line":233,"code":"const sessionId = req.headers['x-session-id'] as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06535","severity":"P2","category":"Type","file":"server/src/middleware/sessionManager.ts","line":256,"code":"const sessionId = req.headers['x-session-id'] as string | undefined;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06536","severity":"P2","category":"Type","file":"server/src/middleware/storyDailyLimiter.ts","line":25,"code":"if (!redis || !(redis as any).incr) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06537","severity":"P2","category":"Type","file":"server/src/middleware/storyDailyLimiter.ts","line":25,"code":"if (!redis || !(redis as any).incr) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06538","severity":"P2","category":"Type","file":"server/src/middleware/storyDailyLimiter.ts","line":35,"code":"const count = await (redis as any).incr(key);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06539","severity":"P2","category":"Type","file":"server/src/middleware/storyDailyLimiter.ts","line":35,"code":"const count = await (redis as any).incr(key);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06540","severity":"P2","category":"Type","file":"server/src/middleware/storyDailyLimiter.ts","line":40,"code":"await (redis as any).expire(key, ttl);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06541","severity":"P2","category":"Type","file":"server/src/middleware/storyDailyLimiter.ts","line":40,"code":"await (redis as any).expire(key, ttl);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06542","severity":"P2","category":"Type","file":"server/src/middleware/storyDailyLimiter.ts","line":53,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06543","severity":"P2","category":"Type","file":"server/src/middleware/validator.ts","line":43,"code":"export const schemas = {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06544","severity":"P2","category":"Type","file":"server/src/middleware/validator.ts","line":113,"code":"export default { validate, patterns, schemas };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06545","severity":"P2","category":"Type","file":"server/src/middleware/zodValidator.ts","line":18,"code":"const issues = (err as { issues?: Array<{ path?: string[]; code?: string; message?: string }> }).issues || [];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06546","severity":"P2","category":"Type","file":"server/src/migrations/enhanced-features-2025.ts","line":38,"code":"logger.error('❌ Migration failed:', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06547","severity":"P2","category":"Type","file":"server/src/migrations/enhanced-features-2025.ts","line":64,"code":"logger.error('❌ Rollback failed:', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06548","severity":"P2","category":"Type","file":"server/src/models/Configuration.ts","line":3,"code":"// This model stores configuration for external services such as Stripe, DeepSeek, Google Maps, etc.","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06549","severity":"P2","category":"Type","file":"server/src/models/Conversation.ts","line":88,"code":"* Mark messages as read for a user","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06550","severity":"P2","category":"Type","file":"server/src/models/Conversation.ts","line":147,"code":"conversationSchema.statics.getMessagesPage = async function(conversationId: string, { before, limit = 20 }: { before?: string; limit?: number }): Promise<any> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06551","severity":"P2","category":"Type","file":"server/src/models/Favorite.ts","line":60,"code":"limit = (options.limit as number) || 50;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06552","severity":"P2","category":"Type","file":"server/src/models/Favorite.ts","line":61,"code":"skip = (options.skip as number) || 0;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06553","severity":"P2","category":"Type","file":"server/src/models/Favorite.ts","line":62,"code":"sort = (options.sort as any) || sort;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06554","severity":"P2","category":"Type","file":"server/src/models/Favorite.ts","line":62,"code":"sort = (options.sort as any) || sort;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06555","severity":"P2","category":"Type","file":"server/src/models/Notification.ts","line":74,"code":"// Method to mark as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06556","severity":"P2","category":"Type","file":"server/src/models/Notification.ts","line":86,"code":"// Static method to mark all as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06557","severity":"P2","category":"Type","file":"server/src/models/PhotoModeration.ts","line":227,"code":"this.rejectionCategory = category as IPhotoModeration['rejectionCategory'];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06558","severity":"P2","category":"Type","file":"server/src/models/SecurityAlert.ts","line":281,"code":"const severityValue = this.severity as 'critical' | 'high' | 'medium' | 'low';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06559","severity":"P2","category":"Type","file":"server/src/models/SecurityAlert.ts","line":285,"code":"impactScores[this.impactAssessment.confidentiality as 'critical' | 'high' | 'medium' | 'low'] +","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06560","severity":"P2","category":"Type","file":"server/src/models/SecurityAlert.ts","line":286,"code":"impactScores[this.impactAssessment.integrity as 'critical' | 'high' | 'medium' | 'low'] +","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06561","severity":"P2","category":"Type","file":"server/src/models/SecurityAlert.ts","line":287,"code":"impactScores[this.impactAssessment.availability as 'critical' | 'high' | 'medium' | 'low'] +","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06562","severity":"P2","category":"Type","file":"server/src/models/SecurityAlert.ts","line":288,"code":"impactScores[this.impactAssessment.businessImpact as 'critical' | 'high' | 'medium' | 'low']","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06563","severity":"P2","category":"Type","file":"server/src/models/SecurityAlert.ts","line":377,"code":"description: 'Security alert was generated',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06564","severity":"P2","category":"Type","file":"server/src/models/ShareEvent.ts","line":96,"code":"}, {} as Record<string, number>);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06565","severity":"P2","category":"Type","file":"server/src/models/Story.ts","line":165,"code":"* Check if user has viewed this story","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06566","severity":"P2","category":"Type","file":"server/src/models/Story.ts","line":190,"code":"const cursorDate = new Date(optionsConfig.cursor as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06567","severity":"P2","category":"Type","file":"server/src/models/Story.ts","line":197,"code":"? Math.max(1, Math.min(optionsConfig.limit as number, 100))","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06568","severity":"P2","category":"Type","file":"server/src/models/Story.ts","line":217,"code":"const cursorDate = new Date(options.cursor as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06569","severity":"P2","category":"Type","file":"server/src/models/Story.ts","line":224,"code":"? Math.max(1, Math.min(options.limit as number, 100))","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06570","severity":"P2","category":"Type","file":"server/src/models/Story.ts","line":248,"code":"const cursorDate = new Date(optionsConfig.cursor as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06571","severity":"P2","category":"Type","file":"server/src/models/Story.ts","line":306,"code":"const limit = Math.max(1, Math.min(optionsConfig.limit as number, 100));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06572","severity":"P2","category":"Type","file":"server/src/models/Story.ts","line":310,"code":"return this.aggregate(pipeline) as Promise<Array<{ _id: string; stories: unknown }>>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06573","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":124,"code":"return ((this as any).size / (1024 * 1024)).toFixed(2);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06574","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":124,"code":"return ((this as any).size / (1024 * 1024)).toFixed(2);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06575","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":129,"code":"return Math.floor((Date.now() - (this as any).uploadedAt) / (1000 * 60 * 60 * 24));","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06576","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":129,"code":"return Math.floor((Date.now() - (this as any).uploadedAt) / (1000 * 60 * 60 * 24));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06577","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":134,"code":"if ((this as any).dimensions.width && (this as any).dimensions.height) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06578","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":134,"code":"if ((this as any).dimensions.width && (this as any).dimensions.height) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06579","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":135,"code":"return ((this as any).dimensions.width / (this as any).dimensions.height).toFixed(2);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06580","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":135,"code":"return ((this as any).dimensions.width / (this as any).dimensions.height).toFixed(2);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06581","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":142,"code":"return (this as any).mimeType.startsWith('image/');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06582","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":142,"code":"return (this as any).mimeType.startsWith('image/');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06583","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":147,"code":"return (this as any).mimeType.startsWith('video/');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06584","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":147,"code":"return (this as any).mimeType.startsWith('video/');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06585","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":152,"code":"return (this as any).mimeType.includes('pdf') ||","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06586","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":152,"code":"return (this as any).mimeType.includes('pdf') ||","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06587","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":153,"code":"(this as any).mimeType.includes('document') ||","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06588","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":153,"code":"(this as any).mimeType.includes('document') ||","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06589","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":154,"code":"(this as any).mimeType.includes('text');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06590","severity":"P2","category":"Type","file":"server/src/models/Upload.ts","line":154,"code":"(this as any).mimeType.includes('text');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06591","severity":"P2","category":"Type","file":"server/src/models/UploadEnhanced.ts","line":140,"code":"return ((this as any).bytes / (1024 * 1024)).toFixed(2);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06592","severity":"P2","category":"Type","file":"server/src/models/UploadEnhanced.ts","line":140,"code":"return ((this as any).bytes / (1024 * 1024)).toFixed(2);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06593","severity":"P2","category":"Type","file":"server/src/models/User.ts","line":2,"code":"import * as bcrypt from 'bcryptjs';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06594","severity":"P2","category":"Type","file":"server/src/models/User.ts","line":401,"code":"next(error as Error);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06595","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":129,"code":"return Math.floor((Date.now() - (this as any).submittedAt) / (1000 * 60 * 60 * 24));","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06596","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":129,"code":"return Math.floor((Date.now() - (this as any).submittedAt) / (1000 * 60 * 60 * 24));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06597","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":134,"code":"return Math.floor(((this as any).expiresAt - Date.now()) / (1000 * 60 * 60 * 24));","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06598","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":134,"code":"return Math.floor(((this as any).expiresAt - Date.now()) / (1000 * 60 * 60 * 24));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06599","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":139,"code":"return (this as any).expiresAt < new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06600","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":139,"code":"return (this as any).expiresAt < new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06601","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":144,"code":"const daysUntilExpiration = (this as any).daysUntilExpiration;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06602","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":144,"code":"const daysUntilExpiration = (this as any).daysUntilExpiration;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06603","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":172,"code":"if ((this as any).status === 'approved') {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06604","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":172,"code":"if ((this as any).status === 'approved') {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06605","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":173,"code":"(this as any).approvedAt = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06606","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":173,"code":"(this as any).approvedAt = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06607","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":174,"code":"} else if ((this as any).status === 'rejected') {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06608","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":174,"code":"} else if ((this as any).status === 'rejected') {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06609","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":175,"code":"(this as any).rejectedAt = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06610","severity":"P2","category":"Type","file":"server/src/models/Verification.ts","line":175,"code":"(this as any).rejectedAt = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06611","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":99,"code":"const { validate, schemas } = require('../middleware/validator');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06612","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":157,"code":"query.timestamp = {} as TimestampQuery;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06613","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":158,"code":"if (startDate) (query.timestamp as TimestampQuery).$gte = new Date(String(startDate));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06614","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":159,"code":"if (endDate) (query.timestamp as TimestampQuery).$lte = new Date(String(endDate));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06615","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":321,"code":"// Handle customer as either string ID or customer object","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06616","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":604,"code":"const err = error as { response?: { data?: unknown }; message?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06617","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":732,"code":"const quotas = [","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06618","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":797,"code":"const userData = u as { _id: string; email: string; firstName?: string; lastName?: string; isActive?: boolean; isBlocked?: boolean; [key: string]: unknown };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06619","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":1011,"code":"// Reuse the same data building logic as /billing/customers","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06620","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":1039,"code":"const userData = u as { _id: string; email: string; firstName?: string; lastName?: string; isActive?: boolean; isBlocked?: boolean; [key: string]: unknown };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06621","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":1533,"code":"{ $skip: (parseInt(page as string) - 1) * parseInt(limit as string) },","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06622","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":1534,"code":"{ $limit: parseInt(limit as string) },","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06623","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":1802,"code":"message: `Report exported successfully as ${format.toUpperCase()}`","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06624","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":1883,"code":"sortOptions[sortBy as string] = sortOrder === 'desc' ? -1 : 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06625","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":1890,"code":".skip((parseInt(page as string) - 1) * parseInt(limit as string))","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06626","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":1891,"code":".limit(parseInt(limit as string));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06627","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":1901,"code":"page: parseInt(page as string),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06628","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":1902,"code":"limit: parseInt(limit as string),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06629","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":1904,"code":"pages: Math.ceil(total / parseInt(limit as string))","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06630","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":2076,"code":"aVal = (a as Record<string, unknown>)[String(sortBy)] || '';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06631","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":2077,"code":"bVal = (b as Record<string, unknown>)[String(sortBy)] || '';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06632","severity":"P2","category":"Type","file":"server/src/routes/admin.ts","line":2353,"code":"message: `Security alerts exported successfully as ${String(format).toUpperCase()}`","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06633","severity":"P2","category":"Type","file":"server/src/routes/adminConsole.ts","line":58,"code":"{ email: { $regex: search as string, $options: 'i' } },","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06634","severity":"P2","category":"Type","file":"server/src/routes/adminConsole.ts","line":59,"code":"{ firstName: { $regex: search as string, $options: 'i' } },","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06635","severity":"P2","category":"Type","file":"server/src/routes/adminConsole.ts","line":60,"code":"{ lastName: { $regex: search as string, $options: 'i' } },","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06636","severity":"P2","category":"Type","file":"server/src/routes/adminConsole.ts","line":80,"code":"sort[sortBy as string] = sortDirection === 'asc' ? 1 : -1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06637","severity":"P2","category":"Type","file":"server/src/routes/adminConsole.ts","line":82,"code":"const pageNum = parseInt(page as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06638","severity":"P2","category":"Type","file":"server/src/routes/adminConsole.ts","line":83,"code":"const limitNum = parseInt(limit as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06639","severity":"P2","category":"Type","file":"server/src/routes/adminConsole.ts","line":243,"code":"if (startDate) (query.at as Record<string, Date>).$gte = new Date(startDate as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06640","severity":"P2","category":"Type","file":"server/src/routes/adminConsole.ts","line":244,"code":"if (endDate) (query.at as Record<string, Date>).$lte = new Date(endDate as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06641","severity":"P2","category":"Type","file":"server/src/routes/adminConsole.ts","line":247,"code":"const pageNum = parseInt(page as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06642","severity":"P2","category":"Type","file":"server/src/routes/adminConsole.ts","line":248,"code":"const limitNum = parseInt(limit as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06643","severity":"P2","category":"Type","file":"server/src/routes/ai.compat.ts","line":17,"code":"const i = arr.indexOf((a as any) ?? \"\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06644","severity":"P2","category":"Type","file":"server/src/routes/ai.compat.ts","line":17,"code":"const i = arr.indexOf((a as any) ?? \"\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06645","severity":"P2","category":"Type","file":"server/src/routes/ai.compat.ts","line":18,"code":"const j = arr.indexOf((b as any) ?? \"\");","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06646","severity":"P2","category":"Type","file":"server/src/routes/ai.compat.ts","line":18,"code":"const j = arr.indexOf((b as any) ?? \"\");","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06647","severity":"P2","category":"Type","file":"server/src/routes/ai.compat.ts","line":83,"code":"const { petAId, petBId } = req.body as { petAId: string; petBId: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06648","severity":"P2","category":"Type","file":"server/src/routes/ai.photo.ts","line":52,"code":"for await (const chunk of out.Body as any) chunks.push(chunk as Uint8Array);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06649","severity":"P2","category":"Type","file":"server/src/routes/ai.photo.ts","line":52,"code":"for await (const chunk of out.Body as any) chunks.push(chunk as Uint8Array);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06650","severity":"P2","category":"Type","file":"server/src/routes/ai.photo.ts","line":96,"code":"const { s3Key } = req.body as { s3Key: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06651","severity":"P2","category":"Type","file":"server/src/routes/ai.ts","line":172,"code":"id: (req as AuthenticatedRequest).userId || 'temp',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06652","severity":"P2","category":"Type","file":"server/src/routes/aiModeration.ts","line":16,"code":"const authReq = req as AuthenticatedRequest;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06653","severity":"P2","category":"Type","file":"server/src/routes/aiModeration.ts","line":17,"code":"authReq.user = authReq.user || { _id: '000000000000000000000001', email: 'test@local', role: 'moderator' } as IUserDocument;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06654","severity":"P2","category":"Type","file":"server/src/routes/aiModeration.ts","line":18,"code":"authReq.userId = authReq.user._id as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06655","severity":"P2","category":"Type","file":"server/src/routes/aiModerationAdmin.ts","line":17,"code":"const authReq = req as AuthenticatedRequest;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06656","severity":"P2","category":"Type","file":"server/src/routes/aiModerationAdmin.ts","line":18,"code":"authReq.user = authReq.user || { _id: '000000000000000000000001', email: 'admin@local', role: 'administrator', isAdmin: true } as IUserDocument;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06657","severity":"P2","category":"Type","file":"server/src/routes/aiModerationAdmin.ts","line":19,"code":"authReq.userId = authReq.user._id as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06658","severity":"P2","category":"Type","file":"server/src/routes/analytics.ts","line":121,"code":"const durations = events.filter(e => typeof e.durationMs === 'number').map(e => e.durationMs as number).sort((a, b) => a - b);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06659","severity":"P2","category":"Type","file":"server/src/routes/biometric.ts","line":49,"code":"await generateRegistrationOptionsHandler(req as AuthenticatedRequest, res);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06660","severity":"P2","category":"Type","file":"server/src/routes/biometric.ts","line":76,"code":"await verifyRegistrationHandler(req as AuthenticatedRequest, res);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06661","severity":"P2","category":"Type","file":"server/src/routes/biometric.ts","line":147,"code":"await removeBiometric(req as AuthenticatedRequest, res);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06662","severity":"P2","category":"Type","file":"server/src/routes/biometric.ts","line":164,"code":"await getBiometricStatus(req as AuthenticatedRequest, res);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06663","severity":"P2","category":"Type","file":"server/src/routes/chat.ts","line":43,"code":"cb(new Error('File type not allowed') as Error, false);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06664","severity":"P2","category":"Type","file":"server/src/routes/chat.ts","line":92,"code":"return handler(req as AuthenticatedRequest, res);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06665","severity":"P2","category":"Type","file":"server/src/routes/chat.ts","line":140,"code":"const matchDoc = match as { messages: { id: (id: string) => unknown } };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06666","severity":"P2","category":"Type","file":"server/src/routes/chat.ts","line":253,"code":"const { key, duration, waveform } = req.body as { key: string; duration: number; waveform: number[] };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06667","severity":"P2","category":"Type","file":"server/src/routes/chat.ts","line":281,"code":"const io = (global as { io?: { to: (room: string) => { emit: (event: string, data: unknown) => void } } }).io;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06668","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":100,"code":"page: parseInt(page as string, 10),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06669","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":101,"code":"limit: parseInt(limit as string, 10),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06670","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":103,"code":"pages: Math.ceil(total / parseInt(limit as string, 10))","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06671","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":159,"code":"_id: (newPost.author as PostAuthor)?._id || req.user?._id,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06672","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":160,"code":"firstName: (newPost.author as PostAuthor)?.firstName || req.user?.firstName,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06673","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":161,"code":"lastName: (newPost.author as PostAuthor)?.lastName || req.user?.lastName,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06674","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":162,"code":"avatar: (newPost.author as PostAuthor)?.avatar || req.user?.avatar,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06675","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":170,"code":"packName: (newPost.packId as { name?: string })?.name,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06676","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":336,"code":"page: parseInt(page as string, 10),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06677","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":337,"code":"limit: parseInt(limit as string, 10),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06678","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":339,"code":"pages: Math.ceil(total / parseInt(limit as string, 10))","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06679","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":550,"code":"const { targetType, targetId, reason } = req.body as {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06680","severity":"P2","category":"Type","file":"server/src/routes/community.ts","line":609,"code":"const { userId } = req.body as { userId: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06681","severity":"P2","category":"Type","file":"server/src/routes/conversations.ts","line":4,"code":"import * as conversationController from '../controllers/conversationController';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06682","severity":"P2","category":"Type","file":"server/src/routes/conversations.ts","line":26,"code":"// Mark messages as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06683","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":22,"code":"const authReq = req as AuthenticatedRequest;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06684","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":192,"code":"swipes: (userAnalytics as { totalSwipes?: number }).totalSwipes || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06685","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":194,"code":"events: Array.isArray((userAnalytics as { events?: unknown[] }).events) ? (userAnalytics as { events?: unknown[] }).events.length : 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06686","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":219,"code":"const authReq = req as AuthenticatedRequest;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06687","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":228,"code":"const coords = (user as { location?: { coordinates?: [number, number] } })?.location?.coordinates;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06688","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":260,"code":"const userTags = tagSetArray(userPets.flatMap(up => (up as { personalityTags?: unknown[] }).personalityTags || []));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06689","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":261,"code":"const petTags = tagSetArray((p as { personalityTags?: unknown[] }).personalityTags || []);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06690","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":264,"code":"const dLng = (p as { location?: { coordinates?: [number, number] } }).location?.coordinates?.[0] ?? 0 - coords[0];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06691","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":265,"code":"const dLat = (p as { location?: { coordinates?: [number, number] } }).location?.coordinates?.[1] ?? 0 - coords[1];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06692","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":285,"code":"id: String((pet as { _id: unknown })._id),","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06693","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":286,"code":"name: (pet as { name?: string }).name,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06694","severity":"P2","category":"Type","file":"server/src/routes/dashboard.ts","line":287,"code":"avatar: (pet as { photos?: Array<{ isPrimary?: boolean; url?: string }> }).photos?.find((ph: { isPrimary?: boolean }) => ph.isPrimary)?.url || (pet as { photos?: Array<{ url?: string }> }).photos?.[0]?.url || null,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06695","severity":"P2","category":"Type","file":"server/src/routes/events.ts","line":96,"code":"if (startDate) (query.ts as Record<string, Date>).$gte = new Date(startDate as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06696","severity":"P2","category":"Type","file":"server/src/routes/events.ts","line":97,"code":"if (endDate) (query.ts as Record<string, Date>).$lte = new Date(endDate as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06697","severity":"P2","category":"Type","file":"server/src/routes/events.ts","line":100,"code":"const pageNum = parseInt(page as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06698","severity":"P2","category":"Type","file":"server/src/routes/events.ts","line":101,"code":"const limitNum = parseInt(limit as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06699","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":18,"code":"const health: any = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06700","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":24,"code":"mongodb: undefined as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06701","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":24,"code":"mongodb: undefined as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06702","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":25,"code":"redis: undefined as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06703","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":25,"code":"redis: undefined as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06704","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":26,"code":"memory: undefined as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06705","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":26,"code":"memory: undefined as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06706","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":27,"code":"cpu: undefined as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06707","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":27,"code":"cpu: undefined as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06708","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":28,"code":"disk: undefined as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06709","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":28,"code":"disk: undefined as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06710","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":29,"code":"aiService: undefined as any","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06711","severity":"P2","category":"Type","file":"server/src/routes/health.ts","line":29,"code":"aiService: undefined as any","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06712","severity":"P2","category":"Type","file":"server/src/routes/home.ts","line":16,"code":"const userId = (req as any).userId;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06713","severity":"P2","category":"Type","file":"server/src/routes/home.ts","line":16,"code":"const userId = (req as any).userId;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06714","severity":"P2","category":"Type","file":"server/src/routes/home.ts","line":52,"code":"audience: { $in: [\"global\", (req as any).userId] }","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06715","severity":"P2","category":"Type","file":"server/src/routes/home.ts","line":52,"code":"audience: { $in: [\"global\", (req as any).userId] }","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06716","severity":"P2","category":"Type","file":"server/src/routes/home.ts","line":68,"code":"audience: { $in: [\"global\", (req as any).userId] }","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06717","severity":"P2","category":"Type","file":"server/src/routes/home.ts","line":68,"code":"audience: { $in: [\"global\", (req as any).userId] }","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06718","severity":"P2","category":"Type","file":"server/src/routes/live.ts","line":18,"code":"const { title, tags, coverUrl } = req.body as { title?: string; tags?: string[]; coverUrl?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06719","severity":"P2","category":"Type","file":"server/src/routes/live.ts","line":209,"code":"return res.status(400).json({ error: \"Stream has no room name\" });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06720","severity":"P2","category":"Type","file":"server/src/routes/livekitWebhooks.ts","line":81,"code":"const signature = req.headers[\"x-livekit-signature\"] as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06721","severity":"P2","category":"Type","file":"server/src/routes/map.ts","line":141,"code":"[parseFloat(longitude as string), parseFloat(latitude as string)],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06722","severity":"P2","category":"Type","file":"server/src/routes/map.ts","line":142,"code":"parseFloat(radius as string) / 6371000","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06723","severity":"P2","category":"Type","file":"server/src/routes/mapActivity.ts","line":102,"code":"coordinates: [parseFloat(longitude as string), parseFloat(latitude as string)]","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06724","severity":"P2","category":"Type","file":"server/src/routes/mapActivity.ts","line":104,"code":"$maxDistance: parseInt(maxDistance as string)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06725","severity":"P2","category":"Type","file":"server/src/routes/matches.search.ts","line":18,"code":"const { q, species, maxKm, sort } = req.query as { q?: string; species?: string; maxKm?: string; sort?: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06726","severity":"P2","category":"Type","file":"server/src/routes/moderationAdmin.ts","line":45,"code":".sort({ [sortBy as string]: sortOrder === 'asc' ? 1 : -1 })","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06727","severity":"P2","category":"Type","file":"server/src/routes/moderationAdmin.ts","line":46,"code":".limit(parseInt(limit as string))","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06728","severity":"P2","category":"Type","file":"server/src/routes/moderationAdmin.ts","line":47,"code":".skip(parseInt(skip as string))","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06729","severity":"P2","category":"Type","file":"server/src/routes/moderationAdmin.ts","line":51,"code":".lean() as Promise<unknown[]>,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06730","severity":"P2","category":"Type","file":"server/src/routes/moderationAdmin.ts","line":53,"code":"]) as [unknown[], number];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06731","severity":"P2","category":"Type","file":"server/src/routes/moderationAdmin.ts","line":74,"code":"updates.resolvedBy = (req as AuthenticatedRequest).user?._id;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06732","severity":"P2","category":"Type","file":"server/src/routes/notifications.ts","line":154,"code":"* @desc    Mark notification as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06733","severity":"P2","category":"Type","file":"server/src/routes/notifications.ts","line":167,"code":"message: 'Failed to mark notification as read',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06734","severity":"P2","category":"Type","file":"server/src/routes/personality.ts","line":414,"code":"const typedPet = pet as Record<string, unknown> & {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06735","severity":"P2","category":"Type","file":"server/src/routes/petActivity.ts","line":1,"code":"import { Router, type Request, type Response, type Router as ExpressRouter } from \"express\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06736","severity":"P2","category":"Type","file":"server/src/routes/reels.ts","line":56,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06737","severity":"P2","category":"Type","file":"server/src/routes/reels.ts","line":82,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06738","severity":"P2","category":"Type","file":"server/src/routes/reels.ts","line":102,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06739","severity":"P2","category":"Type","file":"server/src/routes/reels.ts","line":126,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06740","severity":"P2","category":"Type","file":"server/src/routes/reels.ts","line":159,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06741","severity":"P2","category":"Type","file":"server/src/routes/reels.ts","line":170,"code":"const limit = parseInt(req.query.limit as string) || 20;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06742","severity":"P2","category":"Type","file":"server/src/routes/reels.ts","line":171,"code":"const skip = parseInt(req.query.skip as string) || 0;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06743","severity":"P2","category":"Type","file":"server/src/routes/reels.ts","line":179,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06744","severity":"P2","category":"Type","file":"server/src/routes/reels.ts","line":204,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06745","severity":"P2","category":"Type","file":"server/src/routes/reels.ts","line":211,"code":"* Callback from render worker to mark reel as public","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06746","severity":"P2","category":"Type","file":"server/src/routes/reels.ts","line":224,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06747","severity":"P3","category":"Type","file":"server/src/routes/revenuecat.ts","line":20,"code":"console.log(`Premium status updated for ${app_user_id}: ${premium}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-06748","severity":"P2","category":"Type","file":"server/src/routes/settings.ts","line":13,"code":"const userId = (req as AuthenticatedRequest).userId;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06749","severity":"P2","category":"Type","file":"server/src/routes/settings.ts","line":49,"code":"const userId = (req as AuthenticatedRequest).userId;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06750","severity":"P2","category":"Type","file":"server/src/routes/templates.ts","line":19,"code":"const params: any[] = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06751","severity":"P2","category":"Type","file":"server/src/routes/templates.ts","line":39,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06752","severity":"P2","category":"Type","file":"server/src/routes/templates.ts","line":65,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06753","severity":"P2","category":"Type","file":"server/src/routes/tracks.ts","line":20,"code":"const params: any[] = [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06754","severity":"P2","category":"Type","file":"server/src/routes/tracks.ts","line":45,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06755","severity":"P2","category":"Type","file":"server/src/routes/tracks.ts","line":64,"code":"return res.status(403).json({ error: 'Track license has expired' });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06756","severity":"P2","category":"Type","file":"server/src/routes/tracks.ts","line":78,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06757","severity":"P2","category":"Type","file":"server/src/routes/upload.ts","line":22,"code":"const { contentType } = req.body as { contentType: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06758","severity":"P2","category":"Type","file":"server/src/routes/upload.ts","line":23,"code":"const key = generateKey((req as any).userId, extFromMime(contentType));","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06759","severity":"P2","category":"Type","file":"server/src/routes/upload.ts","line":23,"code":"const key = generateKey((req as any).userId, extFromMime(contentType));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06760","severity":"P2","category":"Type","file":"server/src/routes/upload.ts","line":32,"code":"const { key, uploadId, partNumber } = req.query as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06761","severity":"P2","category":"Type","file":"server/src/routes/upload.ts","line":32,"code":"const { key, uploadId, partNumber } = req.query as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06762","severity":"P2","category":"Type","file":"server/src/routes/upload.ts","line":41,"code":"const { key, uploadId, parts } = req.body as {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06763","severity":"P2","category":"Type","file":"server/src/routes/uploadPhoto.ts","line":3,"code":"import { v2 as cloudinary } from 'cloudinary';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06764","severity":"P2","category":"Type","file":"server/src/routes/uploads.ts","line":36,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06765","severity":"P2","category":"Type","file":"server/src/routes/usageTracking.ts","line":86,"code":"const result = await UsageTrackingService.getUsageStats(userId as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06766","severity":"P2","category":"Type","file":"server/src/routes/verification.ts","line":153,"code":"* Check if user has required tier","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06767","severity":"P2","category":"Type","file":"server/src/routes/verification.ts","line":163,"code":"const userHasTier = await hasTier(userId, tier as 'tier1' | 'tier2' | 'tier3' | 'tier4');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06768","severity":"P2","category":"Type","file":"server/src/routes/verification.ts","line":179,"code":"const requirements = getTierRequirements(tier as 'tier1' | 'tier2' | 'tier3' | 'tier4');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06769","severity":"P2","category":"Type","file":"server/src/routes/voiceNotes.ts","line":20,"code":"const userId = (req as any).userId;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06770","severity":"P2","category":"Type","file":"server/src/routes/voiceNotes.ts","line":20,"code":"const userId = (req as any).userId;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06771","severity":"P3","category":"Type","file":"server/src/scripts/seed-admin.ts","line":75,"code":"console.log('✅ Connected to MongoDB');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-06772","severity":"P3","category":"Type","file":"server/src/scripts/seed-admin.ts","line":82,"code":"console.log(`⚠️  Admin ${adminData.email} already exists, skipping...`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-06773","severity":"P3","category":"Type","file":"server/src/scripts/seed-admin.ts","line":95,"code":"console.log(`✅ Created admin: ${adminData.email} (role: ${adminData.role})`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-06774","severity":"P3","category":"Type","file":"server/src/scripts/seed-admin.ts","line":98,"code":"console.log('\\n🎉 Admin seeding completed!');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-06775","severity":"P3","category":"Type","file":"server/src/scripts/seed-admin.ts","line":99,"code":"console.log('\\n📋 Login Credentials:');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-06776","severity":"P3","category":"Type","file":"server/src/scripts/seed-admin.ts","line":100,"code":"console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-06777","severity":"P3","category":"Type","file":"server/src/scripts/seed-admin.ts","line":102,"code":"console.log(`Email: ${admin.email} / Password: ${admin.password}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-06778","severity":"P3","category":"Type","file":"server/src/scripts/seed-admin.ts","line":104,"code":"console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-06779","severity":"P2","category":"Type","file":"server/src/services/adminNotificationService.ts","line":3,"code":"import * as nodemailer from 'nodemailer';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06780","severity":"P2","category":"Type","file":"server/src/services/adminNotificationService.ts","line":165,"code":"const minSeverity = (process.env.ADMIN_NOTIFICATION_MIN_SEVERITY || 'high') as SeverityLevel;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06781","severity":"P2","category":"Type","file":"server/src/services/adminNotificationService.ts","line":301,"code":"// Don't throw error here as notification was already sent","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06782","severity":"P2","category":"Type","file":"server/src/services/adminNotifications.ts","line":6,"code":"import type { Server as SocketIOServer, Socket } from 'socket.io';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06783","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":6,"code":"import { Server as HTTPServer } from 'http';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06784","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":21,"code":"data?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06785","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":60,"code":"private verifyClient(info: any, callback: (result: boolean, code?: number, reason?: string) => void): void {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06786","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":63,"code":"const token = params.token as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06787","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":71,"code":"const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06788","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":91,"code":"private async handleConnection(ws: WebSocket, req: any): Promise<void> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06789","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":99,"code":"// Verify user has admin role","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06790","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":149,"code":"const data = JSON.parse(message.toString()) as WebSocketMessage;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06791","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":239,"code":"notifyNewReport(report: any): void {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06792","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":250,"code":"notifyContentFlagged(data: any): void {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06793","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":253,"code":"message: 'Content has been flagged',","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06794","severity":"P2","category":"Type","file":"server/src/services/adminWebSocket.ts","line":261,"code":"notifyUserAction(data: any): void {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06795","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":24,"code":"location?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06796","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":25,"code":"owner_id?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06797","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":31,"code":"preferences: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06798","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":32,"code":"location: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06799","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":97,"code":"preferences: (user as any).preferences,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06800","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":97,"code":"preferences: (user as any).preferences,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06801","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":98,"code":"location: (user as any).location,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06802","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":98,"code":"location: (user as any).location,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06803","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":99,"code":"pets: (user as any).pets.map((pet: any) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06804","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":99,"code":"pets: (user as any).pets.map((pet: any) => ({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06805","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":117,"code":"location: (pet as any).location,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06806","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":117,"code":"location: (pet as any).location,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06807","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":137,"code":"logger.error('AI Service Error:', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06808","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":162,"code":"const recommendations: AIRecommendation[] = candidatePets.map((pet: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06809","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":167,"code":"if ((user as any).preferences?.species?.includes(pet.species)) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06810","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":167,"code":"if ((user as any).preferences?.species?.includes(pet.species)) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06811","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":173,"code":"if ((user as any).pets.some((userPet: any) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06812","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":173,"code":"if ((user as any).pets.some((userPet: any) =>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06813","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":183,"code":"if ((user as any).preferences?.ageRange &&","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06814","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":183,"code":"if ((user as any).preferences?.ageRange &&","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06815","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":184,"code":"pet.age >= (user as any).preferences.ageRange.min &&","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06816","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":184,"code":"pet.age >= (user as any).preferences.ageRange.min &&","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06817","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":185,"code":"pet.age <= (user as any).preferences.ageRange.max) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06818","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":185,"code":"pet.age <= (user as any).preferences.ageRange.max) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06819","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":192,"code":"const userPetSizes = (user as any).pets.map((p: any) => p.size);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06820","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":192,"code":"const userPetSizes = (user as any).pets.map((p: any) => p.size);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06821","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":200,"code":"if ((user as any).pets.some((userPet: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06822","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":200,"code":"if ((user as any).pets.some((userPet: any) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06823","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":268,"code":"if ((response.data as any).success) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06824","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":268,"code":"if ((response.data as any).success) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06825","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":272,"code":"'aiData.personalityScore': (response.data as any).personality_score,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06826","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":272,"code":"'aiData.personalityScore': (response.data as any).personality_score,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06827","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":273,"code":"'aiData.compatibilityTags': (response.data as any).compatibility_tags,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06828","severity":"P2","category":"Type","file":"server/src/services/aiService.ts","line":273,"code":"'aiData.compatibilityTags': (response.data as any).compatibility_tags,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06829","severity":"P2","category":"Type","file":"server/src/services/analytics.ts","line":36,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06830","severity":"P2","category":"Type","file":"server/src/services/analytics.ts","line":49,"code":"const match: any = { ts: { $gte: since } };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06831","severity":"P2","category":"Type","file":"server/src/services/analytics.ts","line":62,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06832","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":77,"code":"lastMessage?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06833","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":88,"code":"lastMessage?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06834","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":137,"code":"(user.analytics as any).lastActive = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06835","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":137,"code":"(user.analytics as any).lastActive = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06836","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":140,"code":"(user.analytics as any).totalPetsCreated = ((user.analytics as any).totalPetsCreated || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06837","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":140,"code":"(user.analytics as any).totalPetsCreated = ((user.analytics as any).totalPetsCreated || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06838","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":144,"code":"(user.analytics as any).totalLikes = ((user.analytics as any).totalLikes || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06839","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":144,"code":"(user.analytics as any).totalLikes = ((user.analytics as any).totalLikes || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06840","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":147,"code":"(user.analytics as any).totalMatches = ((user.analytics as any).totalMatches || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06841","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":147,"code":"(user.analytics as any).totalMatches = ((user.analytics as any).totalMatches || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06842","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":150,"code":"(user.analytics as any).totalMessagesSent = ((user.analytics as any).totalMessagesSent || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06843","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":150,"code":"(user.analytics as any).totalMessagesSent = ((user.analytics as any).totalMessagesSent || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06844","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":153,"code":"(user.analytics as any).totalSubscriptionsStarted = ((user.analytics as any).totalSubscriptionsStarted || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06845","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":153,"code":"(user.analytics as any).totalSubscriptionsStarted = ((user.analytics as any).totalSubscriptionsStarted || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06846","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":156,"code":"(user.analytics as any).totalSubscriptionsCancelled = ((user.analytics as any).totalSubscriptionsCancelled || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06847","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":156,"code":"(user.analytics as any).totalSubscriptionsCancelled = ((user.analytics as any).totalSubscriptionsCancelled || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06848","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":159,"code":"(user.analytics as any).totalPremiumFeaturesUsed = ((user.analytics as any).totalPremiumFeaturesUsed || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06849","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":159,"code":"(user.analytics as any).totalPremiumFeaturesUsed = ((user.analytics as any).totalPremiumFeaturesUsed || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06850","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":166,"code":"(user.analytics as any).events = (user.analytics as any).events || [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06851","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":166,"code":"(user.analytics as any).events = (user.analytics as any).events || [];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06852","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":167,"code":"(user.analytics as any).events.push({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06853","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":167,"code":"(user.analytics as any).events.push({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06854","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":174,"code":"if ((user.analytics as any).events.length > 100) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06855","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":174,"code":"if ((user.analytics as any).events.length > 100) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06856","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":175,"code":"(user.analytics as any).events = (user.analytics as any).events.slice(-100);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06857","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":175,"code":"(user.analytics as any).events = (user.analytics as any).events.slice(-100);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06858","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":184,"code":"error: (error as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06859","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":185,"code":"stack: (error as Error).stack,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06860","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":228,"code":"(pet.analytics as any).views = ((pet.analytics as any).views || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06861","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":228,"code":"(pet.analytics as any).views = ((pet.analytics as any).views || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06862","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":229,"code":"(pet.analytics as any).lastViewed = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06863","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":229,"code":"(pet.analytics as any).lastViewed = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06864","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":232,"code":"(pet.analytics as any).likes = ((pet.analytics as any).likes || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06865","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":232,"code":"(pet.analytics as any).likes = ((pet.analytics as any).likes || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06866","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":235,"code":"(pet.analytics as any).superLikes = ((pet.analytics as any).superLikes || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06867","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":235,"code":"(pet.analytics as any).superLikes = ((pet.analytics as any).superLikes || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06868","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":238,"code":"(pet.analytics as any).matches = ((pet.analytics as any).matches || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06869","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":238,"code":"(pet.analytics as any).matches = ((pet.analytics as any).matches || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06870","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":241,"code":"(pet.analytics as any).messages = ((pet.analytics as any).messages || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06871","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":241,"code":"(pet.analytics as any).messages = ((pet.analytics as any).messages || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06872","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":246,"code":"(pet.analytics as any).events = (pet.analytics as any).events || [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06873","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":246,"code":"(pet.analytics as any).events = (pet.analytics as any).events || [];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06874","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":247,"code":"(pet.analytics as any).events.push({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06875","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":247,"code":"(pet.analytics as any).events.push({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06876","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":255,"code":"if ((pet.analytics as any).events.length > 50) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06877","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":255,"code":"if ((pet.analytics as any).events.length > 50) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06878","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":256,"code":"(pet.analytics as any).events = (pet.analytics as any).events.slice(-50);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06879","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":256,"code":"(pet.analytics as any).events = (pet.analytics as any).events.slice(-50);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06880","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":262,"code":"error: (error as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06881","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":263,"code":"stack: (error as Error).stack,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06882","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":295,"code":"(match.analytics as any).events = (match.analytics as any).events || [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06883","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":295,"code":"(match.analytics as any).events = (match.analytics as any).events || [];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06884","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":296,"code":"(match.analytics as any).events.push({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06885","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":296,"code":"(match.analytics as any).events.push({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06886","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":304,"code":"if ((match.analytics as any).events.length > 20) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06887","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":304,"code":"if ((match.analytics as any).events.length > 20) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06888","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":305,"code":"(match.analytics as any).events = (match.analytics as any).events.slice(-20);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06889","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":305,"code":"(match.analytics as any).events = (match.analytics as any).events.slice(-20);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06890","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":311,"code":"error: (error as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06891","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":312,"code":"stack: (error as Error).stack,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06892","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":356,"code":"const recentEvents = ((user.analytics as any)?.events || []).filter((event: AnalyticsEvent) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06893","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":356,"code":"const recentEvents = ((user.analytics as any)?.events || []).filter((event: AnalyticsEvent) =>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06894","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":361,"code":"totalSwipes: (user.analytics as any)?.totalSwipes || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06895","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":361,"code":"totalSwipes: (user.analytics as any)?.totalSwipes || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06896","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":362,"code":"totalLikes: (user.analytics as any)?.totalLikes || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06897","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":362,"code":"totalLikes: (user.analytics as any)?.totalLikes || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06898","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":363,"code":"totalMatches: (user.analytics as any)?.totalMatches || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06899","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":363,"code":"totalMatches: (user.analytics as any)?.totalMatches || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06900","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":364,"code":"profileViews: (user.analytics as any)?.profileViews || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06901","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":364,"code":"profileViews: (user.analytics as any)?.profileViews || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06902","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":365,"code":"lastActive: (user.analytics as any)?.lastActive,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06903","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":365,"code":"lastActive: (user.analytics as any)?.lastActive,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06904","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":366,"code":"totalPetsCreated: (user.analytics as any)?.totalPetsCreated || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06905","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":366,"code":"totalPetsCreated: (user.analytics as any)?.totalPetsCreated || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06906","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":367,"code":"totalMessagesSent: (user.analytics as any)?.totalMessagesSent || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06907","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":367,"code":"totalMessagesSent: (user.analytics as any)?.totalMessagesSent || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06908","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":368,"code":"totalSubscriptionsStarted: (user.analytics as any)?.totalSubscriptionsStarted || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06909","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":368,"code":"totalSubscriptionsStarted: (user.analytics as any)?.totalSubscriptionsStarted || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06910","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":369,"code":"totalSubscriptionsCancelled: (user.analytics as any)?.totalSubscriptionsCancelled || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06911","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":369,"code":"totalSubscriptionsCancelled: (user.analytics as any)?.totalSubscriptionsCancelled || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06912","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":370,"code":"totalPremiumFeaturesUsed: (user.analytics as any)?.totalPremiumFeaturesUsed || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06913","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":370,"code":"totalPremiumFeaturesUsed: (user.analytics as any)?.totalPremiumFeaturesUsed || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06914","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":378,"code":"error: (error as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06915","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":379,"code":"stack: (error as Error).stack,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06916","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":400,"code":"views: (pet.analytics as any)?.views || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06917","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":400,"code":"views: (pet.analytics as any)?.views || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06918","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":401,"code":"likes: (pet.analytics as any)?.likes || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06919","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":401,"code":"likes: (pet.analytics as any)?.likes || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06920","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":402,"code":"superLikes: (pet.analytics as any)?.superLikes || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06921","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":402,"code":"superLikes: (pet.analytics as any)?.superLikes || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06922","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":403,"code":"matches: (pet.analytics as any)?.matches || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06923","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":403,"code":"matches: (pet.analytics as any)?.matches || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06924","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":404,"code":"messages: (pet.analytics as any)?.messages || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06925","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":404,"code":"messages: (pet.analytics as any)?.messages || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06926","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":405,"code":"lastViewed: (pet.analytics as any)?.lastViewed,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06927","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":405,"code":"lastViewed: (pet.analytics as any)?.lastViewed,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06928","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":406,"code":"events: (pet.analytics as any)?.events || [],","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06929","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":406,"code":"events: (pet.analytics as any)?.events || [],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06930","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":410,"code":"error: (error as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06931","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":411,"code":"stack: (error as Error).stack,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06932","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":464,"code":"const activeMatches = matches.filter((match: any) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06933","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":468,"code":"const totalMessages = matches.reduce((sum, match: any) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06934","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":469,"code":"sum + ((match.analytics?.events?.filter((event: any) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06935","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":481,"code":"matches: matches.map((match: any) => ({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06936","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":495,"code":"events: (match.analytics as any)?.events || [],","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06937","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":495,"code":"events: (match.analytics as any)?.events || [],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06938","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":496,"code":"pet1Name: (match as any).pet1.name,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06939","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":496,"code":"pet1Name: (match as any).pet1.name,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06940","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":497,"code":"pet2Name: (match as any).pet2.name,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06941","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":497,"code":"pet2Name: (match as any).pet2.name,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06942","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":499,"code":"lastMessage: (match as any).lastMessage,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06943","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":499,"code":"lastMessage: (match as any).lastMessage,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06944","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":504,"code":"error: (error as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06945","severity":"P2","category":"Type","file":"server/src/services/analyticsService.ts","line":505,"code":"stack: (error as Error).stack,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06946","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":19,"code":"condition?: (data: any) => boolean;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06947","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":36,"code":"content: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06948","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":37,"code":"user: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06949","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":70,"code":"severity: 'medium' as SeverityLevel,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06950","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":71,"code":"action: 'flag' as ActionType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06951","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":76,"code":"severity: 'medium' as SeverityLevel,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06952","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":77,"code":"action: 'flag' as ActionType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06953","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":82,"code":"severity: 'high' as SeverityLevel,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06954","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":83,"code":"action: 'quarantine' as ActionType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06955","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":88,"code":"severity: 'critical' as SeverityLevel,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06956","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":89,"code":"action: 'escalate' as ActionType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06957","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":94,"code":"severity: 'critical' as SeverityLevel,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06958","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":95,"code":"action: 'escalate' as ActionType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06959","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":97,"code":"] as ModerationRule[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06960","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":104,"code":"severity: 'critical' as SeverityLevel,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06961","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":105,"code":"action: 'escalate' as ActionType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06962","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":110,"code":"severity: 'high' as SeverityLevel,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06963","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":111,"code":"action: 'quarantine' as ActionType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06964","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":116,"code":"severity: 'critical' as SeverityLevel,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06965","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":117,"code":"action: 'escalate' as ActionType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06966","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":119,"code":"] as ModerationRule[],","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06967","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":125,"code":"condition: (user: any) => user.postsLast24h > 20,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06968","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":126,"code":"severity: 'medium' as SeverityLevel,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06969","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":127,"code":"action: 'flag' as ActionType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06970","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":131,"code":"condition: (user: any) => user.reportsReceived > 5,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06971","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":132,"code":"severity: 'high' as SeverityLevel,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06972","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":133,"code":"action: 'quarantine' as ActionType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06973","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":137,"code":"condition: (user: any) => user.accountAgeDays < 7 && user.postsCount > 10,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06974","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":138,"code":"severity: 'medium' as SeverityLevel,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06975","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":139,"code":"action: 'flag' as ActionType","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06976","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":141,"code":"] as ModerationRule[]","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06977","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":220,"code":"async analyzeImages(images: any[]): Promise<ModerationFlag[]> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06978","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":244,"code":"async analyzeUserBehavior(user: any): Promise<ModerationFlag[]> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06979","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":278,"code":"async applyModeration(contentId: string, contentType: ContentType, flags: ModerationFlag[], content: any, user: any): Promise<void> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06980","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":313,"code":"(moderationRecord.automatedFlags as any[]).push(...flags);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06981","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":313,"code":"(moderationRecord.automatedFlags as any[]).push(...flags);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06982","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":314,"code":"moderationRecord.priority = highestSeverity === 'critical' ? 'urgent' as any :","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06983","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":314,"code":"moderationRecord.priority = highestSeverity === 'critical' ? 'urgent' as any :","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06984","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":315,"code":"highestSeverity === 'high' ? 'high' as any : 'medium' as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06985","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":315,"code":"highestSeverity === 'high' ? 'high' as any : 'medium' as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06986","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":316,"code":"(moderationRecord as any).moderationLevel = highestSeverity === 'critical' ? 'senior_review' : 'human_review';","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06987","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":316,"code":"(moderationRecord as any).moderationLevel = highestSeverity === 'critical' ? 'senior_review' : 'human_review';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06988","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":323,"code":"(moderationRecord as any).escalatedAt = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06989","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":323,"code":"(moderationRecord as any).escalatedAt = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06990","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":324,"code":"(moderationRecord as any).escalationReason = `Automated detection: ${criticalFlags.map(f => f.ruleName).join(', ')}`;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06991","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":324,"code":"(moderationRecord as any).escalationReason = `Automated detection: ${criticalFlags.map(f => f.ruleName).join(', ')}`;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06992","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":325,"code":"(moderationRecord as any).escalationLevel = 'legal';","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06993","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":325,"code":"(moderationRecord as any).escalationLevel = 'legal';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-06994","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":348,"code":"createContentSnapshot(content: any, contentType: ContentType): ContentSnapshot {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06995","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":361,"code":"snapshot.mediaUrls = content.photos ? content.photos.map((p: any) => p.url) : [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06996","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":373,"code":"snapshot.mediaUrls = content.media ? content.media.map((m: any) => m.url) : [];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06997","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":391,"code":"let Model: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06998","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":406,"code":"const updateData: any = { moderationStatus: status };","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-06999","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":456,"code":"async moderateContent(contentId: string, contentType: ContentType, content: any, user: any): Promise<ModerationResult> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07000","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":468,"code":"let content: any, user: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07001","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":474,"code":"user = (content as any)?.owner;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07002","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":474,"code":"user = (content as any)?.owner;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07003","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":478,"code":"user = (content as any)?.author;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07004","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":478,"code":"user = (content as any)?.author;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07005","severity":"P2","category":"Type","file":"server/src/services/automatedModeration.ts","line":498,"code":"results.push({ contentId, success: false, error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07006","severity":"P2","category":"Type","file":"server/src/services/chatService.ts","line":4,"code":"import type { Server as SocketIOServer } from 'socket.io';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07007","severity":"P2","category":"Type","file":"server/src/services/chatService.ts","line":9,"code":"message: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07008","severity":"P2","category":"Type","file":"server/src/services/chatService.ts","line":18,"code":"export async function ensureConversation(userA: string, userB: string): Promise<any> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07009","severity":"P2","category":"Type","file":"server/src/services/chatService.ts","line":22,"code":"logger.error('Failed to ensure conversation', { err: (err as Error)?.message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07010","severity":"P2","category":"Type","file":"server/src/services/chatService.ts","line":73,"code":"title: `New reply from ${(replier as any).firstName || 'Someone'}`,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07011","severity":"P2","category":"Type","file":"server/src/services/chatService.ts","line":73,"code":"title: `New reply from ${(replier as any).firstName || 'Someone'}`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07012","severity":"P2","category":"Type","file":"server/src/services/chatService.ts","line":81,"code":"error: (socketErr as Error)?.message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07013","severity":"P2","category":"Type","file":"server/src/services/chatService.ts","line":87,"code":"logger.error('createDMFromStoryReply error', { error: (error as Error)?.message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07014","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":7,"code":"import type { Server as SocketIOServer, Socket } from 'socket.io';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07015","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":57,"code":"attachments?: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07016","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":100,"code":"const handshake = socket.handshake as SocketHandshake;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07017","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":107,"code":"const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07018","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":115,"code":"(socket as any).userId = user._id.toString();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07019","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":115,"code":"(socket as any).userId = user._id.toString();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07020","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":116,"code":"(socket as any).user = user;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07021","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":116,"code":"(socket as any).user = user;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07022","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":126,"code":"const user = (socket as any).user as SocketUser;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07023","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":126,"code":"const user = (socket as any).user as SocketUser;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07024","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":127,"code":"const userId = (socket as any).userId as string;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07025","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":127,"code":"const userId = (socket as any).userId as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07026","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":155,"code":"if ((match as any).isUserBlocked(userId)) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07027","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":155,"code":"if ((match as any).isUserBlocked(userId)) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07028","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":163,"code":"// Mark messages as read","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07029","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":164,"code":"await (match as any).markMessagesAsRead(userId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07030","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":164,"code":"await (match as any).markMessagesAsRead(userId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07031","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":244,"code":"if ((match as any).isUserBlocked(userId)) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07032","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":244,"code":"if ((match as any).isUserBlocked(userId)) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07033","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":251,"code":"const replyMessage = (match as any).messages.id(replyTo);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07034","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":251,"code":"const replyMessage = (match as any).messages.id(replyTo);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07035","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":274,"code":"(match as any).messages.push(message);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07036","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":274,"code":"(match as any).messages.push(message);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07037","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":276,"code":"(match as any).lastMessageAt = new Date();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07038","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":276,"code":"(match as any).lastMessageAt = new Date();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07039","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":280,"code":"const savedMessage = (match as any).messages[(match as any).messages.length - 1];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07040","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":280,"code":"const savedMessage = (match as any).messages[(match as any).messages.length - 1];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07041","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":285,"code":"const replyMessage = (match as any).messages.id(replyTo);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07042","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":285,"code":"const replyMessage = (match as any).messages.id(replyTo);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07043","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":316,"code":"if ((otherUser as any).preferences?.notifications?.messages) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07044","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":316,"code":"if ((otherUser as any).preferences?.notifications?.messages) {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07045","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":360,"code":"const message = (match as any).messages.id(messageId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07046","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":360,"code":"const message = (match as any).messages.id(messageId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07047","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":381,"code":"await (message as any).populate('sender', 'firstName lastName avatar');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07048","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":381,"code":"await (message as any).populate('sender', 'firstName lastName avatar');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07049","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":413,"code":"const message = (match as any).messages.id(messageId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07050","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":413,"code":"const message = (match as any).messages.id(messageId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07051","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":426,"code":"// Mark as deleted","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07052","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":429,"code":"message.content = 'This message was deleted';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07053","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":463,"code":"const message = (match as any).messages.id(messageId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07054","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":463,"code":"const message = (match as any).messages.id(messageId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07055","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":470,"code":"const existingReaction = (message as any).reactions.find((r: any) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07056","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":470,"code":"const existingReaction = (message as any).reactions.find((r: any) =>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07057","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":480,"code":"(message as any).reactions.push({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07058","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":480,"code":"(message as any).reactions.push({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07059","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":489,"code":"const newReaction = (message as any).reactions[(message as any).reactions.length - 1];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07060","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":489,"code":"const newReaction = (message as any).reactions[(message as any).reactions.length - 1];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07061","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":490,"code":"await (newReaction as any).populate('user', 'firstName lastName avatar');","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07062","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":490,"code":"await (newReaction as any).populate('user', 'firstName lastName avatar');","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07063","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":522,"code":"const message = (match as any).messages.id(messageId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07064","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":522,"code":"const message = (match as any).messages.id(messageId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07065","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":529,"code":"const reactionIndex = (message as any).reactions.findIndex((r: any) =>","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07066","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":529,"code":"const reactionIndex = (message as any).reactions.findIndex((r: any) =>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07067","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":538,"code":"(message as any).reactions.splice(reactionIndex, 1);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07068","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":538,"code":"(message as any).reactions.splice(reactionIndex, 1);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07069","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":600,"code":"await (match as any).markMessagesAsRead(userId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07070","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":600,"code":"await (match as any).markMessagesAsRead(userId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07071","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":636,"code":"await (match as any).toggleArchive(userId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07072","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":636,"code":"await (match as any).toggleArchive(userId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07073","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":642,"code":"await (match as any).toggleArchive(userId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07074","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":642,"code":"await (match as any).toggleArchive(userId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07075","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":648,"code":"await (match as any).toggleFavorite(userId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07076","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":648,"code":"await (match as any).toggleFavorite(userId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07077","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":653,"code":"await (match as any).toggleFavorite(userId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07078","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":653,"code":"await (match as any).toggleFavorite(userId);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07079","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":659,"code":"(match as any).userActions[userKey].isBlocked = true;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07080","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":659,"code":"(match as any).userActions[userKey].isBlocked = true;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07081","severity":"P1","category":"Type","file":"server/src/services/chatSocket.ts","line":694,"code":"}).catch((error) => logger.error('Presence update error:', { error }));","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-07082","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":771,"code":"(chatSocket as any).getOnlineUsers = (): Array<{ userId: string; lastSeen: Date }> => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07083","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":771,"code":"(chatSocket as any).getOnlineUsers = (): Array<{ userId: string; lastSeen: Date }> => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07084","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":780,"code":"(chatSocket as any).getTypingUsers = (matchId: string): Array<{ userId: string; userName: string; timestamp: number }> => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07085","severity":"P2","category":"Type","file":"server/src/services/chatSocket.ts","line":780,"code":"(chatSocket as any).getTypingUsers = (matchId: string): Array<{ userId: string; userName: string; timestamp: number }> => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07086","severity":"P2","category":"Type","file":"server/src/services/cloudinaryService.ts","line":1,"code":"import { v2 as cloudinary } from 'cloudinary';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07087","severity":"P2","category":"Type","file":"server/src/services/cloudinaryService.ts","line":15,"code":"transformation?: any[];","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07088","severity":"P2","category":"Type","file":"server/src/services/cloudinaryService.ts","line":65,"code":"logger.error('Image upload failed', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07089","severity":"P2","category":"Type","file":"server/src/services/cloudinaryService.ts","line":82,"code":"logger.error('Video upload failed', { error: (error as Error).message });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07090","severity":"P2","category":"Type","file":"server/src/services/cloudinaryService.ts","line":94,"code":"logger.error('Cloudinary delete error', { error: (error as Error).message, publicId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07091","severity":"P2","category":"Type","file":"server/src/services/deletionService.ts","line":23,"code":"* This should be run as a scheduled background job (e.g., daily)","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07092","severity":"P2","category":"Type","file":"server/src/services/deletionService.ts","line":85,"code":"conv.messages = conv.messages.filter((msg: any) => msg.sender?.toString() !== userId);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07093","severity":"P2","category":"Type","file":"server/src/services/deletionService.ts","line":107,"code":"// TODO: Add other models as needed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07094","severity":"P2","category":"Type","file":"server/src/services/deletionService.ts","line":109,"code":"// 7. Update user to mark deletion as completed","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07095","severity":"P2","category":"Type","file":"server/src/services/emailService.ts","line":1,"code":"import * as nodemailer from 'nodemailer';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07096","severity":"P2","category":"Type","file":"server/src/services/emailService.ts","line":272,"code":"const { subject, html } = templateFunc(options.data as any);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07097","severity":"P2","category":"Type","file":"server/src/services/emailService.ts","line":272,"code":"const { subject, html } = templateFunc(options.data as any);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07098","severity":"P2","category":"Type","file":"server/src/services/emailTemplates.ts","line":17,"code":"[key: string]: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07099","severity":"P2","category":"Type","file":"server/src/services/emailTemplates.ts","line":156,"code":"<p>Your pet has found a potential friend!</p>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07100","severity":"P2","category":"Type","file":"server/src/services/emailTemplates.ts","line":455,"code":"generateEmailOptions(templateName: string, data: any): {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07101","severity":"P2","category":"Type","file":"server/src/services/emailTemplates.ts","line":463,"code":"const templateMap: Record<string, (data: any) => EmailTemplate> = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07102","severity":"P2","category":"Type","file":"server/src/services/emailTemplates.ts","line":490,"code":"previewTemplate(templateName: string, data: any): EmailTemplate {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07103","severity":"P2","category":"Type","file":"server/src/services/emailTemplates.ts","line":492,"code":"const templateMap: Record<string, (data: any) => EmailTemplate> = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07104","severity":"P2","category":"Type","file":"server/src/services/emailTemplates.ts","line":511,"code":"validateEmailData(templateName: string, data: any): boolean {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07105","severity":"P2","category":"Type","file":"server/src/services/monitoring.ts","line":6,"code":"import * as winston from 'winston';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07106","severity":"P2","category":"Type","file":"server/src/services/monitoring.ts","line":7,"code":"import * as path from 'path';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07107","severity":"P2","category":"Type","file":"server/src/services/monitoring.ts","line":68,"code":"check: () => Promise<any> | any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07108","severity":"P2","category":"Type","file":"server/src/services/monitoring.ts","line":78,"code":"result?: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07109","severity":"P2","category":"Type","file":"server/src/services/monitoring.ts","line":314,"code":"const categoryKey = category as keyof typeof this.metrics;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07110","severity":"P2","category":"Type","file":"server/src/services/monitoring.ts","line":332,"code":"exportForAnalytics(analyticsService: AnalyticsServiceType = 'google'): any {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07111","severity":"P2","category":"Type","file":"server/src/services/monitoring.ts","line":347,"code":"private formatForGoogleAnalytics(data: AnalyticsData): { events: GoogleAnalyticsEvent[]; metrics: any } {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07112","severity":"P2","category":"Type","file":"server/src/services/monitoring.ts","line":406,"code":"checkFunction: () => Promise<any> | any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07113","severity":"P1","category":"Type","file":"server/src/services/monitoring.ts","line":425,"code":".then(result => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-07114","severity":"P1","category":"Type","file":"server/src/services/monitoring.ts","line":428,"code":".catch(error => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-07115","severity":"P2","category":"Type","file":"server/src/services/monitoring.ts","line":430,"code":"status: 'error' as HealthStatus,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07116","severity":"P1","category":"Type","file":"server/src/services/monitoring.ts","line":459,"code":"Promise.resolve().then(() => config.check()),","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-07117","severity":"P2","category":"Type","file":"server/src/services/monitoring.ts","line":519,"code":"// If any check has errors, overall status is degraded","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07118","severity":"P2","category":"Type","file":"server/src/services/monitoring.ts","line":539,"code":"config.lastResult || { status: 'unknown' as HealthStatus }","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07119","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":58,"code":"private retryQueue: any | null = null;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07120","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":77,"code":"const customer = await stripe.customers.retrieve(subscription.customer as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07121","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":78,"code":"const user = await User.findOne({ email: (customer as any).email });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07122","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":78,"code":"const user = await User.findOne({ email: (customer as any).email });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07123","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":142,"code":"customer: subscription.customer as string,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07124","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":177,"code":"const customer = await stripe.customers.retrieve(subscription.customer as string);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07125","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":178,"code":"const user = await User.findOne({ email: (customer as any).email });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07126","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":178,"code":"const user = await User.findOne({ email: (customer as any).email });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07127","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":210,"code":"private async handleFinalFailure(subscriptionId: string, user: any, customer: any): Promise<void> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07128","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":287,"code":"private async scheduleNotification(user: any, notificationDate: Date, attemptNumber: number, retryDate: Date): Promise<void> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07129","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":405,"code":"private async sendSuccessNotification(user: any): Promise<void> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07130","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":416,"code":"<p>Your premium subscription payment has been processed successfully.</p>","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07131","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":421,"code":"// Send push notification if user has push tokens","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07132","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":427,"code":"body: 'Your premium subscription payment has been processed successfully.'","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07133","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":462,"code":"// Send push notification if user has push tokens","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07134","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":573,"code":"logger.info('Sending notification', { notificationId: (notification as any)._id });","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07135","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":573,"code":"logger.info('Sending notification', { notificationId: (notification as any)._id });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07136","severity":"P2","category":"Type","file":"server/src/services/paymentRetryService.ts","line":629,"code":"private async getMongoClient(): Promise<any> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07137","severity":"P2","category":"Type","file":"server/src/services/perceptualHash.ts","line":10,"code":"import * as sharp from 'sharp';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07138","severity":"P2","category":"Type","file":"server/src/services/perceptualHash.ts","line":11,"code":"// @ts-ignore - Sharp module import compatibility","problem":"TypeScript suppression comment","evidence":"TypeScript suppressions hide type errors and should be avoided","fix":"Fix the underlying type issue instead of suppressing it","autofix":{"type":"manual","snippet":"Remove suppression and fix the type error"},"blast_radius":"Local","confidence":0.8,"tags":["typescript","suppression"],"owner":"server"}
{"id":"AUD-TYP-07139","severity":"P2","category":"Type","file":"server/src/services/push.ts","line":39,"code":"const result = await response.json() as { success?: number; failure?: number };","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07140","severity":"P2","category":"Type","file":"server/src/services/pushNotificationService.ts","line":67,"code":"error: (error as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07141","severity":"P2","category":"Type","file":"server/src/services/pushNotificationService.ts","line":68,"code":"stack: (error as Error).stack,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07142","severity":"P2","category":"Type","file":"server/src/services/pushNotificationService.ts","line":86,"code":"logger.debug('User has no push tokens', { userId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07143","severity":"P2","category":"Type","file":"server/src/services/pushNotificationService.ts","line":90,"code":"const tokens = user.pushTokens.map((token: any) => token.token).filter(Boolean);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07144","severity":"P2","category":"Type","file":"server/src/services/pushNotificationService.ts","line":101,"code":"error: (error as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07145","severity":"P2","category":"Type","file":"server/src/services/queue.ts","line":5,"code":"import { Queue, Worker as BullWorker } from 'bullmq';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07146","severity":"P2","category":"Type","file":"server/src/services/queue.ts","line":26,"code":"export async function getJobStatus(jobId: string): Promise<any> {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07147","severity":"P2","category":"Type","file":"server/src/services/s3Service.ts","line":79,"code":"(res.Body as any).on(\"data\", (c: Buffer) => chunks.push(Buffer.from(c)));","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07148","severity":"P2","category":"Type","file":"server/src/services/s3Service.ts","line":79,"code":"(res.Body as any).on(\"data\", (c: Buffer) => chunks.push(Buffer.from(c)));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07149","severity":"P2","category":"Type","file":"server/src/services/s3Service.ts","line":80,"code":"(res.Body as any).on(\"end\", () => resolve());","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07150","severity":"P2","category":"Type","file":"server/src/services/s3Service.ts","line":80,"code":"(res.Body as any).on(\"end\", () => resolve());","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07151","severity":"P2","category":"Type","file":"server/src/services/s3Service.ts","line":81,"code":"(res.Body as any).on(\"error\", reject);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07152","severity":"P2","category":"Type","file":"server/src/services/s3Service.ts","line":81,"code":"(res.Body as any).on(\"error\", reject);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07153","severity":"P2","category":"Type","file":"server/src/services/s3Service.ts","line":85,"code":"chunks.push(Buffer.from(await (res.Body as any).transformToByteArray()));","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07154","severity":"P2","category":"Type","file":"server/src/services/s3Service.ts","line":85,"code":"chunks.push(Buffer.from(await (res.Body as any).transformToByteArray()));","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07155","severity":"P2","category":"Type","file":"server/src/services/safetyModeration.ts","line":8,"code":"import * as Rekognition from '@aws-sdk/client-rekognition';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07156","severity":"P2","category":"Type","file":"server/src/services/safetyModeration.ts","line":9,"code":"// @ts-ignore - AWS SDK might not be available in all environments","problem":"TypeScript suppression comment","evidence":"TypeScript suppressions hide type errors and should be avoided","fix":"Fix the underlying type issue instead of suppressing it","autofix":{"type":"manual","snippet":"Remove suppression and fix the type error"},"blast_radius":"Local","confidence":0.8,"tags":["typescript","suppression"],"owner":"server"}
{"id":"AUD-TYP-07157","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":72,"code":"} as MockStripeClient;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07158","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":85,"code":"error: (decryptError as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07159","severity":"P1","category":"Type","file":"server/src/services/stripeService.ts","line":119,"code":"}).catch((notificationError: Error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-07160","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":142,"code":"return new Stripe(secretKey) as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07161","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":142,"code":"return new Stripe(secretKey) as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07162","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":153,"code":"const testErr = testError as Stripe.StripeRawError;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07163","severity":"P1","category":"Type","file":"server/src/services/stripeService.ts","line":171,"code":"}).catch((notificationError: Error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-07164","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":183,"code":"error: (error as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07165","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":184,"code":"stack: (error as Error).stack,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07166","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":185,"code":"name: (error as Error).name","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07167","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":195,"code":"error: (error as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07168","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":196,"code":"name: (error as Error).name","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07169","severity":"P1","category":"Type","file":"server/src/services/stripeService.ts","line":198,"code":"}).catch((notificationError: Error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-07170","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":200,"code":"notificationError: (notificationError as Error).message","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07171","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":204,"code":"throw new Error('Failed to initialize Stripe client: ' + (error as Error).message);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07172","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":221,"code":"publishableKey = configDoc.data.publishableKey as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07173","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":249,"code":"error: (error as Error).message,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07174","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":250,"code":"stack: (error as Error).stack,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07175","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":251,"code":"name: (error as Error).name","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07176","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":292,"code":"return configDoc.data.isLiveMode as boolean;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07177","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":324,"code":"const subs = await (stripe as Stripe).subscriptions.list({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07178","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":330,"code":"const plan = active ? ((active.items.data[0].price.nickname?.toLowerCase() as any) || \"pro\") : \"free\";","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07179","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":330,"code":"const plan = active ? ((active.items.data[0].price.nickname?.toLowerCase() as any) || \"pro\") : \"free\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07180","severity":"P2","category":"Type","file":"server/src/services/stripeService.ts","line":339,"code":"logger.error('Failed to sync entitlement from Stripe', { error: (error as Error).message, customerId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07181","severity":"P2","category":"Type","file":"server/src/services/subscriptionAnalyticsService.ts","line":18,"code":"data: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07182","severity":"P2","category":"Type","file":"server/src/services/subscriptionAnalyticsService.ts","line":532,"code":"return `${days}d` as Timeframe;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07183","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":102,"code":"(user.analytics as any).totalLikes = (user.analytics.totalLikes || 0) + 1;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07184","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":102,"code":"(user.analytics as any).totalLikes = (user.analytics.totalLikes || 0) + 1;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07185","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":109,"code":"(user.analytics as any).events.push({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07186","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":109,"code":"(user.analytics as any).events.push({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07187","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":127,"code":"logger.error('Error tracking swipe', { error: (error as Error).message, userId, petId, action });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07188","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":166,"code":"(user.analytics as any).events.push({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07189","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":166,"code":"(user.analytics as any).events.push({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07190","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":182,"code":"logger.error('Error tracking super like', { error: (error as Error).message, userId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07191","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":220,"code":"(user.analytics as any).events.push({","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07192","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":220,"code":"(user.analytics as any).events.push({","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07193","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":237,"code":"logger.error('Error tracking boost', { error: (error as Error).message, userId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07194","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":253,"code":"swipesUsed: (user.premium as any)?.usage?.swipesUsed || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07195","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":253,"code":"swipesUsed: (user.premium as any)?.usage?.swipesUsed || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07196","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":254,"code":"swipesLimit: (user.premium as any)?.usage?.swipesLimit || 50,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07197","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":254,"code":"swipesLimit: (user.premium as any)?.usage?.swipesLimit || 50,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07198","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":255,"code":"superLikesUsed: (user.premium as any)?.usage?.superLikesUsed || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07199","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":255,"code":"superLikesUsed: (user.premium as any)?.usage?.superLikesUsed || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07200","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":256,"code":"superLikesLimit: (user.premium as any)?.usage?.superLikesLimit || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07201","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":256,"code":"superLikesLimit: (user.premium as any)?.usage?.superLikesLimit || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07202","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":257,"code":"boostsUsed: (user.premium as any)?.usage?.boostsUsed || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07203","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":257,"code":"boostsUsed: (user.premium as any)?.usage?.boostsUsed || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07204","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":258,"code":"boostsLimit: (user.premium as any)?.usage?.boostsLimit || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07205","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":258,"code":"boostsLimit: (user.premium as any)?.usage?.boostsLimit || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07206","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":259,"code":"profileViews: (user.analytics as any)?.profileViews || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07207","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":259,"code":"profileViews: (user.analytics as any)?.profileViews || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07208","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":260,"code":"messagesSent: (user.analytics as any)?.totalMessagesSent || 0,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07209","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":260,"code":"messagesSent: (user.analytics as any)?.totalMessagesSent || 0,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07210","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":261,"code":"matchRate: (user.analytics as any)?.totalMatches && (user.analytics as any)?.totalSwipes","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07211","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":261,"code":"matchRate: (user.analytics as any)?.totalMatches && (user.analytics as any)?.totalSwipes","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07212","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":262,"code":"? Math.round(((user.analytics as any).totalMatches / (user.analytics as any).totalSwipes) * 100) || 0 : 0","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07213","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":262,"code":"? Math.round(((user.analytics as any).totalMatches / (user.analytics as any).totalSwipes) * 100) || 0 : 0","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07214","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":267,"code":"logger.error('Error getting usage stats', { error: (error as Error).message, userId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07215","severity":"P2","category":"Type","file":"server/src/services/usageTrackingService.ts","line":302,"code":"logger.error('Error resetting usage stats', { error: (error as Error).message, userId });","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07216","severity":"P2","category":"Type","file":"server/src/services/verificationService.ts","line":4,"code":"* Implements verification tiers (0-4) as per blueprint:","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07217","severity":"P2","category":"Type","file":"server/src/services/verificationService.ts","line":479,"code":"* Check if user has required tier","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07218","severity":"P2","category":"Type","file":"server/src/sockets/liveSocket.ts","line":1,"code":"import { Server as SocketIOServer, Socket } from \"socket.io\";","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07219","severity":"P2","category":"Type","file":"server/src/sockets/liveSocket.ts","line":52,"code":"const decoded = jwt.verify(token as string, process.env.JWT_SECRET!) as any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07220","severity":"P2","category":"Type","file":"server/src/sockets/liveSocket.ts","line":52,"code":"const decoded = jwt.verify(token as string, process.env.JWT_SECRET!) as any;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07221","severity":"P2","category":"Type","file":"server/src/sockets/liveSocket.ts","line":53,"code":"(socket as any).user = {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07222","severity":"P2","category":"Type","file":"server/src/sockets/liveSocket.ts","line":53,"code":"(socket as any).user = {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07223","severity":"P2","category":"Type","file":"server/src/sockets/liveSocket.ts","line":56,"code":"} as SocketUser;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07224","severity":"P2","category":"Type","file":"server/src/sockets/liveSocket.ts","line":65,"code":"const user = (socket as any).user as SocketUser;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07225","severity":"P2","category":"Type","file":"server/src/sockets/liveSocket.ts","line":65,"code":"const user = (socket as any).user as SocketUser;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07226","severity":"P1","category":"Type","file":"server/src/sockets/liveSocket.ts","line":75,"code":".then((stream) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-07227","severity":"P1","category":"Type","file":"server/src/sockets/liveSocket.ts","line":89,"code":".catch((error) => {","problem":"Unawaited promise or floating .then()","evidence":"Unawaited promises can cause unhandled rejections and race conditions","fix":"Add await or proper error handling with try/catch","autofix":{"type":"manual","snippet":"Add await before the promise call or use proper async/await pattern"},"blast_radius":"Local","confidence":0.7,"tags":["async","promises","error-handling"],"owner":"server"}
{"id":"AUD-TYP-07228","severity":"P2","category":"Type","file":"server/src/sockets/liveSocket.ts","line":96,"code":"// Rate limiting: check if user has exceeded message limit","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07229","severity":"P2","category":"Type","file":"server/src/sockets/liveSocket.ts","line":218,"code":"authorId: user.id as any,","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07230","severity":"P2","category":"Type","file":"server/src/sockets/liveSocket.ts","line":218,"code":"authorId: user.id as any,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07231","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":6,"code":"private io: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07232","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":11,"code":"constructor(httpServer: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07233","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":34,"code":"this.io.on('connection', (socket: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07234","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":40,"code":"const decoded: any = jwt.verify(token, process.env.JWT_SECRET!);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07235","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":52,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07236","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":59,"code":"socket.on('location:update', (data: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07237","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":95,"code":"socket.on('activity:start', (data: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07238","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":118,"code":"socket.on('activity:end', (data: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07239","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":129,"code":"socket.on('nearby:request', (data: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07240","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":140,"code":".sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07241","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":147,"code":"socket.on('match:notify', (data: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07242","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":254,"code":".filter((pin: any) => new Date(pin.expiresAt) > new Date());","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07243","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":259,"code":"pins.forEach((pin: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07244","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":306,"code":".filter((pin: any) => new Date(pin.expiresAt) > now);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07245","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":316,"code":"getActivityCounts(pins: any[]) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07246","severity":"P2","category":"Type","file":"server/src/sockets/mapSocket.ts","line":318,"code":"pins.forEach((pin: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07247","severity":"P2","category":"Type","file":"server/src/sockets/pulse.ts","line":4,"code":"export default function attachPulseNamespace(io: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07248","severity":"P2","category":"Type","file":"server/src/sockets/pulse.ts","line":7,"code":"nsp.on('connection', (socket: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07249","severity":"P2","category":"Type","file":"server/src/sockets/pulse.ts","line":21,"code":"function broadcastPin(gridId: string, pin: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07250","severity":"P2","category":"Type","file":"server/src/sockets/suggestions.ts","line":4,"code":"export default function attachSuggestionNamespace(io: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07251","severity":"P2","category":"Type","file":"server/src/sockets/suggestions.ts","line":7,"code":"nsp.on('connection', (socket: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07252","severity":"P2","category":"Type","file":"server/src/sockets/suggestions.ts","line":19,"code":"function pushSuggestion(matchId: string, suggestionEvent: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07253","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":5,"code":"export default function attachWebRTCNamespace(io: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07254","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":14,"code":"nsp.use((socket: any, next: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07255","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":21,"code":"const decoded: any = jwt.verify(token, process.env.JWT_SECRET!);","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07256","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":29,"code":"nsp.on('connection', (socket: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07257","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":40,"code":"socket.on('initiate-call', async (callData: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07258","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":55,"code":"const otherUserId = (match as any).user1?.toString() === callerId","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07259","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":55,"code":"const otherUserId = (match as any).user1?.toString() === callerId","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-07260","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":56,"code":"? (match as any).user2?.toString()","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07261","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":56,"code":"? (match as any).user2?.toString()","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-07262","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":57,"code":": (match as any).user1?.toString();","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07263","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":57,"code":": (match as any).user1?.toString();","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-07264","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":91,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07265","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":98,"code":"socket.on('answer-call', (data: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07266","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":111,"code":"// Notify caller that call was answered","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-07267","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":119,"code":"socket.on('reject-call', (data: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07268","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":124,"code":"// Notify caller that call was rejected","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"web"}
{"id":"AUD-TYP-07269","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":135,"code":"socket.on('end-call', (data: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07270","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":144,"code":"[callerSocketId, calleeSocketId].forEach((socketId: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07271","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":159,"code":"socket.on('webrtc-offer', (data: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07272","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":173,"code":"socket.on('webrtc-answer', (data: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07273","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":187,"code":"socket.on('webrtc-ice-candidate', (data: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07274","severity":"P2","category":"Type","file":"server/src/sockets/webrtc.ts","line":241,"code":"[callerSocketId, calleeSocketId].forEach((socketId: any) => {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"web"}
{"id":"AUD-TYP-07275","severity":"P2","category":"Type","file":"server/src/types/routes.d.ts","line":29,"code":"await handler(req as TRequest, res);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07276","severity":"P2","category":"Type","file":"server/src/types/routes.d.ts","line":340,"code":"const error = new Error(message) as RouteError;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07277","severity":"P2","category":"Type","file":"server/src/utils/databaseIndexes.ts","line":17,"code":"let Message: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07278","severity":"P2","category":"Type","file":"server/src/utils/databaseIndexes.ts","line":20,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07279","severity":"P2","category":"Type","file":"server/src/utils/databaseIndexes.ts","line":26,"code":"let AuditLog: any;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07280","severity":"P2","category":"Type","file":"server/src/utils/databaseIndexes.ts","line":29,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07281","severity":"P2","category":"Type","file":"server/src/utils/databaseIndexes.ts","line":122,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07282","severity":"P2","category":"Type","file":"server/src/utils/databaseIndexes.ts","line":144,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07283","severity":"P2","category":"Type","file":"server/src/utils/databaseIndexes.ts","line":166,"code":"].filter(Boolean) as Array<{ model: any; name: string }>;","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07284","severity":"P2","category":"Type","file":"server/src/utils/databaseIndexes.ts","line":166,"code":"].filter(Boolean) as Array<{ model: any; name: string }>;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07285","severity":"P2","category":"Type","file":"server/src/utils/databaseIndexes.ts","line":174,"code":"} catch (error: any) {","problem":"Explicit any type usage","evidence":"any types defeat TypeScript type safety and should be replaced with proper types","fix":"Replace any with specific TypeScript type or interface","autofix":{"type":"manual","snippet":"Replace : any with proper type like : string, : number, or custom interface"},"blast_radius":"Local","confidence":0.9,"tags":["typescript","type-safety"],"owner":"server"}
{"id":"AUD-TYP-07286","severity":"P2","category":"Type","file":"server/src/utils/encryption.ts","line":66,"code":"}) as Buffer;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07287","severity":"P2","category":"Type","file":"server/src/utils/encryption.ts","line":122,"code":"* Decrypt data that was encrypted using the encrypt function","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07288","severity":"P2","category":"Type","file":"server/src/utils/encryption.ts","line":149,"code":"// Get and derive the key using the same version as when encrypted","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07289","severity":"P2","category":"Type","file":"server/src/utils/encryption.ts","line":190,"code":"// Try to decode as base64","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07290","severity":"P2","category":"Type","file":"server/src/utils/errorHandler.ts","line":32,"code":"* Check if error has a specific property","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07291","severity":"P2","category":"Type","file":"server/src/utils/errorHandler.ts","line":43,"code":"return (error as Record<string, unknown>)[property];","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07292","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":6,"code":"import * as winston from 'winston';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07293","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":7,"code":"import * as path from 'path';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07294","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":8,"code":"import * as fs from 'fs';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07295","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":10,"code":"import * as os from 'os';","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07296","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":27,"code":"const sanitizedMeta = sanitizeLogData(metadata as Record<string, any>);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07297","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":68,"code":"sanitizeObj(value as Record<string, unknown>);","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07298","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":205,"code":"(logger as ExtendedLogger).request = (req: RequestMetadata, message: string, additionalMeta: Record<string, unknown> = {}) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07299","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":207,"code":"const requestId: string = (req?.id || req?.headers?.['x-request-id'] || generateRequestId()) as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07300","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":224,"code":"(logger as ExtendedLogger).apiError = (req: RequestMetadata, error: Error | unknown, statusCode: number = 500, additionalMeta: Record<string, unknown> = {}) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07301","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":225,"code":"const requestId: string = (req?.id || req?.headers?.['x-request-id'] || generateRequestId()) as string;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07302","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":243,"code":"(logger as ExtendedLogger).security = (event: string, data: Record<string, unknown> = {}) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07303","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":253,"code":"(logger as ExtendedLogger).performance = (operation: string, durationMs: number, meta: Record<string, unknown> = {}) => {","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07304","severity":"P2","category":"Type","file":"server/src/utils/logger.ts","line":271,"code":"export default logger as ExtendedLogger;","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07305","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":14,"code":"info: (msg: string) => console.log(`[INFO] ${msg}`),","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07306","severity":"P2","category":"Type","file":"server/src/utils/validateEnv.ts","line":155,"code":"// If variable is not set but has a default, use the default","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07307","severity":"P2","category":"Type","file":"server/src/utils/validateEnv.ts","line":228,"code":"message: `${key} appears to use the same value as another secret`,","problem":"Unsafe type assertion","evidence":"Type assertions can bypass type safety checks","fix":"Use type guards or proper type checking instead of assertions","autofix":{"type":"manual","snippet":"Replace \"as Type\" with proper type guard or runtime check"},"blast_radius":"Local","confidence":0.7,"tags":["typescript","type-assertion"],"owner":"server"}
{"id":"AUD-TYP-07308","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":322,"code":"console.log('\\n📋 Configuration Summary:');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07309","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":323,"code":"console.log(`  • Environment: ${configSummary.environment}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07310","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":324,"code":"console.log(`  • Port: ${configSummary.port}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07311","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":325,"code":"console.log(`  • Client URL: ${configSummary.clientUrl}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07312","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":326,"code":"console.log(`  • MongoDB: ${configSummary.mongodb === 'Configured' ? '✓' : '✗'} ${configSummary.mongodb}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07313","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":327,"code":"console.log(`  • Redis: ${configSummary.redis === 'Configured' ? '✓' : '✗'} ${configSummary.redis}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07314","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":328,"code":"console.log(`  • JWT Authentication: ✓ Configured`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07315","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":329,"code":"console.log(`  • Stripe: ${configSummary.stripe === 'Configured' ? '✓' : '✗'} ${configSummary.stripe}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07316","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":330,"code":"console.log(`  • Cloudinary: ${configSummary.cloudinary === 'Configured' ? '✓' : '✗'} ${configSummary.cloudinary}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07317","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":331,"code":"console.log(`  • Email: ${configSummary.smtp === 'Configured' ? '✓' : '✗'} ${configSummary.smtp}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07318","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":332,"code":"console.log(`  • Error Monitoring: ${configSummary.sentry === 'Configured' ? '✓' : '✗'} ${configSummary.sentry}`);","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
{"id":"AUD-TYP-07319","severity":"P3","category":"Type","file":"server/src/utils/validateEnv.ts","line":333,"code":"console.log('');","problem":"Console.log in production code","evidence":"Console logs should be removed or replaced with proper logging","fix":"Replace with proper logger or remove for production","autofix":{"type":"manual","snippet":"Replace console.log with logger.log or remove"},"blast_radius":"Local","confidence":0.6,"tags":["logging","production"],"owner":"server"}
